
bin\Debug\SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800200  0000a12e  0000a1c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a12e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bb  008003a2  008003a2  0000a364  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a364  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a3c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  0000a400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000136a6  00000000  00000000  0000a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000385a  00000000  00000000  0001df7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d6f  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000292c  00000000  00000000  00026548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ca2  00000000  00000000  00028e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057d2  00000000  00000000  0002bb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  000312e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 02 	jmp	0x406	; 0x406 <__ctors_end>
       4:	0c 94 95 20 	jmp	0x412a	; 0x412a <__vector_1>
       8:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <__vector_2>
       c:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__vector_3>
      10:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__vector_4>
      14:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__vector_5>
      18:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <__vector_6>
      1c:	0c 94 df 21 	jmp	0x43be	; 0x43be <__vector_7>
      20:	0c 94 16 22 	jmp	0x442c	; 0x442c <__vector_8>
      24:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      28:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      2c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      30:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      34:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__vector_13>
      38:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      3c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      40:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      44:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      48:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      4c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      50:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      54:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      58:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      5c:	0c 94 4d 22 	jmp	0x449a	; 0x449a <__vector_23>
      60:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      64:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_25>
      68:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_26>
      6c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      70:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      74:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      78:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      7c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      80:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      84:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      88:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      8c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      90:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_36>
      94:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_37>
      98:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      9c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      a0:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      a4:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      a8:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      ac:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      b0:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      b4:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      b8:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      bc:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      c0:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      c4:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      c8:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      cc:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_51>
      d0:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_52>
      d4:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      d8:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_54>
      dc:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_55>
      e0:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
      e4:	9b 1f       	adc	r25, r27
      e6:	b1 1f       	adc	r27, r17
      e8:	2d 1f       	adc	r18, r29
      ea:	43 1f       	adc	r20, r19
      ec:	5e 1f       	adc	r21, r30
      ee:	7b 1f       	adc	r23, r27
      f0:	cc 1f       	adc	r28, r28
      f2:	e9 1f       	adc	r30, r25
      f4:	5c 20       	and	r5, r12
      f6:	66 20       	and	r6, r6
      f8:	34 20       	and	r3, r4
      fa:	3e 20       	and	r3, r14
      fc:	48 20       	and	r4, r8
      fe:	52 20       	and	r5, r2
     100:	70 20       	and	r7, r0
     102:	7a 20       	and	r7, r10
     104:	72 25       	eor	r23, r2
     106:	81 25       	eor	r24, r1
     108:	90 25       	eor	r25, r0
     10a:	a1 25       	eor	r26, r1
     10c:	b2 25       	eor	r27, r2
     10e:	83 26       	eor	r8, r19
     110:	c3 25       	eor	r28, r3
     112:	d2 25       	eor	r29, r2
     114:	e1 25       	eor	r30, r1
     116:	f2 25       	eor	r31, r2
     118:	03 26       	eor	r0, r19
     11a:	14 26       	eor	r1, r20
     11c:	2e 26       	eor	r2, r30
     11e:	3f 26       	eor	r3, r31
     120:	83 26       	eor	r8, r19
     122:	50 26       	eor	r5, r16
     124:	61 26       	eor	r6, r17
     126:	72 26       	eor	r7, r18
     128:	a3 27       	eor	r26, r19
     12a:	ad 27       	eor	r26, r29
     12c:	85 27       	eor	r24, r21
     12e:	8f 27       	eor	r24, r31
     130:	99 27       	eor	r25, r25
     132:	25 28       	or	r2, r5
     134:	b7 27       	eor	r27, r23
     136:	c1 27       	eor	r28, r17
     138:	cb 27       	eor	r28, r27
     13a:	d5 27       	eor	r29, r21
     13c:	df 27       	eor	r29, r31
     13e:	e9 27       	eor	r30, r25
     140:	f3 27       	eor	r31, r19
     142:	fd 27       	eor	r31, r29
     144:	25 28       	or	r2, r5
     146:	07 28       	or	r0, r7
     148:	11 28       	or	r1, r1
     14a:	1b 28       	or	r1, r11

0000014c <__trampolines_start>:
     14c:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <attachInterrupt+0x1a6>
     150:	0c 94 b7 27 	jmp	0x4f6e	; 0x4f6e <turnOffPWM+0xa0>
     154:	0c 94 72 26 	jmp	0x4ce4	; 0x4ce4 <analogWrite+0x288>
     158:	0c 94 d5 27 	jmp	0x4faa	; 0x4faa <turnOffPWM+0xdc>
     15c:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <analogWrite+0xe6>
     160:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <detachInterrupt+0xa8>
     164:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <_Z17Serial0_availablev>
     168:	0c 94 8a 04 	jmp	0x914	; 0x914 <_ZN14HardwareSerial4readEv>
     16c:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <attachInterrupt+0x68>
     170:	0c 94 fd 27 	jmp	0x4ffa	; 0x4ffa <turnOffPWM+0x12c>
     174:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <analogWrite+0x108>
     178:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_GLOBAL__sub_I___vector_54>
     17c:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <analogWrite+0x1aa>
     180:	0c 94 07 28 	jmp	0x500e	; 0x500e <turnOffPWM+0x140>
     184:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <analogWrite+0x12a>
     188:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <attachInterrupt+0x104>
     18c:	0c 94 47 0b 	jmp	0x168e	; 0x168e <_GLOBAL__sub_I__ZN9IPAddressC2Ev>
     190:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <analogWrite+0xc4>
     194:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <detachInterrupt+0x94>
     198:	0c 94 d2 25 	jmp	0x4ba4	; 0x4ba4 <analogWrite+0x148>
     19c:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN14HardwareSerial5flushEv>
     1a0:	0c 94 3e 20 	jmp	0x407c	; 0x407c <detachInterrupt+0x58>
     1a4:	0c 94 34 20 	jmp	0x4068	; 0x4068 <detachInterrupt+0x44>
     1a8:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <analogWrite+0x200>
     1ac:	0c 94 36 02 	jmp	0x46c	; 0x46c <__cxa_pure_virtual>
     1b0:	0c 94 85 27 	jmp	0x4f0a	; 0x4f0a <turnOffPWM+0x3c>
     1b4:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <_Z17Serial3_availablev>
     1b8:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_ZN14HardwareSerial5writeEh>
     1bc:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <detachInterrupt+0xd0>
     1c0:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <_ZN5Print5writeEPKhj>
     1c4:	0c 94 a3 27 	jmp	0x4f46	; 0x4f46 <turnOffPWM+0x78>
     1c8:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_ZNK9IPAddress7printToER5Print>
     1cc:	0c 94 25 28 	jmp	0x504a	; 0x504a <turnOffPWM+0x17c>
     1d0:	0c 94 22 08 	jmp	0x1044	; 0x1044 <_Z17Serial2_availablev>
     1d4:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN14HardwareSerial4peekEv>
     1d8:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <analogWrite+0x188>
     1dc:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <attachInterrupt+0x94>
     1e0:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_Z17Serial1_availablev>
     1e4:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <analogWrite+0x1cc>
     1e8:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <nothing>
     1ec:	0c 94 f3 27 	jmp	0x4fe6	; 0x4fe6 <turnOffPWM+0x118>
     1f0:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <turnOffPWM+0x168>
     1f4:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <analogWrite+0x166>
     1f8:	0c 94 df 27 	jmp	0x4fbe	; 0x4fbe <turnOffPWM+0xf0>
     1fc:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <analogWrite+0x88>
     200:	0c 94 ad 27 	jmp	0x4f5a	; 0x4f5a <turnOffPWM+0x8c>
     204:	0c 94 c1 27 	jmp	0x4f82	; 0x4f82 <turnOffPWM+0xb4>
     208:	0c 94 8f 27 	jmp	0x4f1e	; 0x4f1e <turnOffPWM+0x50>
     20c:	0c 94 e9 27 	jmp	0x4fd2	; 0x4fd2 <turnOffPWM+0x104>
     210:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_GLOBAL__sub_I___vector_51>
     214:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <analogWrite+0x222>
     218:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <attachInterrupt+0xca>
     21c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <analogWrite+0x244>
     220:	0c 94 11 28 	jmp	0x5022	; 0x5022 <turnOffPWM+0x154>
     224:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_GLOBAL__sub_I___vector_25>
     228:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <detachInterrupt+0x80>
     22c:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <_GLOBAL__sub_I___vector_36>
     230:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <turnOffPWM+0xc8>
     234:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <analogWrite+0x266>
     238:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <attachInterrupt+0x170>
     23c:	0c 94 9b 1f 	jmp	0x3f36	; 0x3f36 <attachInterrupt+0x144>
     240:	0c 94 81 25 	jmp	0x4b02	; 0x4b02 <analogWrite+0xa6>
     244:	0c 94 7c 40 	jmp	0x80f8	; 0x80f8 <_ZN5Print17availableForWriteEv>
     248:	0c 94 c4 04 	jmp	0x988	; 0x988 <_ZN14HardwareSerial17availableForWriteEv>
     24c:	0c 94 8b 40 	jmp	0x8116	; 0x8116 <_ZN5Print5flushEv>
     250:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <attachInterrupt+0x1e0>
     254:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_Z14serialEventRunv>
     258:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <detachInterrupt+0xbc>
     25c:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <analogWrite+0x2aa>
     260:	0c 94 99 27 	jmp	0x4f32	; 0x4f32 <turnOffPWM+0x64>
     264:	0c 94 48 20 	jmp	0x4090	; 0x4090 <detachInterrupt+0x6c>
     268:	0c 94 3b 04 	jmp	0x876	; 0x876 <_ZN14HardwareSerial9availableEv>

0000026c <__trampolines_end>:
     26c:	4e 41       	sbci	r20, 0x1E	; 30
     26e:	4e 49       	Address 0x0000026e is out of bounds.
.word	0xffff	; ????

0000026f <pstr_inity>:
     26f:	49 4e 49 54 59                                      INITY

00000274 <pstr_inf>:
     274:	49 4e 46                                            INF

00000277 <pwr_m10>:
     277:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     287:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028f <pwr_p10>:
     28f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     29f:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     2af:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2bf:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2cf:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2df:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2ef:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2ff:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     30f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     31f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     32f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     33f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     34f:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     35f:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     36f:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     37f:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     38f:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     39f:	3d 27                                               ='

000003a1 <_ZL21tone_pin_to_timer_PGM>:
     3a1:	02                                                  .

000003a2 <port_to_mode_PGM>:
     3a2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003ac <port_to_output_PGM>:
     3ac:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003b6 <port_to_input_PGM>:
     3b6:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003c0 <digital_pin_to_port_PGM>:
     3c0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3d0:	03 03 03 03                                         ....

000003d4 <digital_pin_to_bit_mask_PGM>:
     3d4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3e4:	04 08 10 20                                         ... 

000003e8 <digital_pin_to_timer_PGM>:
     3e8:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3f8:	00 00 00 00                                         ....

000003fc <__ctors_start>:
     3fc:	e8 06       	cpc	r14, r24
     3fe:	ab 07       	cpc	r26, r27
     400:	6e 08       	sbc	r6, r14
     402:	33 09       	sbc	r19, r3
     404:	47 0b       	sbc	r20, r23

00000406 <__ctors_end>:
     406:	11 24       	eor	r1, r1
     408:	1f be       	out	0x3f, r1	; 63
     40a:	cf ef       	ldi	r28, 0xFF	; 255
     40c:	d1 e2       	ldi	r29, 0x21	; 33
     40e:	de bf       	out	0x3e, r29	; 62
     410:	cd bf       	out	0x3d, r28	; 61
     412:	00 e0       	ldi	r16, 0x00	; 0
     414:	0c bf       	out	0x3c, r16	; 60

00000416 <__do_copy_data>:
     416:	13 e0       	ldi	r17, 0x03	; 3
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b2 e0       	ldi	r27, 0x02	; 2
     41c:	ee e2       	ldi	r30, 0x2E	; 46
     41e:	f1 ea       	ldi	r31, 0xA1	; 161
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0b bf       	out	0x3b, r16	; 59
     424:	02 c0       	rjmp	.+4      	; 0x42a <__do_copy_data+0x14>
     426:	07 90       	elpm	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	a2 3a       	cpi	r26, 0xA2	; 162
     42c:	b1 07       	cpc	r27, r17
     42e:	d9 f7       	brne	.-10     	; 0x426 <__do_copy_data+0x10>

00000430 <__do_clear_bss>:
     430:	26 e0       	ldi	r18, 0x06	; 6
     432:	a2 ea       	ldi	r26, 0xA2	; 162
     434:	b3 e0       	ldi	r27, 0x03	; 3
     436:	01 c0       	rjmp	.+2      	; 0x43a <.do_clear_bss_start>

00000438 <.do_clear_bss_loop>:
     438:	1d 92       	st	X+, r1

0000043a <.do_clear_bss_start>:
     43a:	ad 35       	cpi	r26, 0x5D	; 93
     43c:	b2 07       	cpc	r27, r18
     43e:	e1 f7       	brne	.-8      	; 0x438 <.do_clear_bss_loop>

00000440 <__do_global_ctors>:
     440:	11 e0       	ldi	r17, 0x01	; 1
     442:	c3 e0       	ldi	r28, 0x03	; 3
     444:	d2 e0       	ldi	r29, 0x02	; 2
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	06 c0       	rjmp	.+12     	; 0x456 <__do_global_ctors+0x16>
     44a:	21 97       	sbiw	r28, 0x01	; 1
     44c:	01 09       	sbc	r16, r1
     44e:	80 2f       	mov	r24, r16
     450:	fe 01       	movw	r30, r28
     452:	0e 94 45 43 	call	0x868a	; 0x868a <__tablejump2__>
     456:	ce 3f       	cpi	r28, 0xFE	; 254
     458:	d1 07       	cpc	r29, r17
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 07       	cpc	r16, r24
     45e:	a9 f7       	brne	.-22     	; 0x44a <__do_global_ctors+0xa>
     460:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <main>
     464:	0c 94 95 50 	jmp	0xa12a	; 0xa12a <_exit>

00000468 <__bad_interrupt>:
     468:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000046c <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     474:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <abort>

00000478 <__cxa_deleted_virtual>:
}

void __cxa_deleted_virtual(void) {
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     480:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <abort>

00000484 <_ZL12__iCliRetValv>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
    cli();
     48c:	f8 94       	cli
    return 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
}
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <_ZL10__iRestorePKh>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	9a 83       	std	Y+2, r25	; 0x02
     4a4:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
     4a6:	8f e5       	ldi	r24, 0x5F	; 95
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	29 81       	ldd	r18, Y+1	; 0x01
     4ac:	3a 81       	ldd	r19, Y+2	; 0x02
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
     4b6:	00 00       	nop
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <_Z14serialEventRunv>:
  void serialEvent3() __attribute__((weak));
  bool Serial3_available() __attribute__((weak));
#endif

void serialEventRun(void)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4ca:	8c e9       	ldi	r24, 0x9C	; 156
     4cc:	96 e0       	ldi	r25, 0x06	; 6
     4ce:	89 2b       	or	r24, r25
     4d0:	51 f0       	breq	.+20     	; 0x4e6 <_Z14serialEventRunv+0x24>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	89 2b       	or	r24, r25
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <_Z14serialEventRunv+0x24>
     4da:	0e 94 9c 06 	call	0xd38	; 0xd38 <_Z17Serial0_availablev>
     4de:	88 23       	and	r24, r24
     4e0:	11 f0       	breq	.+4      	; 0x4e6 <_Z14serialEventRunv+0x24>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <_Z14serialEventRunv+0x26>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <_Z14serialEventRunv+0x2e>
     4ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     4f0:	8f e5       	ldi	r24, 0x5F	; 95
     4f2:	97 e0       	ldi	r25, 0x07	; 7
     4f4:	89 2b       	or	r24, r25
     4f6:	51 f0       	breq	.+20     	; 0x50c <_Z14serialEventRunv+0x4a>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	89 2b       	or	r24, r25
     4fe:	31 f0       	breq	.+12     	; 0x50c <_Z14serialEventRunv+0x4a>
     500:	0e 94 5f 07 	call	0xebe	; 0xebe <_Z17Serial1_availablev>
     504:	88 23       	and	r24, r24
     506:	11 f0       	breq	.+4      	; 0x50c <_Z14serialEventRunv+0x4a>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	01 c0       	rjmp	.+2      	; 0x50e <_Z14serialEventRunv+0x4c>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	88 23       	and	r24, r24
     510:	11 f0       	breq	.+4      	; 0x516 <_Z14serialEventRunv+0x54>
     512:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     516:	82 e2       	ldi	r24, 0x22	; 34
     518:	98 e0       	ldi	r25, 0x08	; 8
     51a:	89 2b       	or	r24, r25
     51c:	51 f0       	breq	.+20     	; 0x532 <_Z14serialEventRunv+0x70>
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	89 2b       	or	r24, r25
     524:	31 f0       	breq	.+12     	; 0x532 <_Z14serialEventRunv+0x70>
     526:	0e 94 22 08 	call	0x1044	; 0x1044 <_Z17Serial2_availablev>
     52a:	88 23       	and	r24, r24
     52c:	11 f0       	breq	.+4      	; 0x532 <_Z14serialEventRunv+0x70>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	01 c0       	rjmp	.+2      	; 0x534 <_Z14serialEventRunv+0x72>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	88 23       	and	r24, r24
     536:	11 f0       	breq	.+4      	; 0x53c <_Z14serialEventRunv+0x7a>
     538:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     53c:	85 ee       	ldi	r24, 0xE5	; 229
     53e:	98 e0       	ldi	r25, 0x08	; 8
     540:	89 2b       	or	r24, r25
     542:	51 f0       	breq	.+20     	; 0x558 <_Z14serialEventRunv+0x96>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	89 2b       	or	r24, r25
     54a:	31 f0       	breq	.+12     	; 0x558 <_Z14serialEventRunv+0x96>
     54c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_Z17Serial3_availablev>
     550:	88 23       	and	r24, r24
     552:	11 f0       	breq	.+4      	; 0x558 <_Z14serialEventRunv+0x96>
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	01 c0       	rjmp	.+2      	; 0x55a <_Z14serialEventRunv+0x98>
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	88 23       	and	r24, r24
     55c:	11 f0       	breq	.+4      	; 0x562 <_Z14serialEventRunv+0xa0>
     55e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
}
     562:	00 00       	nop
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	00 d0       	rcall	.+0      	; 0x570 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	9b 83       	std	Y+3, r25	; 0x03
     576:	8a 83       	std	Y+2, r24	; 0x02
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	9b 81       	ldd	r25, Y+3	; 0x03
     57c:	fc 01       	movw	r30, r24
     57e:	84 8d       	ldd	r24, Z+28	; 0x1c
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2a 81       	ldd	r18, Y+2	; 0x02
     586:	3b 81       	ldd	r19, Y+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	83 5a       	subi	r24, 0xA3	; 163
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	89 83       	std	Y+1, r24	; 0x01
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	fc 01       	movw	r30, r24
     59c:	84 8d       	ldd	r24, Z+28	; 0x1c
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	8f 73       	andi	r24, 0x3F	; 63
     5a6:	90 78       	andi	r25, 0x80	; 128
     5a8:	99 23       	and	r25, r25
     5aa:	24 f4       	brge	.+8      	; 0x5b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4a>
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	80 6c       	ori	r24, 0xC0	; 192
     5b0:	9f 6f       	ori	r25, 0xFF	; 255
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	28 2f       	mov	r18, r24
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ba:	fc 01       	movw	r30, r24
     5bc:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	fc 01       	movw	r30, r24
     5c4:	86 89       	ldd	r24, Z+22	; 0x16
     5c6:	97 89       	ldd	r25, Z+23	; 0x17
     5c8:	29 81       	ldd	r18, Y+1	; 0x01
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	9b 81       	ldd	r25, Y+3	; 0x03
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 89       	ldd	r24, Z+16	; 0x10
     5d6:	91 89       	ldd	r25, Z+17	; 0x11
     5d8:	2a 81       	ldd	r18, Y+2	; 0x02
     5da:	3b 81       	ldd	r19, Y+3	; 0x03
     5dc:	f9 01       	movw	r30, r18
     5de:	20 89       	ldd	r18, Z+16	; 0x10
     5e0:	31 89       	ldd	r19, Z+17	; 0x11
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	23 70       	andi	r18, 0x03	; 3
     5e8:	20 64       	ori	r18, 0x40	; 64
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	9b 81       	ldd	r25, Y+3	; 0x03
     5f2:	fc 01       	movw	r30, r24
     5f4:	23 8d       	ldd	r18, Z+27	; 0x1b
     5f6:	8a 81       	ldd	r24, Y+2	; 0x02
     5f8:	9b 81       	ldd	r25, Y+3	; 0x03
     5fa:	fc 01       	movw	r30, r24
     5fc:	94 8d       	ldd	r25, Z+28	; 0x1c
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	29 17       	cp	r18, r25
     602:	09 f0       	breq	.+2      	; 0x606 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9c>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	88 23       	and	r24, r24
     608:	79 f0       	breq	.+30     	; 0x628 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbe>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	9b 81       	ldd	r25, Y+3	; 0x03
     60e:	fc 01       	movw	r30, r24
     610:	82 89       	ldd	r24, Z+18	; 0x12
     612:	93 89       	ldd	r25, Z+19	; 0x13
     614:	2a 81       	ldd	r18, Y+2	; 0x02
     616:	3b 81       	ldd	r19, Y+3	; 0x03
     618:	f9 01       	movw	r30, r18
     61a:	22 89       	ldd	r18, Z+18	; 0x12
     61c:	33 89       	ldd	r19, Z+19	; 0x13
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	2f 7d       	andi	r18, 0xDF	; 223
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
  }
}
     628:	00 00       	nop
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <_ZN14HardwareSerial5beginEmh>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	29 97       	sbiw	r28, 0x09	; 9
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	9c 83       	std	Y+4, r25	; 0x04
     64c:	8b 83       	std	Y+3, r24	; 0x03
     64e:	4d 83       	std	Y+5, r20	; 0x05
     650:	5e 83       	std	Y+6, r21	; 0x06
     652:	6f 83       	std	Y+7, r22	; 0x07
     654:	78 87       	std	Y+8, r23	; 0x08
     656:	29 87       	std	Y+9, r18	; 0x09
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	99 e0       	ldi	r25, 0x09	; 9
     65c:	ad e3       	ldi	r26, 0x3D	; 61
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	2d 81       	ldd	r18, Y+5	; 0x05
     662:	3e 81       	ldd	r19, Y+6	; 0x06
     664:	4f 81       	ldd	r20, Y+7	; 0x07
     666:	58 85       	ldd	r21, Y+8	; 0x08
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
     670:	da 01       	movw	r26, r20
     672:	c9 01       	movw	r24, r18
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	a1 09       	sbc	r26, r1
     678:	b1 09       	sbc	r27, r1
     67a:	b6 95       	lsr	r27
     67c:	a7 95       	ror	r26
     67e:	97 95       	ror	r25
     680:	87 95       	ror	r24
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
  *_ucsra = 1 << U2X0;
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	fc 01       	movw	r30, r24
     68c:	80 89       	ldd	r24, Z+16	; 0x10
     68e:	91 89       	ldd	r25, Z+17	; 0x11
     690:	22 e0       	ldi	r18, 0x02	; 2
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     696:	8d 81       	ldd	r24, Y+5	; 0x05
     698:	9e 81       	ldd	r25, Y+6	; 0x06
     69a:	af 81       	ldd	r26, Y+7	; 0x07
     69c:	b8 85       	ldd	r27, Y+8	; 0x08
     69e:	81 15       	cp	r24, r1
     6a0:	91 4e       	sbci	r25, 0xE1	; 225
     6a2:	a1 05       	cpc	r26, r1
     6a4:	b1 05       	cpc	r27, r1
     6a6:	29 f0       	breq	.+10     	; 0x6b2 <_ZN14HardwareSerial5beginEmh+0x7c>
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	81 15       	cp	r24, r1
     6ae:	90 41       	sbci	r25, 0x10	; 16
     6b0:	f0 f0       	brcs	.+60     	; 0x6ee <_ZN14HardwareSerial5beginEmh+0xb8>
  {
    *_ucsra = 0;
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 89       	ldd	r24, Z+16	; 0x10
     6ba:	91 89       	ldd	r25, Z+17	; 0x11
     6bc:	fc 01       	movw	r30, r24
     6be:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     6c0:	80 e8       	ldi	r24, 0x80	; 128
     6c2:	94 e8       	ldi	r25, 0x84	; 132
     6c4:	ae e1       	ldi	r26, 0x1E	; 30
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	2d 81       	ldd	r18, Y+5	; 0x05
     6ca:	3e 81       	ldd	r19, Y+6	; 0x06
     6cc:	4f 81       	ldd	r20, Y+7	; 0x07
     6ce:	58 85       	ldd	r21, Y+8	; 0x08
     6d0:	bc 01       	movw	r22, r24
     6d2:	cd 01       	movw	r24, r26
     6d4:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
     6d8:	da 01       	movw	r26, r20
     6da:	c9 01       	movw	r24, r18
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	a1 09       	sbc	r26, r1
     6e0:	b1 09       	sbc	r27, r1
     6e2:	b6 95       	lsr	r27
     6e4:	a7 95       	ror	r26
     6e6:	97 95       	ror	r25
     6e8:	87 95       	ror	r24
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	89 83       	std	Y+1, r24	; 0x01
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	fc 01       	movw	r30, r24
     6f4:	84 85       	ldd	r24, Z+12	; 0x0c
     6f6:	95 85       	ldd	r25, Z+13	; 0x0d
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	23 2f       	mov	r18, r19
     6fe:	33 27       	eor	r19, r19
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9c 81       	ldd	r25, Y+4	; 0x04
     708:	fc 01       	movw	r30, r24
     70a:	86 85       	ldd	r24, Z+14	; 0x0e
     70c:	97 85       	ldd	r25, Z+15	; 0x0f
     70e:	29 81       	ldd	r18, Y+1	; 0x01
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18

  _written = false;
     714:	8b 81       	ldd	r24, Y+3	; 0x03
     716:	9c 81       	ldd	r25, Y+4	; 0x04
     718:	fc 01       	movw	r30, r24
     71a:	10 8e       	std	Z+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	9c 81       	ldd	r25, Y+4	; 0x04
     720:	fc 01       	movw	r30, r24
     722:	84 89       	ldd	r24, Z+20	; 0x14
     724:	95 89       	ldd	r25, Z+21	; 0x15
     726:	29 85       	ldd	r18, Y+9	; 0x09
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
  
  sbi(*_ucsrb, RXEN0);
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	fc 01       	movw	r30, r24
     732:	82 89       	ldd	r24, Z+18	; 0x12
     734:	93 89       	ldd	r25, Z+19	; 0x13
     736:	2b 81       	ldd	r18, Y+3	; 0x03
     738:	3c 81       	ldd	r19, Y+4	; 0x04
     73a:	f9 01       	movw	r30, r18
     73c:	22 89       	ldd	r18, Z+18	; 0x12
     73e:	33 89       	ldd	r19, Z+19	; 0x13
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	20 61       	ori	r18, 0x10	; 16
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
  sbi(*_ucsrb, TXEN0);
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	fc 01       	movw	r30, r24
     750:	82 89       	ldd	r24, Z+18	; 0x12
     752:	93 89       	ldd	r25, Z+19	; 0x13
     754:	2b 81       	ldd	r18, Y+3	; 0x03
     756:	3c 81       	ldd	r19, Y+4	; 0x04
     758:	f9 01       	movw	r30, r18
     75a:	22 89       	ldd	r18, Z+18	; 0x12
     75c:	33 89       	ldd	r19, Z+19	; 0x13
     75e:	f9 01       	movw	r30, r18
     760:	20 81       	ld	r18, Z
     762:	28 60       	ori	r18, 0x08	; 8
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
  sbi(*_ucsrb, RXCIE0);
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	9c 81       	ldd	r25, Y+4	; 0x04
     76c:	fc 01       	movw	r30, r24
     76e:	82 89       	ldd	r24, Z+18	; 0x12
     770:	93 89       	ldd	r25, Z+19	; 0x13
     772:	2b 81       	ldd	r18, Y+3	; 0x03
     774:	3c 81       	ldd	r19, Y+4	; 0x04
     776:	f9 01       	movw	r30, r18
     778:	22 89       	ldd	r18, Z+18	; 0x12
     77a:	33 89       	ldd	r19, Z+19	; 0x13
     77c:	f9 01       	movw	r30, r18
     77e:	20 81       	ld	r18, Z
     780:	20 68       	ori	r18, 0x80	; 128
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
  cbi(*_ucsrb, UDRIE0);
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	9c 81       	ldd	r25, Y+4	; 0x04
     78a:	fc 01       	movw	r30, r24
     78c:	82 89       	ldd	r24, Z+18	; 0x12
     78e:	93 89       	ldd	r25, Z+19	; 0x13
     790:	2b 81       	ldd	r18, Y+3	; 0x03
     792:	3c 81       	ldd	r19, Y+4	; 0x04
     794:	f9 01       	movw	r30, r18
     796:	22 89       	ldd	r18, Z+18	; 0x12
     798:	33 89       	ldd	r19, Z+19	; 0x13
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	2f 7d       	andi	r18, 0xDF	; 223
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
}
     7a4:	00 00       	nop
     7a6:	29 96       	adiw	r28, 0x09	; 9
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	1f 92       	push	r1
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	89 83       	std	Y+1, r24	; 0x01
  // wait for transmission of outgoing data
  flush();
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	06 96       	adiw	r24, 0x06	; 6
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 81       	ld	r18, Z
     7d8:	31 81       	ldd	r19, Z+1	; 0x01
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	f9 01       	movw	r30, r18
     7e0:	19 95       	eicall

  cbi(*_ucsrb, RXEN0);
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	fc 01       	movw	r30, r24
     7e8:	82 89       	ldd	r24, Z+18	; 0x12
     7ea:	93 89       	ldd	r25, Z+19	; 0x13
     7ec:	29 81       	ldd	r18, Y+1	; 0x01
     7ee:	3a 81       	ldd	r19, Y+2	; 0x02
     7f0:	f9 01       	movw	r30, r18
     7f2:	22 89       	ldd	r18, Z+18	; 0x12
     7f4:	33 89       	ldd	r19, Z+19	; 0x13
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	2f 7e       	andi	r18, 0xEF	; 239
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
  cbi(*_ucsrb, TXEN0);
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	fc 01       	movw	r30, r24
     806:	82 89       	ldd	r24, Z+18	; 0x12
     808:	93 89       	ldd	r25, Z+19	; 0x13
     80a:	29 81       	ldd	r18, Y+1	; 0x01
     80c:	3a 81       	ldd	r19, Y+2	; 0x02
     80e:	f9 01       	movw	r30, r18
     810:	22 89       	ldd	r18, Z+18	; 0x12
     812:	33 89       	ldd	r19, Z+19	; 0x13
     814:	f9 01       	movw	r30, r18
     816:	20 81       	ld	r18, Z
     818:	27 7f       	andi	r18, 0xF7	; 247
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
  cbi(*_ucsrb, RXCIE0);
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	fc 01       	movw	r30, r24
     824:	82 89       	ldd	r24, Z+18	; 0x12
     826:	93 89       	ldd	r25, Z+19	; 0x13
     828:	29 81       	ldd	r18, Y+1	; 0x01
     82a:	3a 81       	ldd	r19, Y+2	; 0x02
     82c:	f9 01       	movw	r30, r18
     82e:	22 89       	ldd	r18, Z+18	; 0x12
     830:	33 89       	ldd	r19, Z+19	; 0x13
     832:	f9 01       	movw	r30, r18
     834:	20 81       	ld	r18, Z
     836:	2f 77       	andi	r18, 0x7F	; 127
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
  cbi(*_ucsrb, UDRIE0);
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	fc 01       	movw	r30, r24
     842:	82 89       	ldd	r24, Z+18	; 0x12
     844:	93 89       	ldd	r25, Z+19	; 0x13
     846:	29 81       	ldd	r18, Y+1	; 0x01
     848:	3a 81       	ldd	r19, Y+2	; 0x02
     84a:	f9 01       	movw	r30, r18
     84c:	22 89       	ldd	r18, Z+18	; 0x12
     84e:	33 89       	ldd	r19, Z+19	; 0x13
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	2f 7d       	andi	r18, 0xDF	; 223
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	fc 01       	movw	r30, r24
     860:	22 8d       	ldd	r18, Z+26	; 0x1a
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	fc 01       	movw	r30, r24
     868:	21 8f       	std	Z+25, r18	; 0x19
}
     86a:	00 00       	nop
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	1f 92       	push	r1
     87c:	1f 92       	push	r1
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	9a 83       	std	Y+2, r25	; 0x02
     884:	89 83       	std	Y+1, r24	; 0x01
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	9a 81       	ldd	r25, Y+2	; 0x02
     88a:	fc 01       	movw	r30, r24
     88c:	81 8d       	ldd	r24, Z+25	; 0x19
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9c 01       	movw	r18, r24
     894:	20 5c       	subi	r18, 0xC0	; 192
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	fc 01       	movw	r30, r24
     89e:	82 8d       	ldd	r24, Z+26	; 0x1a
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a9 01       	movw	r20, r18
     8a6:	48 1b       	sub	r20, r24
     8a8:	59 0b       	sbc	r21, r25
     8aa:	ca 01       	movw	r24, r20
     8ac:	8f 73       	andi	r24, 0x3F	; 63
     8ae:	99 27       	eor	r25, r25
}
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	1f 92       	push	r1
     8c0:	1f 92       	push	r1
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer_head == _rx_buffer_tail) {
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	fc 01       	movw	r30, r24
     8d0:	21 8d       	ldd	r18, Z+25	; 0x19
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	fc 01       	movw	r30, r24
     8d8:	92 8d       	ldd	r25, Z+26	; 0x1a
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	29 17       	cp	r18, r25
     8de:	09 f0       	breq	.+2      	; 0x8e2 <_ZN14HardwareSerial4peekEv+0x28>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	88 23       	and	r24, r24
     8e4:	19 f0       	breq	.+6      	; 0x8ec <_ZN14HardwareSerial4peekEv+0x32>
    return -1;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	0f c0       	rjmp	.+30     	; 0x90a <_ZN14HardwareSerial4peekEv+0x50>
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	fc 01       	movw	r30, r24
     8f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     8f4:	88 2f       	mov	r24, r24
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	29 81       	ldd	r18, Y+1	; 0x01
     8fa:	3a 81       	ldd	r19, Y+2	; 0x02
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	4d 96       	adiw	r24, 0x1d	; 29
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	00 d0       	rcall	.+0      	; 0x91a <_ZN14HardwareSerial4readEv+0x6>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	9b 83       	std	Y+3, r25	; 0x03
     920:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	9b 81       	ldd	r25, Y+3	; 0x03
     926:	fc 01       	movw	r30, r24
     928:	21 8d       	ldd	r18, Z+25	; 0x19
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	9b 81       	ldd	r25, Y+3	; 0x03
     92e:	fc 01       	movw	r30, r24
     930:	92 8d       	ldd	r25, Z+26	; 0x1a
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	29 17       	cp	r18, r25
     936:	09 f0       	breq	.+2      	; 0x93a <_ZN14HardwareSerial4readEv+0x26>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	88 23       	and	r24, r24
     93c:	19 f0       	breq	.+6      	; 0x944 <_ZN14HardwareSerial4readEv+0x30>
    return -1;
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	9f ef       	ldi	r25, 0xFF	; 255
     942:	1c c0       	rjmp	.+56     	; 0x97c <_ZN14HardwareSerial4readEv+0x68>
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	9b 81       	ldd	r25, Y+3	; 0x03
     948:	fc 01       	movw	r30, r24
     94a:	82 8d       	ldd	r24, Z+26	; 0x1a
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	2a 81       	ldd	r18, Y+2	; 0x02
     952:	3b 81       	ldd	r19, Y+3	; 0x03
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	4d 96       	adiw	r24, 0x1d	; 29
     95a:	fc 01       	movw	r30, r24
     95c:	80 81       	ld	r24, Z
     95e:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	9b 81       	ldd	r25, Y+3	; 0x03
     964:	fc 01       	movw	r30, r24
     966:	82 8d       	ldd	r24, Z+26	; 0x1a
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	28 2f       	mov	r18, r24
     96c:	2f 73       	andi	r18, 0x3F	; 63
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	9b 81       	ldd	r25, Y+3	; 0x03
     972:	fc 01       	movw	r30, r24
     974:	22 8f       	std	Z+26, r18	; 0x1a
    return c;
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <_ZN14HardwareSerial17availableForWriteEv>:

int HardwareSerial::availableForWrite(void)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	00 d0       	rcall	.+0      	; 0x98e <_ZN14HardwareSerial17availableForWriteEv+0x6>
     98e:	1f 92       	push	r1
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	9c 83       	std	Y+4, r25	; 0x04
     996:	8b 83       	std	Y+3, r24	; 0x03
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	9c 81       	ldd	r25, Y+4	; 0x04
     99c:	fc 01       	movw	r30, r24
     99e:	83 8d       	ldd	r24, Z+27	; 0x1b
     9a0:	89 83       	std	Y+1, r24	; 0x01
    tail = _tx_buffer_tail;
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	fc 01       	movw	r30, r24
     9a8:	84 8d       	ldd	r24, Z+28	; 0x1c
     9aa:	8a 83       	std	Y+2, r24	; 0x02
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     9ac:	99 81       	ldd	r25, Y+1	; 0x01
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	98 17       	cp	r25, r24
     9b2:	68 f0       	brcs	.+26     	; 0x9ce <_ZN14HardwareSerial17availableForWriteEv+0x46>
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	2f e3       	ldi	r18, 0x3F	; 63
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	28 1b       	sub	r18, r24
     9c0:	39 0b       	sbc	r19, r25
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	88 2f       	mov	r24, r24
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <_ZN14HardwareSerial17availableForWriteEv+0x5c>
  return tail - head - 1;
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	28 2f       	mov	r18, r24
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	88 2f       	mov	r24, r24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a9 01       	movw	r20, r18
     9dc:	48 1b       	sub	r20, r24
     9de:	59 0b       	sbc	r21, r25
     9e0:	ca 01       	movw	r24, r20
     9e2:	01 97       	sbiw	r24, 0x01	; 1
}
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	1f 92       	push	r1
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	fc 01       	movw	r30, r24
     a08:	90 8d       	ldd	r25, Z+24	; 0x18
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	89 27       	eor	r24, r25
     a0e:	88 23       	and	r24, r24
     a10:	09 f0       	breq	.+2      	; 0xa14 <_ZN14HardwareSerial5flushEv+0x22>
     a12:	4e c0       	rjmp	.+156    	; 0xab0 <_ZN14HardwareSerial5flushEv+0xbe>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	fc 01       	movw	r30, r24
     a1a:	82 89       	ldd	r24, Z+18	; 0x12
     a1c:	93 89       	ldd	r25, Z+19	; 0x13
     a1e:	fc 01       	movw	r30, r24
     a20:	80 81       	ld	r24, Z
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	80 72       	andi	r24, 0x20	; 32
     a28:	99 27       	eor	r25, r25
     a2a:	89 2b       	or	r24, r25
     a2c:	69 f4       	brne	.+26     	; 0xa48 <_ZN14HardwareSerial5flushEv+0x56>
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	fc 01       	movw	r30, r24
     a34:	80 89       	ldd	r24, Z+16	; 0x10
     a36:	91 89       	ldd	r25, Z+17	; 0x11
     a38:	fc 01       	movw	r30, r24
     a3a:	80 81       	ld	r24, Z
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	80 74       	andi	r24, 0x40	; 64
     a42:	99 27       	eor	r25, r25
     a44:	89 2b       	or	r24, r25
     a46:	11 f4       	brne	.+4      	; 0xa4c <_ZN14HardwareSerial5flushEv+0x5a>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <_ZN14HardwareSerial5flushEv+0x5c>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	88 23       	and	r24, r24
     a50:	81 f1       	breq	.+96     	; 0xab2 <_ZN14HardwareSerial5flushEv+0xc0>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a52:	8f e5       	ldi	r24, 0x5F	; 95
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	80 81       	ld	r24, Z
     a5a:	88 23       	and	r24, r24
     a5c:	7c f0       	brlt	.+30     	; 0xa7c <_ZN14HardwareSerial5flushEv+0x8a>
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	fc 01       	movw	r30, r24
     a64:	82 89       	ldd	r24, Z+18	; 0x12
     a66:	93 89       	ldd	r25, Z+19	; 0x13
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	80 72       	andi	r24, 0x20	; 32
     a72:	99 27       	eor	r25, r25
     a74:	89 2b       	or	r24, r25
     a76:	11 f0       	breq	.+4      	; 0xa7c <_ZN14HardwareSerial5flushEv+0x8a>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <_ZN14HardwareSerial5flushEv+0x8c>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	88 23       	and	r24, r24
     a80:	49 f2       	breq	.-110    	; 0xa14 <_ZN14HardwareSerial5flushEv+0x22>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	fc 01       	movw	r30, r24
     a88:	80 89       	ldd	r24, Z+16	; 0x10
     a8a:	91 89       	ldd	r25, Z+17	; 0x11
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	80 72       	andi	r24, 0x20	; 32
     a96:	99 27       	eor	r25, r25
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	89 2b       	or	r24, r25
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <_ZN14HardwareSerial5flushEv+0xae>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	22 23       	and	r18, r18
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <_ZN14HardwareSerial5flushEv+0xb4>
     aa4:	b7 cf       	rjmp	.-146    	; 0xa14 <_ZN14HardwareSerial5flushEv+0x22>
	  _tx_udr_empty_irq();
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     aae:	b2 cf       	rjmp	.-156    	; 0xa14 <_ZN14HardwareSerial5flushEv+0x22>
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;
     ab0:	00 00       	nop
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	28 97       	sbiw	r28, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9f 83       	std	Y+7, r25	; 0x07
     ad2:	8e 83       	std	Y+6, r24	; 0x06
     ad4:	68 87       	std	Y+8, r22	; 0x08
  _written = true;
     ad6:	8e 81       	ldd	r24, Y+6	; 0x06
     ad8:	9f 81       	ldd	r25, Y+7	; 0x07
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	fc 01       	movw	r30, r24
     ade:	20 8f       	std	Z+24, r18	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ae0:	8e 81       	ldd	r24, Y+6	; 0x06
     ae2:	9f 81       	ldd	r25, Y+7	; 0x07
     ae4:	fc 01       	movw	r30, r24
     ae6:	23 8d       	ldd	r18, Z+27	; 0x1b
     ae8:	8e 81       	ldd	r24, Y+6	; 0x06
     aea:	9f 81       	ldd	r25, Y+7	; 0x07
     aec:	fc 01       	movw	r30, r24
     aee:	84 8d       	ldd	r24, Z+28	; 0x1c
     af0:	28 17       	cp	r18, r24
     af2:	79 f4       	brne	.+30     	; 0xb12 <_ZN14HardwareSerial5writeEh+0x56>
     af4:	8e 81       	ldd	r24, Y+6	; 0x06
     af6:	9f 81       	ldd	r25, Y+7	; 0x07
     af8:	fc 01       	movw	r30, r24
     afa:	80 89       	ldd	r24, Z+16	; 0x10
     afc:	91 89       	ldd	r25, Z+17	; 0x11
     afe:	fc 01       	movw	r30, r24
     b00:	80 81       	ld	r24, Z
     b02:	88 2f       	mov	r24, r24
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	80 72       	andi	r24, 0x20	; 32
     b08:	99 27       	eor	r25, r25
     b0a:	89 2b       	or	r24, r25
     b0c:	11 f0       	breq	.+4      	; 0xb12 <_ZN14HardwareSerial5writeEh+0x56>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <_ZN14HardwareSerial5writeEh+0x58>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	88 23       	and	r24, r24
     b16:	61 f1       	breq	.+88     	; 0xb70 <_ZN14HardwareSerial5writeEh+0xb4>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b18:	8f e5       	ldi	r24, 0x5F	; 95
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	fc 01       	movw	r30, r24
     b1e:	80 81       	ld	r24, Z
     b20:	8c 83       	std	Y+4, r24	; 0x04
     b22:	0e 94 42 02 	call	0x484	; 0x484 <_ZL12__iCliRetValv>
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	88 23       	and	r24, r24
     b2c:	d1 f0       	breq	.+52     	; 0xb62 <_ZN14HardwareSerial5writeEh+0xa6>
      *_udr = c;
     b2e:	8e 81       	ldd	r24, Y+6	; 0x06
     b30:	9f 81       	ldd	r25, Y+7	; 0x07
     b32:	fc 01       	movw	r30, r24
     b34:	86 89       	ldd	r24, Z+22	; 0x16
     b36:	97 89       	ldd	r25, Z+23	; 0x17
     b38:	28 85       	ldd	r18, Y+8	; 0x08
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b3e:	8e 81       	ldd	r24, Y+6	; 0x06
     b40:	9f 81       	ldd	r25, Y+7	; 0x07
     b42:	fc 01       	movw	r30, r24
     b44:	80 89       	ldd	r24, Z+16	; 0x10
     b46:	91 89       	ldd	r25, Z+17	; 0x11
     b48:	2e 81       	ldd	r18, Y+6	; 0x06
     b4a:	3f 81       	ldd	r19, Y+7	; 0x07
     b4c:	f9 01       	movw	r30, r18
     b4e:	20 89       	ldd	r18, Z+16	; 0x10
     b50:	31 89       	ldd	r19, Z+17	; 0x11
     b52:	f9 01       	movw	r30, r18
     b54:	20 81       	ld	r18, Z
     b56:	23 70       	andi	r18, 0x03	; 3
     b58:	20 64       	ori	r18, 0x40	; 64
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	e3 cf       	rjmp	.-58     	; 0xb28 <_ZN14HardwareSerial5writeEh+0x6c>
     b62:	ce 01       	movw	r24, r28
     b64:	04 96       	adiw	r24, 0x04	; 4
     b66:	0e 94 4b 02 	call	0x496	; 0x496 <_ZL10__iRestorePKh>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	71 c0       	rjmp	.+226    	; 0xc52 <_ZN14HardwareSerial5writeEh+0x196>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b70:	8e 81       	ldd	r24, Y+6	; 0x06
     b72:	9f 81       	ldd	r25, Y+7	; 0x07
     b74:	fc 01       	movw	r30, r24
     b76:	83 8d       	ldd	r24, Z+27	; 0x1b
     b78:	88 2f       	mov	r24, r24
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	8f 73       	andi	r24, 0x3F	; 63
     b80:	90 78       	andi	r25, 0x80	; 128
     b82:	99 23       	and	r25, r25
     b84:	24 f4       	brge	.+8      	; 0xb8e <_ZN14HardwareSerial5writeEh+0xd2>
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	80 6c       	ori	r24, 0xC0	; 192
     b8a:	9f 6f       	ori	r25, 0xFF	; 255
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	8b 83       	std	Y+3, r24	; 0x03
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b90:	8e 81       	ldd	r24, Y+6	; 0x06
     b92:	9f 81       	ldd	r25, Y+7	; 0x07
     b94:	fc 01       	movw	r30, r24
     b96:	24 8d       	ldd	r18, Z+28	; 0x1c
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	9b 81       	ldd	r25, Y+3	; 0x03
     b9c:	29 17       	cp	r18, r25
     b9e:	09 f0       	breq	.+2      	; 0xba2 <_ZN14HardwareSerial5writeEh+0xe6>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	88 23       	and	r24, r24
     ba4:	01 f1       	breq	.+64     	; 0xbe6 <_ZN14HardwareSerial5writeEh+0x12a>
    if (bit_is_clear(SREG, SREG_I)) {
     ba6:	8f e5       	ldi	r24, 0x5F	; 95
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	80 95       	com	r24
     bb0:	88 1f       	adc	r24, r24
     bb2:	88 27       	eor	r24, r24
     bb4:	88 1f       	adc	r24, r24
     bb6:	88 23       	and	r24, r24
     bb8:	59 f3       	breq	.-42     	; 0xb90 <_ZN14HardwareSerial5writeEh+0xd4>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     bba:	8e 81       	ldd	r24, Y+6	; 0x06
     bbc:	9f 81       	ldd	r25, Y+7	; 0x07
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 89       	ldd	r24, Z+16	; 0x10
     bc2:	91 89       	ldd	r25, Z+17	; 0x11
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 72       	andi	r24, 0x20	; 32
     bce:	99 27       	eor	r25, r25
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	89 2b       	or	r24, r25
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <_ZN14HardwareSerial5writeEh+0x11c>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	22 23       	and	r18, r18
     bda:	d1 f2       	breq	.-76     	; 0xb90 <_ZN14HardwareSerial5writeEh+0xd4>
	_tx_udr_empty_irq();
     bdc:	8e 81       	ldd	r24, Y+6	; 0x06
     bde:	9f 81       	ldd	r25, Y+7	; 0x07
     be0:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     be4:	d5 cf       	rjmp	.-86     	; 0xb90 <_ZN14HardwareSerial5writeEh+0xd4>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	fc 01       	movw	r30, r24
     bec:	83 8d       	ldd	r24, Z+27	; 0x1b
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	2e 81       	ldd	r18, Y+6	; 0x06
     bf4:	3f 81       	ldd	r19, Y+7	; 0x07
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	83 5a       	subi	r24, 0xA3	; 163
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	28 85       	ldd	r18, Y+8	; 0x08
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c04:	8f e5       	ldi	r24, 0x5F	; 95
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	fc 01       	movw	r30, r24
     c0a:	80 81       	ld	r24, Z
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	0e 94 42 02 	call	0x484	; 0x484 <_ZL12__iCliRetValv>
     c12:	8a 83       	std	Y+2, r24	; 0x02
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	88 23       	and	r24, r24
     c18:	b1 f0       	breq	.+44     	; 0xc46 <_ZN14HardwareSerial5writeEh+0x18a>
    _tx_buffer_head = i;
     c1a:	8e 81       	ldd	r24, Y+6	; 0x06
     c1c:	9f 81       	ldd	r25, Y+7	; 0x07
     c1e:	2b 81       	ldd	r18, Y+3	; 0x03
     c20:	fc 01       	movw	r30, r24
     c22:	23 8f       	std	Z+27, r18	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	9f 81       	ldd	r25, Y+7	; 0x07
     c28:	fc 01       	movw	r30, r24
     c2a:	82 89       	ldd	r24, Z+18	; 0x12
     c2c:	93 89       	ldd	r25, Z+19	; 0x13
     c2e:	2e 81       	ldd	r18, Y+6	; 0x06
     c30:	3f 81       	ldd	r19, Y+7	; 0x07
     c32:	f9 01       	movw	r30, r18
     c34:	22 89       	ldd	r18, Z+18	; 0x12
     c36:	33 89       	ldd	r19, Z+19	; 0x13
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	20 62       	ori	r18, 0x20	; 32
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
  _tx_buffer[_tx_buffer_head] = c;

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c42:	1a 82       	std	Y+2, r1	; 0x02
     c44:	e7 cf       	rjmp	.-50     	; 0xc14 <_ZN14HardwareSerial5writeEh+0x158>
     c46:	ce 01       	movw	r24, r28
     c48:	05 96       	adiw	r24, 0x05	; 5
     c4a:	0e 94 4b 02 	call	0x496	; 0x496 <_ZL10__iRestorePKh>
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
}
     c52:	28 96       	adiw	r28, 0x08	; 8
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     c74:	0f 92       	push	r0
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
     c96:	82 ea       	ldi	r24, 0xA2	; 162
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	0e 94 30 41 	call	0x8260	; 0x8260 <_ZN14HardwareSerial16_rx_complete_irqEv>
  }
     c9e:	00 00       	nop
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     cc2:	0f 90       	pop	r0
     cc4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     cde:	0f 92       	push	r0
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
     d00:	82 ea       	ldi	r24, 0xA2	; 162
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d08:	00 00       	nop
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	7f 91       	pop	r23
     d1c:	6f 91       	pop	r22
     d1e:	5f 91       	pop	r21
     d20:	4f 91       	pop	r20
     d22:	3f 91       	pop	r19
     d24:	2f 91       	pop	r18
     d26:	0f 90       	pop	r0
     d28:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     d2c:	0f 90       	pop	r0
     d2e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
     d40:	82 ea       	ldi	r24, 0xA2	; 162
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN14HardwareSerial9availableEv>
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	89 2b       	or	r24, r25
     d4c:	09 f4       	brne	.+2      	; 0xd50 <_Z17Serial0_availablev+0x18>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	82 2f       	mov	r24, r18
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <_Z41__static_initialization_and_destruction_0ii>:
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <_Z41__static_initialization_and_destruction_0ii+0x12>
     d6a:	1f 92       	push	r1
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	7c 83       	std	Y+4, r23	; 0x04
     d76:	6b 83       	std	Y+3, r22	; 0x03
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	d1 f4       	brne	.+52     	; 0xdb4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	b1 f4       	brne	.+44     	; 0xdb4 <_Z41__static_initialization_and_destruction_0ii+0x5c>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
     d88:	0f 2e       	mov	r0, r31
     d8a:	f6 ec       	ldi	r31, 0xC6	; 198
     d8c:	cf 2e       	mov	r12, r31
     d8e:	d1 2c       	mov	r13, r1
     d90:	f0 2d       	mov	r31, r0
     d92:	0f 2e       	mov	r0, r31
     d94:	f2 ec       	ldi	r31, 0xC2	; 194
     d96:	ef 2e       	mov	r14, r31
     d98:	f1 2c       	mov	r15, r1
     d9a:	f0 2d       	mov	r31, r0
     d9c:	01 ec       	ldi	r16, 0xC1	; 193
     d9e:	10 e0       	ldi	r17, 0x00	; 0
     da0:	20 ec       	ldi	r18, 0xC0	; 192
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	44 ec       	ldi	r20, 0xC4	; 196
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	65 ec       	ldi	r22, 0xC5	; 197
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	82 ea       	ldi	r24, 0xA2	; 162
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 bd 40 	call	0x817a	; 0x817a <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     db4:	00 00       	nop
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <_GLOBAL__sub_I___vector_25>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 ac 06 	call	0xd58	; 0xd58 <_Z41__static_initialization_and_destruction_0ii>
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     dfa:	0f 92       	push	r0
     dfc:	2f 93       	push	r18
     dfe:	3f 93       	push	r19
     e00:	4f 93       	push	r20
     e02:	5f 93       	push	r21
     e04:	6f 93       	push	r22
     e06:	7f 93       	push	r23
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
  Serial1._rx_complete_irq();
     e1c:	8f e3       	ldi	r24, 0x3F	; 63
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	0e 94 30 41 	call	0x8260	; 0x8260 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     e24:	00 00       	nop
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     e48:	0f 90       	pop	r0
     e4a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     e64:	0f 92       	push	r0
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
  Serial1._tx_udr_empty_irq();
     e86:	8f e3       	ldi	r24, 0x3F	; 63
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e8e:	00 00       	nop
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	ff 91       	pop	r31
     e96:	ef 91       	pop	r30
     e98:	bf 91       	pop	r27
     e9a:	af 91       	pop	r26
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	7f 91       	pop	r23
     ea2:	6f 91       	pop	r22
     ea4:	5f 91       	pop	r21
     ea6:	4f 91       	pop	r20
     ea8:	3f 91       	pop	r19
     eaa:	2f 91       	pop	r18
     eac:	0f 90       	pop	r0
     eae:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     eb2:	0f 90       	pop	r0
     eb4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <_Z17Serial1_availablev>:

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
  return Serial1.available();
     ec6:	8f e3       	ldi	r24, 0x3F	; 63
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN14HardwareSerial9availableEv>
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	89 2b       	or	r24, r25
     ed2:	09 f4       	brne	.+2      	; 0xed6 <_Z17Serial1_availablev+0x18>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	82 2f       	mov	r24, r18
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <_Z41__static_initialization_and_destruction_0ii>:
     ede:	cf 92       	push	r12
     ee0:	df 92       	push	r13
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <_Z41__static_initialization_and_destruction_0ii+0x12>
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	7c 83       	std	Y+4, r23	; 0x04
     efc:	6b 83       	std	Y+3, r22	; 0x03
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	d1 f4       	brne	.+52     	; 0xf3a <_Z41__static_initialization_and_destruction_0ii+0x5c>
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	b1 f4       	brne	.+44     	; 0xf3a <_Z41__static_initialization_and_destruction_0ii+0x5c>
#endif
{
  Serial1._tx_udr_empty_irq();
}

HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);
     f0e:	0f 2e       	mov	r0, r31
     f10:	fe ec       	ldi	r31, 0xCE	; 206
     f12:	cf 2e       	mov	r12, r31
     f14:	d1 2c       	mov	r13, r1
     f16:	f0 2d       	mov	r31, r0
     f18:	0f 2e       	mov	r0, r31
     f1a:	fa ec       	ldi	r31, 0xCA	; 202
     f1c:	ef 2e       	mov	r14, r31
     f1e:	f1 2c       	mov	r15, r1
     f20:	f0 2d       	mov	r31, r0
     f22:	09 ec       	ldi	r16, 0xC9	; 201
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	28 ec       	ldi	r18, 0xC8	; 200
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4c ec       	ldi	r20, 0xCC	; 204
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	6d ec       	ldi	r22, 0xCD	; 205
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	8f e3       	ldi	r24, 0x3F	; 63
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	0e 94 bd 40 	call	0x817a	; 0x817a <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
     f3a:	00 00       	nop
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	08 95       	ret

00000f56 <_GLOBAL__sub_I___vector_36>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	6f ef       	ldi	r22, 0xFF	; 255
     f60:	7f ef       	ldi	r23, 0xFF	; 255
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 6f 07 	call	0xede	; 0xede <_Z41__static_initialization_and_destruction_0ii>
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     f80:	0f 92       	push	r0
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
  Serial2._rx_complete_irq();
     fa2:	8c ed       	ldi	r24, 0xDC	; 220
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	0e 94 30 41 	call	0x8260	; 0x8260 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     faa:	00 00       	nop
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     fce:	0f 90       	pop	r0
     fd0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <__vector_52>:

ISR(USART2_UDRE_vect)
{
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     fe2:	0f 92       	push	r0
     fe4:	11 24       	eor	r1, r1
     fe6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     fea:	0f 92       	push	r0
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
  Serial2._tx_udr_empty_irq();
    100c:	8c ed       	ldi	r24, 0xDC	; 220
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1014:	00 00       	nop
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1038:	0f 90       	pop	r0
    103a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <_Z17Serial2_availablev>:

HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
  return Serial2.available();
    104c:	8c ed       	ldi	r24, 0xDC	; 220
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN14HardwareSerial9availableEv>
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	89 2b       	or	r24, r25
    1058:	09 f4       	brne	.+2      	; 0x105c <_Z17Serial2_availablev+0x18>
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	82 2f       	mov	r24, r18
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <_Z41__static_initialization_and_destruction_0ii>:
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <_Z41__static_initialization_and_destruction_0ii+0x12>
    1076:	1f 92       	push	r1
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	7c 83       	std	Y+4, r23	; 0x04
    1082:	6b 83       	std	Y+3, r22	; 0x03
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	d1 f4       	brne	.+52     	; 0x10c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	b1 f4       	brne	.+44     	; 0x10c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ISR(USART2_UDRE_vect)
{
  Serial2._tx_udr_empty_irq();
}

HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);
    1094:	0f 2e       	mov	r0, r31
    1096:	f6 ed       	ldi	r31, 0xD6	; 214
    1098:	cf 2e       	mov	r12, r31
    109a:	d1 2c       	mov	r13, r1
    109c:	f0 2d       	mov	r31, r0
    109e:	0f 2e       	mov	r0, r31
    10a0:	f2 ed       	ldi	r31, 0xD2	; 210
    10a2:	ef 2e       	mov	r14, r31
    10a4:	f1 2c       	mov	r15, r1
    10a6:	f0 2d       	mov	r31, r0
    10a8:	01 ed       	ldi	r16, 0xD1	; 209
    10aa:	10 e0       	ldi	r17, 0x00	; 0
    10ac:	20 ed       	ldi	r18, 0xD0	; 208
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	44 ed       	ldi	r20, 0xD4	; 212
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	65 ed       	ldi	r22, 0xD5	; 213
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	8c ed       	ldi	r24, 0xDC	; 220
    10ba:	94 e0       	ldi	r25, 0x04	; 4
    10bc:	0e 94 bd 40 	call	0x817a	; 0x817a <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    10c0:	00 00       	nop
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	08 95       	ret

000010dc <_GLOBAL__sub_I___vector_51>:
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	6f ef       	ldi	r22, 0xFF	; 255
    10e6:	7f ef       	ldi	r23, 0xFF	; 255
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 32 08 	call	0x1064	; 0x1064 <_Z41__static_initialization_and_destruction_0ii>
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1106:	0f 92       	push	r0
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
  Serial3._rx_complete_irq();
    1128:	89 e7       	ldi	r24, 0x79	; 121
    112a:	95 e0       	ldi	r25, 0x05	; 5
    112c:	0e 94 30 41 	call	0x8260	; 0x8260 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
    1130:	00 00       	nop
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1154:	0f 90       	pop	r0
    1156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    1170:	0f 92       	push	r0
    1172:	2f 93       	push	r18
    1174:	3f 93       	push	r19
    1176:	4f 93       	push	r20
    1178:	5f 93       	push	r21
    117a:	6f 93       	push	r22
    117c:	7f 93       	push	r23
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	ef 93       	push	r30
    1188:	ff 93       	push	r31
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
  Serial3._tx_udr_empty_irq();
    1192:	89 e7       	ldi	r24, 0x79	; 121
    1194:	95 e0       	ldi	r25, 0x05	; 5
    1196:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    119a:	00 00       	nop
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    11be:	0f 90       	pop	r0
    11c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <_Z17Serial3_availablev>:

HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
  return Serial3.available();
    11d2:	89 e7       	ldi	r24, 0x79	; 121
    11d4:	95 e0       	ldi	r25, 0x05	; 5
    11d6:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN14HardwareSerial9availableEv>
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	89 2b       	or	r24, r25
    11de:	09 f4       	brne	.+2      	; 0x11e2 <_Z17Serial3_availablev+0x18>
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	82 2f       	mov	r24, r18
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <_Z41__static_initialization_and_destruction_0ii>:
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <_Z41__static_initialization_and_destruction_0ii+0x12>
    11fc:	1f 92       	push	r1
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	7c 83       	std	Y+4, r23	; 0x04
    1208:	6b 83       	std	Y+3, r22	; 0x03
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	e1 f4       	brne	.+56     	; 0x124a <_Z41__static_initialization_and_destruction_0ii+0x60>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	c1 f4       	brne	.+48     	; 0x124a <_Z41__static_initialization_and_destruction_0ii+0x60>
ISR(USART3_UDRE_vect)
{
  Serial3._tx_udr_empty_irq();
}

HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);
    121a:	0f 2e       	mov	r0, r31
    121c:	f6 e3       	ldi	r31, 0x36	; 54
    121e:	cf 2e       	mov	r12, r31
    1220:	dd 24       	eor	r13, r13
    1222:	d3 94       	inc	r13
    1224:	f0 2d       	mov	r31, r0
    1226:	0f 2e       	mov	r0, r31
    1228:	f2 e3       	ldi	r31, 0x32	; 50
    122a:	ef 2e       	mov	r14, r31
    122c:	ff 24       	eor	r15, r15
    122e:	f3 94       	inc	r15
    1230:	f0 2d       	mov	r31, r0
    1232:	01 e3       	ldi	r16, 0x31	; 49
    1234:	11 e0       	ldi	r17, 0x01	; 1
    1236:	20 e3       	ldi	r18, 0x30	; 48
    1238:	31 e0       	ldi	r19, 0x01	; 1
    123a:	44 e3       	ldi	r20, 0x34	; 52
    123c:	51 e0       	ldi	r21, 0x01	; 1
    123e:	65 e3       	ldi	r22, 0x35	; 53
    1240:	71 e0       	ldi	r23, 0x01	; 1
    1242:	89 e7       	ldi	r24, 0x79	; 121
    1244:	95 e0       	ldi	r25, 0x05	; 5
    1246:	0e 94 bd 40 	call	0x817a	; 0x817a <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    124a:	00 00       	nop
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	08 95       	ret

00001266 <_GLOBAL__sub_I___vector_54>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	6f ef       	ldi	r22, 0xFF	; 255
    1270:	7f ef       	ldi	r23, 0xFF	; 255
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z41__static_initialization_and_destruction_0ii>
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	// Empty
}
    1288:	00 00       	nop
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <_ZN9IPAddressC1Ev>:
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	1f 92       	push	r1
    1296:	1f 92       	push	r1
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	0e 94 86 41 	call	0x830c	; 0x830c <_ZN9PrintableC1Ev>
    12a8:	2d e8       	ldi	r18, 0x8D	; 141
    12aa:	33 e0       	ldi	r19, 0x03	; 3
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	fc 01       	movw	r30, r24
    12b2:	31 83       	std	Z+1, r19	; 0x01
    12b4:	20 83       	st	Z, r18
{
    _address.dword = 0;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	fc 01       	movw	r30, r24
    12bc:	12 82       	std	Z+2, r1	; 0x02
    12be:	13 82       	std	Z+3, r1	; 0x03
    12c0:	14 82       	std	Z+4, r1	; 0x04
    12c2:	15 82       	std	Z+5, r1	; 0x05
}
    12c4:	00 00       	nop
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    12d0:	0f 93       	push	r16
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <_ZN9IPAddressC1Ehhhh+0x8>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <_ZN9IPAddressC1Ehhhh+0xa>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	6b 83       	std	Y+3, r22	; 0x03
    12e4:	4c 83       	std	Y+4, r20	; 0x04
    12e6:	2d 83       	std	Y+5, r18	; 0x05
    12e8:	0e 83       	std	Y+6, r16	; 0x06
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	0e 94 86 41 	call	0x830c	; 0x830c <_ZN9PrintableC1Ev>
    12f2:	2d e8       	ldi	r18, 0x8D	; 141
    12f4:	33 e0       	ldi	r19, 0x03	; 3
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	fc 01       	movw	r30, r24
    12fc:	31 83       	std	Z+1, r19	; 0x01
    12fe:	20 83       	st	Z, r18
{
    _address.bytes[0] = first_octet;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	fc 01       	movw	r30, r24
    1308:	22 83       	std	Z+2, r18	; 0x02
    _address.bytes[1] = second_octet;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	2c 81       	ldd	r18, Y+4	; 0x04
    1310:	fc 01       	movw	r30, r24
    1312:	23 83       	std	Z+3, r18	; 0x03
    _address.bytes[2] = third_octet;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	2d 81       	ldd	r18, Y+5	; 0x05
    131a:	fc 01       	movw	r30, r24
    131c:	24 83       	std	Z+4, r18	; 0x04
    _address.bytes[3] = fourth_octet;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	2e 81       	ldd	r18, Y+6	; 0x06
    1324:	fc 01       	movw	r30, r24
    1326:	25 83       	std	Z+5, r18	; 0x05
}
    1328:	00 00       	nop
    132a:	26 96       	adiw	r28, 0x06	; 6
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	0f 91       	pop	r16
    133c:	08 95       	ret

0000133e <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	00 d0       	rcall	.+0      	; 0x1344 <_ZN9IPAddressC1Em+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <_ZN9IPAddressC1Em+0x8>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	4b 83       	std	Y+3, r20	; 0x03
    1350:	5c 83       	std	Y+4, r21	; 0x04
    1352:	6d 83       	std	Y+5, r22	; 0x05
    1354:	7e 83       	std	Y+6, r23	; 0x06
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	0e 94 86 41 	call	0x830c	; 0x830c <_ZN9PrintableC1Ev>
    135e:	2d e8       	ldi	r18, 0x8D	; 141
    1360:	33 e0       	ldi	r19, 0x03	; 3
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	fc 01       	movw	r30, r24
    1368:	31 83       	std	Z+1, r19	; 0x01
    136a:	20 83       	st	Z, r18
{
    _address.dword = address;
    136c:	29 81       	ldd	r18, Y+1	; 0x01
    136e:	3a 81       	ldd	r19, Y+2	; 0x02
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	ad 81       	ldd	r26, Y+5	; 0x05
    1376:	be 81       	ldd	r27, Y+6	; 0x06
    1378:	f9 01       	movw	r30, r18
    137a:	82 83       	std	Z+2, r24	; 0x02
    137c:	93 83       	std	Z+3, r25	; 0x03
    137e:	a4 83       	std	Z+4, r26	; 0x04
    1380:	b5 83       	std	Z+5, r27	; 0x05
}
    1382:	00 00       	nop
    1384:	26 96       	adiw	r28, 0x06	; 6
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	00 d0       	rcall	.+0      	; 0x139c <_ZN9IPAddressC1EPKh+0x6>
    139c:	1f 92       	push	r1
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	7c 83       	std	Y+4, r23	; 0x04
    13a8:	6b 83       	std	Y+3, r22	; 0x03
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	0e 94 86 41 	call	0x830c	; 0x830c <_ZN9PrintableC1Ev>
    13b2:	2d e8       	ldi	r18, 0x8D	; 141
    13b4:	33 e0       	ldi	r19, 0x03	; 3
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	fc 01       	movw	r30, r24
    13bc:	31 83       	std	Z+1, r19	; 0x01
    13be:	20 83       	st	Z, r18
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	02 96       	adiw	r24, 0x02	; 2
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	44 e0       	ldi	r20, 0x04	; 4
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	b9 01       	movw	r22, r18
    13d0:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
}
    13d4:	00 00       	nop
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <_ZN9IPAddress10fromStringEPKc>:

bool IPAddress::fromString(const char *address)
{
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	28 97       	sbiw	r28, 0x08	; 8
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	78 87       	std	Y+8, r23	; 0x08
    13fe:	6f 83       	std	Y+7, r22	; 0x07
    uint16_t acc = 0; // Accumulator
    1400:	1a 82       	std	Y+2, r1	; 0x02
    1402:	19 82       	std	Y+1, r1	; 0x01
    uint8_t dots = 0;
    1404:	1b 82       	std	Y+3, r1	; 0x03

    while (*address)
    1406:	8f 81       	ldd	r24, Y+7	; 0x07
    1408:	98 85       	ldd	r25, Y+8	; 0x08
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	88 23       	and	r24, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <_ZN9IPAddress10fromStringEPKc+0x30>
    1412:	48 c0       	rjmp	.+144    	; 0x14a4 <_ZN9IPAddress10fromStringEPKc+0xc0>
    {
        char c = *address++;
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	98 85       	ldd	r25, Y+8	; 0x08
    1418:	9c 01       	movw	r18, r24
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	38 87       	std	Y+8, r19	; 0x08
    1420:	2f 83       	std	Y+7, r18	; 0x07
    1422:	fc 01       	movw	r30, r24
    1424:	80 81       	ld	r24, Z
    1426:	8c 83       	std	Y+4, r24	; 0x04
        if (c >= '0' && c <= '9')
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	80 33       	cpi	r24, 0x30	; 48
    142c:	fc f0       	brlt	.+62     	; 0x146c <_ZN9IPAddress10fromStringEPKc+0x88>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	8a 33       	cpi	r24, 0x3A	; 58
    1432:	e4 f4       	brge	.+56     	; 0x146c <_ZN9IPAddress10fromStringEPKc+0x88>
        {
            acc = acc * 10 + (c - '0');
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	9c 01       	movw	r18, r24
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	28 0f       	add	r18, r24
    1448:	39 1f       	adc	r19, r25
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	08 2e       	mov	r0, r24
    144e:	00 0c       	add	r0, r0
    1450:	99 0b       	sbc	r25, r25
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	c0 97       	sbiw	r24, 0x30	; 48
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
            if (acc > 255) {
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	8f 3f       	cpi	r24, 0xFF	; 255
    1462:	91 05       	cpc	r25, r1
    1464:	f1 f0       	breq	.+60     	; 0x14a2 <_ZN9IPAddress10fromStringEPKc+0xbe>
    1466:	e8 f0       	brcs	.+58     	; 0x14a2 <_ZN9IPAddress10fromStringEPKc+0xbe>
                // Value out of [0..255] range
                return false;
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	27 c0       	rjmp	.+78     	; 0x14ba <_ZN9IPAddress10fromStringEPKc+0xd6>
            }
        }
        else if (c == '.')
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	8e 32       	cpi	r24, 0x2E	; 46
    1470:	b1 f4       	brne	.+44     	; 0x149e <_ZN9IPAddress10fromStringEPKc+0xba>
        {
            if (dots == 3) {
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	11 f4       	brne	.+4      	; 0x147c <_ZN9IPAddress10fromStringEPKc+0x98>
                // Too much dots (there must be 3 dots)
                return false;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	1f c0       	rjmp	.+62     	; 0x14ba <_ZN9IPAddress10fromStringEPKc+0xd6>
            }
            _address.bytes[dots++] = acc;
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	98 0f       	add	r25, r24
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	49 81       	ldd	r20, Y+1	; 0x01
    148a:	2d 81       	ldd	r18, Y+5	; 0x05
    148c:	3e 81       	ldd	r19, Y+6	; 0x06
    148e:	82 0f       	add	r24, r18
    1490:	93 1f       	adc	r25, r19
    1492:	02 96       	adiw	r24, 0x02	; 2
    1494:	fc 01       	movw	r30, r24
    1496:	40 83       	st	Z, r20
            acc = 0;
    1498:	1a 82       	std	Y+2, r1	; 0x02
    149a:	19 82       	std	Y+1, r1	; 0x01
    149c:	b4 cf       	rjmp	.-152    	; 0x1406 <_ZN9IPAddress10fromStringEPKc+0x22>
        }
        else
        {
            // Invalid char
            return false;
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <_ZN9IPAddress10fromStringEPKc+0xd6>
bool IPAddress::fromString(const char *address)
{
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;

    while (*address)
    14a2:	b1 cf       	rjmp	.-158    	; 0x1406 <_ZN9IPAddress10fromStringEPKc+0x22>
            // Invalid char
            return false;
        }
    }

    if (dots != 3) {
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	11 f0       	breq	.+4      	; 0x14ae <_ZN9IPAddress10fromStringEPKc+0xca>
        // Too few dots (there must be 3 dots)
        return false;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <_ZN9IPAddress10fromStringEPKc+0xd6>
    }
    _address.bytes[3] = acc;
    14ae:	29 81       	ldd	r18, Y+1	; 0x01
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	fc 01       	movw	r30, r24
    14b6:	25 83       	std	Z+5, r18	; 0x05
    return true;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
}
    14ba:	28 96       	adiw	r28, 0x08	; 8
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <_ZN9IPAddressaSEPKh+0x6>
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	7c 83       	std	Y+4, r23	; 0x04
    14de:	6b 83       	std	Y+3, r22	; 0x03
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	02 96       	adiw	r24, 0x02	; 2
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	44 e0       	ldi	r20, 0x04	; 4
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	b9 01       	movw	r22, r18
    14f0:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
    return *this;
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	00 d0       	rcall	.+0      	; 0x150c <_ZN9IPAddressaSEm+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <_ZN9IPAddressaSEm+0x8>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	4b 83       	std	Y+3, r20	; 0x03
    1518:	5c 83       	std	Y+4, r21	; 0x04
    151a:	6d 83       	std	Y+5, r22	; 0x05
    151c:	7e 83       	std	Y+6, r23	; 0x06
    _address.dword = address;
    151e:	29 81       	ldd	r18, Y+1	; 0x01
    1520:	3a 81       	ldd	r19, Y+2	; 0x02
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	ad 81       	ldd	r26, Y+5	; 0x05
    1528:	be 81       	ldd	r27, Y+6	; 0x06
    152a:	f9 01       	movw	r30, r18
    152c:	82 83       	std	Z+2, r24	; 0x02
    152e:	93 83       	std	Z+3, r25	; 0x03
    1530:	a4 83       	std	Z+4, r26	; 0x04
    1532:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1538:	26 96       	adiw	r28, 0x06	; 6
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <_ZNK9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr) const
{
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	00 d0       	rcall	.+0      	; 0x1550 <_ZNK9IPAddresseqEPKh+0x6>
    1550:	1f 92       	push	r1
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	7c 83       	std	Y+4, r23	; 0x04
    155c:	6b 83       	std	Y+3, r22	; 0x03
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	9c 01       	movw	r18, r24
    1564:	2e 5f       	subi	r18, 0xFE	; 254
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	44 e0       	ldi	r20, 0x04	; 4
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	b9 01       	movw	r22, r18
    1572:	0e 94 c4 48 	call	0x9188	; 0x9188 <memcmp>
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	89 2b       	or	r24, r25
    157a:	09 f0       	breq	.+2      	; 0x157e <_ZNK9IPAddresseqEPKh+0x34>
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	82 2f       	mov	r24, r18
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <_ZNK9IPAddress7printToER5Print>:

size_t IPAddress::printTo(Print& p) const
{
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	28 97       	sbiw	r28, 0x08	; 8
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	78 87       	std	Y+8, r23	; 0x08
    15a8:	6f 83       	std	Y+7, r22	; 0x07
    size_t n = 0;
    15aa:	1a 82       	std	Y+2, r1	; 0x02
    15ac:	19 82       	std	Y+1, r1	; 0x01
    for (int i =0; i < 3; i++)
    15ae:	1c 82       	std	Y+4, r1	; 0x04
    15b0:	1b 82       	std	Y+3, r1	; 0x03
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	03 97       	sbiw	r24, 0x03	; 3
    15b8:	4c f5       	brge	.+82     	; 0x160c <_ZNK9IPAddress7printToER5Print+0x7e>
    {
        n += p.print(_address.bytes[i], DEC);
    15ba:	2d 81       	ldd	r18, Y+5	; 0x05
    15bc:	3e 81       	ldd	r19, Y+6	; 0x06
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	82 0f       	add	r24, r18
    15c4:	93 1f       	adc	r25, r19
    15c6:	02 96       	adiw	r24, 0x02	; 2
    15c8:	fc 01       	movw	r30, r24
    15ca:	20 81       	ld	r18, Z
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	98 85       	ldd	r25, Y+8	; 0x08
    15d0:	4a e0       	ldi	r20, 0x0A	; 10
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	62 2f       	mov	r22, r18
    15d6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN5Print5printEhi>
    15da:	9c 01       	movw	r18, r24
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	82 0f       	add	r24, r18
    15e2:	93 1f       	adc	r25, r19
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
        n += p.print('.');
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	98 85       	ldd	r25, Y+8	; 0x08
    15ec:	6e e2       	ldi	r22, 0x2E	; 46
    15ee:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN5Print5printEc>
    15f2:	9c 01       	movw	r18, r24
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
    160a:	d3 cf       	rjmp	.-90     	; 0x15b2 <_ZNK9IPAddress7printToER5Print+0x24>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	fc 01       	movw	r30, r24
    1612:	25 81       	ldd	r18, Z+5	; 0x05
    1614:	8f 81       	ldd	r24, Y+7	; 0x07
    1616:	98 85       	ldd	r25, Y+8	; 0x08
    1618:	4a e0       	ldi	r20, 0x0A	; 10
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	62 2f       	mov	r22, r18
    161e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN5Print5printEhi>
    1622:	9c 01       	movw	r18, r24
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    return n;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1634:	28 96       	adiw	r28, 0x08	; 8
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <_Z41__static_initialization_and_destruction_0ii>:
    1646:	0f 93       	push	r16
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	00 d0       	rcall	.+0      	; 0x164e <_Z41__static_initialization_and_destruction_0ii+0x8>
    164e:	1f 92       	push	r1
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	7c 83       	std	Y+4, r23	; 0x04
    165a:	6b 83       	std	Y+3, r22	; 0x03
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	61 f4       	brne	.+24     	; 0x167c <_Z41__static_initialization_and_destruction_0ii+0x36>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	41 f4       	brne	.+16     	; 0x167c <_Z41__static_initialization_and_destruction_0ii+0x36>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    166c:	00 e0       	ldi	r16, 0x00	; 0
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	86 e1       	ldi	r24, 0x16	; 22
    1676:	96 e0       	ldi	r25, 0x06	; 6
    1678:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN9IPAddressC1Ehhhh>
    167c:	00 00       	nop
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	0f 91       	pop	r16
    168c:	08 95       	ret

0000168e <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	6f ef       	ldi	r22, 0xFF	; 255
    1698:	7f ef       	ldi	r23, 0xFF	; 255
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 23 0b 	call	0x1646	; 0x1646 <_Z41__static_initialization_and_destruction_0ii>
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <atexit>:
*/

#include <Arduino.h>

// Declared weak in Arduino.h to allow user redefinitions.
int atexit(void (* /*func*/ )()) { return 0; }
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	1f 92       	push	r1
    16ae:	1f 92       	push	r1
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <initVariant>:

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	00 00       	nop
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <_Z8setupUSBv>:

void setupUSB() __attribute__((weak));
void setupUSB() { }
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	00 00       	nop
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <main>:

int main(void)
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	init();
    16ee:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <init>

	initVariant();
    16f2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    16f6:	0e 94 0b 40 	call	0x8016	; 0x8016 <setup>
    
	for (;;) {
		loop();
    16fa:	0e 94 1b 40 	call	0x8036	; 0x8036 <loop>
		if (serialEventRun) serialEventRun();
    16fe:	81 e6       	ldi	r24, 0x61	; 97
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	89 2b       	or	r24, r25
    1704:	d1 f3       	breq	.-12     	; 0x16fa <main+0x14>
    1706:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z14serialEventRunv>
	USBDevice.attach();
#endif
	
	setup();
    
	for (;;) {
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <main+0x14>

0000170c <_Znwj>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdlib.h>

void *operator new(size_t size) {
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	1f 92       	push	r1
    1712:	1f 92       	push	r1
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	89 83       	std	Y+1, r24	; 0x01
  return malloc(size);
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <malloc>
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <_Znaj>:

void *operator new[](size_t size) {
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	1f 92       	push	r1
    1734:	1f 92       	push	r1
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
  return malloc(size);
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <malloc>
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <_ZdlPv>:

void operator delete(void * ptr) {
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	1f 92       	push	r1
    1756:	1f 92       	push	r1
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
  free(ptr);
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <free>
}
    1768:	00 00       	nop
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <_ZdaPv>:

void operator delete[](void * ptr) {
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	1f 92       	push	r1
    177a:	1f 92       	push	r1
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
  free(ptr);
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <free>
}
    178c:	00 00       	nop
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	28 97       	sbiw	r28, 0x08	; 8
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	7e 83       	std	Y+6, r23	; 0x06
    17b2:	6d 83       	std	Y+5, r22	; 0x05
    17b4:	58 87       	std	Y+8, r21	; 0x08
    17b6:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = 0;
    17b8:	1a 82       	std	Y+2, r1	; 0x02
    17ba:	19 82       	std	Y+1, r1	; 0x01
  while (size--) {
    17bc:	8f 81       	ldd	r24, Y+7	; 0x07
    17be:	98 85       	ldd	r25, Y+8	; 0x08
    17c0:	9c 01       	movw	r18, r24
    17c2:	21 50       	subi	r18, 0x01	; 1
    17c4:	31 09       	sbc	r19, r1
    17c6:	38 87       	std	Y+8, r19	; 0x08
    17c8:	2f 83       	std	Y+7, r18	; 0x07
    17ca:	21 e0       	ldi	r18, 0x01	; 1
    17cc:	89 2b       	or	r24, r25
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <_ZN5Print5writeEPKhj+0x3a>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	22 23       	and	r18, r18
    17d4:	19 f1       	breq	.+70     	; 0x181c <_ZN5Print5writeEPKhj+0x84>
    if (write(*buffer++)) n++;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 81       	ld	r18, Z
    17e4:	31 81       	ldd	r19, Z+1	; 0x01
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	ac 01       	movw	r20, r24
    17ec:	4f 5f       	subi	r20, 0xFF	; 255
    17ee:	5f 4f       	sbci	r21, 0xFF	; 255
    17f0:	5e 83       	std	Y+6, r21	; 0x06
    17f2:	4d 83       	std	Y+5, r20	; 0x05
    17f4:	fc 01       	movw	r30, r24
    17f6:	40 81       	ld	r20, Z
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	64 2f       	mov	r22, r20
    17fe:	f9 01       	movw	r30, r18
    1800:	19 95       	eicall
    1802:	21 e0       	ldi	r18, 0x01	; 1
    1804:	89 2b       	or	r24, r25
    1806:	09 f4       	brne	.+2      	; 0x180a <_ZN5Print5writeEPKhj+0x72>
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	22 23       	and	r18, r18
    180c:	31 f0       	breq	.+12     	; 0x181a <_ZN5Print5writeEPKhj+0x82>
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1818:	d1 cf       	rjmp	.-94     	; 0x17bc <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    else break;
    181a:	00 00       	nop
  }
  return n;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1820:	28 96       	adiw	r28, 0x08	; 8
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	2c 97       	sbiw	r28, 0x0c	; 12
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	9a 87       	std	Y+10, r25	; 0x0a
    1848:	89 87       	std	Y+9, r24	; 0x09
    184a:	7c 87       	std	Y+12, r23	; 0x0c
    184c:	6b 87       	std	Y+11, r22	; 0x0b
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
  size_t n = 0;
    1856:	1c 82       	std	Y+4, r1	; 0x04
    1858:	1b 82       	std	Y+3, r1	; 0x03
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	9c 01       	movw	r18, r24
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	3a 83       	std	Y+2, r19	; 0x02
    1866:	29 83       	std	Y+1, r18	; 0x01
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	fc 01       	movw	r30, r24
    1872:	84 91       	lpm	r24, Z
    1874:	8f 83       	std	Y+7, r24	; 0x07
    1876:	8f 81       	ldd	r24, Y+7	; 0x07
    1878:	88 87       	std	Y+8, r24	; 0x08
    if (c == 0) break;
    187a:	88 85       	ldd	r24, Y+8	; 0x08
    187c:	88 23       	and	r24, r24
    187e:	c9 f0       	breq	.+50     	; 0x18b2 <_ZN5Print5printEPK19__FlashStringHelper+0x80>
    if (write(c)) n++;
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	fc 01       	movw	r30, r24
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	fc 01       	movw	r30, r24
    188c:	20 81       	ld	r18, Z
    188e:	31 81       	ldd	r19, Z+1	; 0x01
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	68 85       	ldd	r22, Y+8	; 0x08
    1896:	f9 01       	movw	r30, r18
    1898:	19 95       	eicall
    189a:	21 e0       	ldi	r18, 0x01	; 1
    189c:	89 2b       	or	r24, r25
    189e:	09 f4       	brne	.+2      	; 0x18a2 <_ZN5Print5printEPK19__FlashStringHelper+0x70>
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	22 23       	and	r18, r18
    18a4:	41 f0       	breq	.+16     	; 0x18b6 <_ZN5Print5printEPK19__FlashStringHelper+0x84>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    18b0:	d4 cf       	rjmp	.-88     	; 0x185a <_ZN5Print5printEPK19__FlashStringHelper+0x28>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    18b2:	00 00       	nop
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <_ZN5Print5printEPK19__FlashStringHelper+0x86>
    if (write(c)) n++;
    else break;
    18b6:	00 00       	nop
  }
  return n;
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
}
    18bc:	2c 96       	adiw	r28, 0x0c	; 12
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <_ZN5Print5printERK6String+0xa>
    18d8:	1f 92       	push	r1
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	7c 83       	std	Y+4, r23	; 0x04
    18e4:	6b 83       	std	Y+3, r22	; 0x03
  return write(s.c_str(), s.length());
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	0e 94 9b 41 	call	0x8336	; 0x8336 <_ZNK6String6lengthEv>
    18ee:	8c 01       	movw	r16, r24
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	0e 94 ad 41 	call	0x835a	; 0x835a <_ZNK6String5c_strEv>
    18f8:	9c 01       	movw	r18, r24
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	a8 01       	movw	r20, r16
    1900:	b9 01       	movw	r22, r18
    1902:	0e 94 f0 41 	call	0x83e0	; 0x83e0 <_ZN5Print5writeEPKcj>
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	00 d0       	rcall	.+0      	; 0x191e <_ZN5Print5printEPKc+0x6>
    191e:	1f 92       	push	r1
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	7c 83       	std	Y+4, r23	; 0x04
    192a:	6b 83       	std	Y+3, r22	; 0x03
  return write(str);
    192c:	2b 81       	ldd	r18, Y+3	; 0x03
    192e:	3c 81       	ldd	r19, Y+4	; 0x04
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	b9 01       	movw	r22, r18
    1936:	0e 94 bf 41 	call	0x837e	; 0x837e <_ZN5Print5writeEPKc>
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	00 d0       	rcall	.+0      	; 0x194e <_ZN5Print5printEc+0x6>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	6b 83       	std	Y+3, r22	; 0x03
  return write(c);
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	fc 01       	movw	r30, r24
    1964:	20 81       	ld	r18, Z
    1966:	31 81       	ldd	r19, Z+1	; 0x01
    1968:	4b 81       	ldd	r20, Y+3	; 0x03
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	64 2f       	mov	r22, r20
    1970:	f9 01       	movw	r30, r18
    1972:	19 95       	eicall
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	00 d0       	rcall	.+0      	; 0x1986 <_ZN5Print5printEhi+0x6>
    1986:	1f 92       	push	r1
    1988:	1f 92       	push	r1
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	6b 83       	std	Y+3, r22	; 0x03
    1994:	5d 83       	std	Y+5, r21	; 0x05
    1996:	4c 83       	std	Y+4, r20	; 0x04
  return print((unsigned long) b, base);
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e0       	ldi	r26, 0x00	; 0
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	ac 01       	movw	r20, r24
    19ac:	bd 01       	movw	r22, r26
    19ae:	cf 01       	movw	r24, r30
    19b0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print5printEmi>
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <_ZN5Print5printEii+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <_ZN5Print5printEii+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	7c 83       	std	Y+4, r23	; 0x04
    19d6:	6b 83       	std	Y+3, r22	; 0x03
    19d8:	5e 83       	std	Y+6, r21	; 0x06
    19da:	4d 83       	std	Y+5, r20	; 0x05
  return print((long) n, base);
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	09 2e       	mov	r0, r25
    19e2:	00 0c       	add	r0, r0
    19e4:	aa 0b       	sbc	r26, r26
    19e6:	bb 0b       	sbc	r27, r27
    19e8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ea:	3e 81       	ldd	r19, Y+6	; 0x06
    19ec:	e9 81       	ldd	r30, Y+1	; 0x01
    19ee:	fa 81       	ldd	r31, Y+2	; 0x02
    19f0:	ac 01       	movw	r20, r24
    19f2:	bd 01       	movw	r22, r26
    19f4:	cf 01       	movw	r24, r30
    19f6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5Print5printEli>
}
    19fa:	26 96       	adiw	r28, 0x06	; 6
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <_ZN5Print5printEji>:

size_t Print::print(unsigned int n, int base)
{
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <_ZN5Print5printEji+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <_ZN5Print5printEji+0x8>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	7c 83       	std	Y+4, r23	; 0x04
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
    1a20:	5e 83       	std	Y+6, r21	; 0x06
    1a22:	4d 83       	std	Y+5, r20	; 0x05
  return print((unsigned long) n, base);
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	cc 01       	movw	r24, r24
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a30:	3e 81       	ldd	r19, Y+6	; 0x06
    1a32:	e9 81       	ldd	r30, Y+1	; 0x01
    1a34:	fa 81       	ldd	r31, Y+2	; 0x02
    1a36:	ac 01       	movw	r20, r24
    1a38:	bd 01       	movw	r22, r26
    1a3a:	cf 01       	movw	r24, r30
    1a3c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print5printEmi>
}
    1a40:	26 96       	adiw	r28, 0x06	; 6
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <_ZN5Print5printEli>:

size_t Print::print(long n, int base)
{
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	2a 97       	sbiw	r28, 0x0a	; 10
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	4d 83       	std	Y+5, r20	; 0x05
    1a6c:	5e 83       	std	Y+6, r21	; 0x06
    1a6e:	6f 83       	std	Y+7, r22	; 0x07
    1a70:	78 87       	std	Y+8, r23	; 0x08
    1a72:	3a 87       	std	Y+10, r19	; 0x0a
    1a74:	29 87       	std	Y+9, r18	; 0x09
  if (base == 0) {
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	89 2b       	or	r24, r25
    1a7c:	79 f4       	brne	.+30     	; 0x1a9c <_ZN5Print5printEli+0x4a>
    return write(n);
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	fc 01       	movw	r30, r24
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 81       	ld	r18, Z
    1a8c:	31 81       	ldd	r19, Z+1	; 0x01
    1a8e:	4d 81       	ldd	r20, Y+5	; 0x05
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	64 2f       	mov	r22, r20
    1a96:	f9 01       	movw	r30, r18
    1a98:	19 95       	eicall
    1a9a:	4b c0       	rjmp	.+150    	; 0x1b32 <_ZN5Print5printEli+0xe0>
  } else if (base == 10) {
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	0a 97       	sbiw	r24, 0x0a	; 10
    1aa2:	d9 f5       	brne	.+118    	; 0x1b1a <_ZN5Print5printEli+0xc8>
    if (n < 0) {
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	af 81       	ldd	r26, Y+7	; 0x07
    1aaa:	b8 85       	ldd	r27, Y+8	; 0x08
    1aac:	bb 23       	and	r27, r27
    1aae:	44 f5       	brge	.+80     	; 0x1b00 <_ZN5Print5printEli+0xae>
      int t = print('-');
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	6d e2       	ldi	r22, 0x2D	; 45
    1ab6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN5Print5printEc>
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
      n = -n;
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	af 81       	ldd	r26, Y+7	; 0x07
    1ac4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ac6:	b0 95       	com	r27
    1ac8:	a0 95       	com	r26
    1aca:	90 95       	com	r25
    1acc:	81 95       	neg	r24
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	af 4f       	sbci	r26, 0xFF	; 255
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	af 83       	std	Y+7, r26	; 0x07
    1ada:	b8 87       	std	Y+8, r27	; 0x08
      return printNumber(n, 10) + t;
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	af 81       	ldd	r26, Y+7	; 0x07
    1ae2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae8:	2a e0       	ldi	r18, 0x0A	; 10
    1aea:	ac 01       	movw	r20, r24
    1aec:	bd 01       	movw	r22, r26
    1aee:	cf 01       	movw	r24, r30
    1af0:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN5Print11printNumberEmh>
    1af4:	9c 01       	movw	r18, r24
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	82 0f       	add	r24, r18
    1afc:	93 1f       	adc	r25, r19
    1afe:	19 c0       	rjmp	.+50     	; 0x1b32 <_ZN5Print5printEli+0xe0>
    }
    return printNumber(n, 10);
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	af 81       	ldd	r26, Y+7	; 0x07
    1b06:	b8 85       	ldd	r27, Y+8	; 0x08
    1b08:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0c:	2a e0       	ldi	r18, 0x0A	; 10
    1b0e:	ac 01       	movw	r20, r24
    1b10:	bd 01       	movw	r22, r26
    1b12:	cf 01       	movw	r24, r30
    1b14:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN5Print11printNumberEmh>
    1b18:	0c c0       	rjmp	.+24     	; 0x1b32 <_ZN5Print5printEli+0xe0>
  } else {
    return printNumber(n, base);
    1b1a:	29 85       	ldd	r18, Y+9	; 0x09
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	af 81       	ldd	r26, Y+7	; 0x07
    1b22:	b8 85       	ldd	r27, Y+8	; 0x08
    1b24:	eb 81       	ldd	r30, Y+3	; 0x03
    1b26:	fc 81       	ldd	r31, Y+4	; 0x04
    1b28:	ac 01       	movw	r20, r24
    1b2a:	bd 01       	movw	r22, r26
    1b2c:	cf 01       	movw	r24, r30
    1b2e:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN5Print11printNumberEmh>
  }
}
    1b32:	2a 96       	adiw	r28, 0x0a	; 10
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	28 97       	sbiw	r28, 0x08	; 8
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	4b 83       	std	Y+3, r20	; 0x03
    1b5e:	5c 83       	std	Y+4, r21	; 0x04
    1b60:	6d 83       	std	Y+5, r22	; 0x05
    1b62:	7e 83       	std	Y+6, r23	; 0x06
    1b64:	38 87       	std	Y+8, r19	; 0x08
    1b66:	2f 83       	std	Y+7, r18	; 0x07
  if (base == 0) return write(n);
    1b68:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6a:	98 85       	ldd	r25, Y+8	; 0x08
    1b6c:	89 2b       	or	r24, r25
    1b6e:	79 f4       	brne	.+30     	; 0x1b8e <_ZN5Print5printEmi+0x4a>
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	20 81       	ld	r18, Z
    1b7e:	31 81       	ldd	r19, Z+1	; 0x01
    1b80:	4b 81       	ldd	r20, Y+3	; 0x03
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	64 2f       	mov	r22, r20
    1b88:	f9 01       	movw	r30, r18
    1b8a:	19 95       	eicall
    1b8c:	0c c0       	rjmp	.+24     	; 0x1ba6 <_ZN5Print5printEmi+0x62>
  else return printNumber(n, base);
    1b8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	ad 81       	ldd	r26, Y+5	; 0x05
    1b96:	be 81       	ldd	r27, Y+6	; 0x06
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	bd 01       	movw	r22, r26
    1ba0:	cf 01       	movw	r24, r30
    1ba2:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN5Print11printNumberEmh>
}
    1ba6:	28 96       	adiw	r28, 0x08	; 8
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	28 97       	sbiw	r28, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	4b 83       	std	Y+3, r20	; 0x03
    1bd2:	5c 83       	std	Y+4, r21	; 0x04
    1bd4:	6d 83       	std	Y+5, r22	; 0x05
    1bd6:	7e 83       	std	Y+6, r23	; 0x06
    1bd8:	38 87       	std	Y+8, r19	; 0x08
    1bda:	2f 83       	std	Y+7, r18	; 0x07
  return printFloat(n, digits);
    1bdc:	2f 81       	ldd	r18, Y+7	; 0x07
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	ad 81       	ldd	r26, Y+5	; 0x05
    1be4:	be 81       	ldd	r27, Y+6	; 0x06
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	ac 01       	movw	r20, r24
    1bec:	bd 01       	movw	r22, r26
    1bee:	cf 01       	movw	r24, r30
    1bf0:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN5Print10printFloatEdh>
}
    1bf4:	28 96       	adiw	r28, 0x08	; 8
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <_ZN5Print7printlnEPK19__FlashStringHelper>:

size_t Print::println(const __FlashStringHelper *ifsh)
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	7e 83       	std	Y+6, r23	; 0x06
    1c18:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(ifsh);
    1c1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	b9 01       	movw	r22, r18
    1c24:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN5Print5printEPK19__FlashStringHelper>
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1c34:	9c 01       	movw	r18, r24
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	82 0f       	add	r24, r18
    1c3c:	93 1f       	adc	r25, r19
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c46:	26 96       	adiw	r28, 0x06	; 6
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <_ZN5Print5printERK9Printable>:

size_t Print::print(const Printable& x)
{
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <_ZN5Print5printERK9Printable+0x6>
    1c5e:	1f 92       	push	r1
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	7c 83       	std	Y+4, r23	; 0x04
    1c6a:	6b 83       	std	Y+3, r22	; 0x03
  return x.printTo(*this);
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 81       	ld	r18, Z
    1c7a:	31 81       	ldd	r19, Z+1	; 0x01
    1c7c:	49 81       	ldd	r20, Y+1	; 0x01
    1c7e:	5a 81       	ldd	r21, Y+2	; 0x02
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	ba 01       	movw	r22, r20
    1c86:	f9 01       	movw	r30, r18
    1c88:	19 95       	eicall
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	1f 92       	push	r1
    1c9e:	1f 92       	push	r1
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
  return write("\r\n");
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	68 ea       	ldi	r22, 0xA8	; 168
    1cae:	72 e0       	ldi	r23, 0x02	; 2
    1cb0:	0e 94 bf 41 	call	0x837e	; 0x837e <_ZN5Print5writeEPKc>
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

00001cbe <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <_ZN5Print7printlnERK6String+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <_ZN5Print7printlnERK6String+0x8>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	7e 83       	std	Y+6, r23	; 0x06
    1cd0:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(s);
    1cd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	b9 01       	movw	r22, r18
    1cdc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZN5Print5printERK6String>
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1cec:	9c 01       	movw	r18, r24
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	82 0f       	add	r24, r18
    1cf4:	93 1f       	adc	r25, r19
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1cfe:	26 96       	adiw	r28, 0x06	; 6
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <_ZN5Print7printlnEPKc+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <_ZN5Print7printlnEPKc+0x8>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    1d20:	7e 83       	std	Y+6, r23	; 0x06
    1d22:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(c);
    1d24:	2d 81       	ldd	r18, Y+5	; 0x05
    1d26:	3e 81       	ldd	r19, Y+6	; 0x06
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZN5Print5printEPKc>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1d3e:	9c 01       	movw	r18, r24
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	82 0f       	add	r24, r18
    1d46:	93 1f       	adc	r25, r19
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d50:	26 96       	adiw	r28, 0x06	; 6
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	08 95       	ret

00001d62 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <_ZN5Print7printlnEc+0x6>
    1d68:	1f 92       	push	r1
    1d6a:	1f 92       	push	r1
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(c);
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d7c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN5Print5printEc>
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	82 0f       	add	r24, r18
    1d94:	93 1f       	adc	r25, r19
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <_ZN5Print7printlnEhi>:

size_t Print::println(unsigned char b, int base)
{
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	27 97       	sbiw	r28, 0x07	; 7
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	9c 83       	std	Y+4, r25	; 0x04
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	6d 83       	std	Y+5, r22	; 0x05
    1dc8:	5f 83       	std	Y+7, r21	; 0x07
    1dca:	4e 83       	std	Y+6, r20	; 0x06
  size_t n = print(b, base);
    1dcc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dce:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1dd8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN5Print5printEhi>
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1de8:	9c 01       	movw	r18, r24
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1dfa:	27 96       	adiw	r28, 0x07	; 7
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <_ZN5Print7printlnEii>:

size_t Print::println(int num, int base)
{
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	28 97       	sbiw	r28, 0x08	; 8
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	7e 83       	std	Y+6, r23	; 0x06
    1e26:	6d 83       	std	Y+5, r22	; 0x05
    1e28:	58 87       	std	Y+8, r21	; 0x08
    1e2a:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = print(num, base);
    1e2c:	4f 81       	ldd	r20, Y+7	; 0x07
    1e2e:	58 85       	ldd	r21, Y+8	; 0x08
    1e30:	2d 81       	ldd	r18, Y+5	; 0x05
    1e32:	3e 81       	ldd	r19, Y+6	; 0x06
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	b9 01       	movw	r22, r18
    1e3a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN5Print5printEii>
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1e4a:	9c 01       	movw	r18, r24
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e5c:	28 96       	adiw	r28, 0x08	; 8
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <_ZN5Print7printlnEji>:

size_t Print::println(unsigned int num, int base)
{
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	28 97       	sbiw	r28, 0x08	; 8
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	7e 83       	std	Y+6, r23	; 0x06
    1e88:	6d 83       	std	Y+5, r22	; 0x05
    1e8a:	58 87       	std	Y+8, r21	; 0x08
    1e8c:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = print(num, base);
    1e8e:	4f 81       	ldd	r20, Y+7	; 0x07
    1e90:	58 85       	ldd	r21, Y+8	; 0x08
    1e92:	2d 81       	ldd	r18, Y+5	; 0x05
    1e94:	3e 81       	ldd	r19, Y+6	; 0x06
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_ZN5Print5printEji>
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1eac:	9c 01       	movw	r18, r24
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ebe:	28 96       	adiw	r28, 0x08	; 8
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	08 95       	ret

00001ed0 <_ZN5Print7printlnEli>:

size_t Print::println(long num, int base)
{
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	2a 97       	sbiw	r28, 0x0a	; 10
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
    1ee8:	4d 83       	std	Y+5, r20	; 0x05
    1eea:	5e 83       	std	Y+6, r21	; 0x06
    1eec:	6f 83       	std	Y+7, r22	; 0x07
    1eee:	78 87       	std	Y+8, r23	; 0x08
    1ef0:	3a 87       	std	Y+10, r19	; 0x0a
    1ef2:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, base);
    1ef4:	29 85       	ldd	r18, Y+9	; 0x09
    1ef6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	af 81       	ldd	r26, Y+7	; 0x07
    1efe:	b8 85       	ldd	r27, Y+8	; 0x08
    1f00:	eb 81       	ldd	r30, Y+3	; 0x03
    1f02:	fc 81       	ldd	r31, Y+4	; 0x04
    1f04:	ac 01       	movw	r20, r24
    1f06:	bd 01       	movw	r22, r26
    1f08:	cf 01       	movw	r24, r30
    1f0a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5Print5printEli>
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	82 0f       	add	r24, r18
    1f22:	93 1f       	adc	r25, r19
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f2c:	2a 96       	adiw	r28, 0x0a	; 10
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	08 95       	ret

00001f3e <_ZN5Print7printlnEmi>:

size_t Print::println(unsigned long num, int base)
{
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	2a 97       	sbiw	r28, 0x0a	; 10
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	9c 83       	std	Y+4, r25	; 0x04
    1f54:	8b 83       	std	Y+3, r24	; 0x03
    1f56:	4d 83       	std	Y+5, r20	; 0x05
    1f58:	5e 83       	std	Y+6, r21	; 0x06
    1f5a:	6f 83       	std	Y+7, r22	; 0x07
    1f5c:	78 87       	std	Y+8, r23	; 0x08
    1f5e:	3a 87       	std	Y+10, r19	; 0x0a
    1f60:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, base);
    1f62:	29 85       	ldd	r18, Y+9	; 0x09
    1f64:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	af 81       	ldd	r26, Y+7	; 0x07
    1f6c:	b8 85       	ldd	r27, Y+8	; 0x08
    1f6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f70:	fc 81       	ldd	r31, Y+4	; 0x04
    1f72:	ac 01       	movw	r20, r24
    1f74:	bd 01       	movw	r22, r26
    1f76:	cf 01       	movw	r24, r30
    1f78:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print5printEmi>
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1f88:	9c 01       	movw	r18, r24
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	82 0f       	add	r24, r18
    1f90:	93 1f       	adc	r25, r19
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
  return n;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f9a:	2a 96       	adiw	r28, 0x0a	; 10
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	08 95       	ret

00001fac <_ZN5Print7printlnEdi>:

size_t Print::println(double num, int digits)
{
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	2a 97       	sbiw	r28, 0x0a	; 10
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
    1fc4:	4d 83       	std	Y+5, r20	; 0x05
    1fc6:	5e 83       	std	Y+6, r21	; 0x06
    1fc8:	6f 83       	std	Y+7, r22	; 0x07
    1fca:	78 87       	std	Y+8, r23	; 0x08
    1fcc:	3a 87       	std	Y+10, r19	; 0x0a
    1fce:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, digits);
    1fd0:	29 85       	ldd	r18, Y+9	; 0x09
    1fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd8:	af 81       	ldd	r26, Y+7	; 0x07
    1fda:	b8 85       	ldd	r27, Y+8	; 0x08
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	bd 01       	movw	r22, r26
    1fe4:	cf 01       	movw	r24, r30
    1fe6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN5Print5printEdi>
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
  return n;
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2008:	2a 96       	adiw	r28, 0x0a	; 10
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <_ZN5Print7printlnERK9Printable>:

size_t Print::println(const Printable& x)
{
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <_ZN5Print7printlnERK9Printable+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <_ZN5Print7printlnERK9Printable+0x8>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	7e 83       	std	Y+6, r23	; 0x06
    202c:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(x);
    202e:	2d 81       	ldd	r18, Y+5	; 0x05
    2030:	3e 81       	ldd	r19, Y+6	; 0x06
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	b9 01       	movw	r22, r18
    2038:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN5Print5printERK9Printable>
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN5Print7printlnEv>
    2048:	9c 01       	movw	r18, r24
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
  return n;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
}
    205a:	26 96       	adiw	r28, 0x06	; 6
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	ab 97       	sbiw	r28, 0x2b	; 43
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	9e a3       	std	Y+38, r25	; 0x26
    2082:	8d a3       	std	Y+37, r24	; 0x25
    2084:	4f a3       	std	Y+39, r20	; 0x27
    2086:	58 a7       	std	Y+40, r21	; 0x28
    2088:	69 a7       	std	Y+41, r22	; 0x29
    208a:	7a a7       	std	Y+42, r23	; 0x2a
    208c:	2b a7       	std	Y+43, r18	; 0x2b
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    208e:	80 e2       	ldi	r24, 0x20	; 32
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9e 01       	movw	r18, r28
    2094:	2c 5f       	subi	r18, 0xFC	; 252
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	82 0f       	add	r24, r18
    209a:	93 1f       	adc	r25, r19
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	fc 01       	movw	r30, r24
    20a6:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    20a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <_ZN5Print11printNumberEmh+0x46>
    20ae:	8a e0       	ldi	r24, 0x0A	; 10
    20b0:	8b a7       	std	Y+43, r24	; 0x2b

  do {
    char c = n % base;
    20b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	8f a1       	ldd	r24, Y+39	; 0x27
    20be:	98 a5       	ldd	r25, Y+40	; 0x28
    20c0:	a9 a5       	ldd	r26, Y+41	; 0x29
    20c2:	ba a5       	ldd	r27, Y+42	; 0x2a
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    n /= base;
    20d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	8f a1       	ldd	r24, Y+39	; 0x27
    20de:	98 a5       	ldd	r25, Y+40	; 0x28
    20e0:	a9 a5       	ldd	r26, Y+41	; 0x29
    20e2:	ba a5       	ldd	r27, Y+42	; 0x2a
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    20ec:	da 01       	movw	r26, r20
    20ee:	c9 01       	movw	r24, r18
    20f0:	8f a3       	std	Y+39, r24	; 0x27
    20f2:	98 a7       	std	Y+40, r25	; 0x28
    20f4:	a9 a7       	std	Y+41, r26	; 0x29
    20f6:	ba a7       	std	Y+42, r27	; 0x2a

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	8a 30       	cpi	r24, 0x0A	; 10
    2106:	24 f4       	brge	.+8      	; 0x2110 <_ZN5Print11printNumberEmh+0xa4>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	80 5d       	subi	r24, 0xD0	; 208
    210c:	28 2f       	mov	r18, r24
    210e:	03 c0       	rjmp	.+6      	; 0x2116 <_ZN5Print11printNumberEmh+0xaa>
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	89 5c       	subi	r24, 0xC9	; 201
    2114:	28 2f       	mov	r18, r24
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    211e:	8f a1       	ldd	r24, Y+39	; 0x27
    2120:	98 a5       	ldd	r25, Y+40	; 0x28
    2122:	a9 a5       	ldd	r26, Y+41	; 0x29
    2124:	ba a5       	ldd	r27, Y+42	; 0x2a
    2126:	89 2b       	or	r24, r25
    2128:	8a 2b       	or	r24, r26
    212a:	8b 2b       	or	r24, r27
    212c:	09 f0       	breq	.+2      	; 0x2130 <_ZN5Print11printNumberEmh+0xc4>
    212e:	c1 cf       	rjmp	.-126    	; 0x20b2 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    2130:	29 81       	ldd	r18, Y+1	; 0x01
    2132:	3a 81       	ldd	r19, Y+2	; 0x02
    2134:	8d a1       	ldd	r24, Y+37	; 0x25
    2136:	9e a1       	ldd	r25, Y+38	; 0x26
    2138:	b9 01       	movw	r22, r18
    213a:	0e 94 bf 41 	call	0x837e	; 0x837e <_ZN5Print5writeEPKc>
}
    213e:	ab 96       	adiw	r28, 0x2b	; 43
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	08 95       	ret

00002150 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	68 97       	sbiw	r28, 0x18	; 24
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	9b 8b       	std	Y+19, r25	; 0x13
    2170:	8a 8b       	std	Y+18, r24	; 0x12
    2172:	4c 8b       	std	Y+20, r20	; 0x14
    2174:	5d 8b       	std	Y+21, r21	; 0x15
    2176:	6e 8b       	std	Y+22, r22	; 0x16
    2178:	7f 8b       	std	Y+23, r23	; 0x17
    217a:	28 8f       	std	Y+24, r18	; 0x18
  size_t n = 0;
    217c:	1a 82       	std	Y+2, r1	; 0x02
    217e:	19 82       	std	Y+1, r1	; 0x01
  
  if (isnan(number)) return print("nan");
    2180:	2c 89       	ldd	r18, Y+20	; 0x14
    2182:	3d 89       	ldd	r19, Y+21	; 0x15
    2184:	4e 89       	ldd	r20, Y+22	; 0x16
    2186:	5f 89       	ldd	r21, Y+23	; 0x17
    2188:	6c 89       	ldd	r22, Y+20	; 0x14
    218a:	7d 89       	ldd	r23, Y+21	; 0x15
    218c:	8e 89       	ldd	r24, Y+22	; 0x16
    218e:	9f 89       	ldd	r25, Y+23	; 0x17
    2190:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <__unordsf2>
    2194:	88 23       	and	r24, r24
    2196:	39 f0       	breq	.+14     	; 0x21a6 <_ZN5Print10printFloatEdh+0x56>
    2198:	8a 89       	ldd	r24, Y+18	; 0x12
    219a:	9b 89       	ldd	r25, Y+19	; 0x13
    219c:	6b ea       	ldi	r22, 0xAB	; 171
    219e:	72 e0       	ldi	r23, 0x02	; 2
    21a0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZN5Print5printEPKc>
    21a4:	36 c1       	rjmp	.+620    	; 0x2412 <__stack+0x213>
  if (isinf(number)) return print("inf");
    21a6:	8c 89       	ldd	r24, Y+20	; 0x14
    21a8:	9d 89       	ldd	r25, Y+21	; 0x15
    21aa:	ae 89       	ldd	r26, Y+22	; 0x16
    21ac:	bf 89       	ldd	r27, Y+23	; 0x17
    21ae:	6c 01       	movw	r12, r24
    21b0:	7d 01       	movw	r14, r26
    21b2:	e8 94       	clt
    21b4:	f7 f8       	bld	r15, 7
    21b6:	11 e0       	ldi	r17, 0x01	; 1
    21b8:	2f ef       	ldi	r18, 0xFF	; 255
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	5f e7       	ldi	r21, 0x7F	; 127
    21c0:	c7 01       	movw	r24, r14
    21c2:	b6 01       	movw	r22, r12
    21c4:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <__unordsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	59 f4       	brne	.+22     	; 0x21e2 <_ZN5Print10printFloatEdh+0x92>
    21cc:	2f ef       	ldi	r18, 0xFF	; 255
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	5f e7       	ldi	r21, 0x7F	; 127
    21d4:	c7 01       	movw	r24, r14
    21d6:	b6 01       	movw	r22, r12
    21d8:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <__cmpsf2>
    21dc:	18 16       	cp	r1, r24
    21de:	0c f4       	brge	.+2      	; 0x21e2 <_ZN5Print10printFloatEdh+0x92>
    21e0:	10 e0       	ldi	r17, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	81 27       	eor	r24, r17
    21e6:	88 23       	and	r24, r24
    21e8:	39 f0       	breq	.+14     	; 0x21f8 <_ZN5Print10printFloatEdh+0xa8>
    21ea:	8a 89       	ldd	r24, Y+18	; 0x12
    21ec:	9b 89       	ldd	r25, Y+19	; 0x13
    21ee:	6f ea       	ldi	r22, 0xAF	; 175
    21f0:	72 e0       	ldi	r23, 0x02	; 2
    21f2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZN5Print5printEPKc>
    21f6:	0d c1       	rjmp	.+538    	; 0x2412 <__stack+0x213>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    21f8:	2f ef       	ldi	r18, 0xFF	; 255
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	5f e4       	ldi	r21, 0x4F	; 79
    2200:	6c 89       	ldd	r22, Y+20	; 0x14
    2202:	7d 89       	ldd	r23, Y+21	; 0x15
    2204:	8e 89       	ldd	r24, Y+22	; 0x16
    2206:	9f 89       	ldd	r25, Y+23	; 0x17
    2208:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <__gesf2>
    220c:	18 16       	cp	r1, r24
    220e:	3c f4       	brge	.+14     	; 0x221e <__stack+0x1f>
    2210:	8a 89       	ldd	r24, Y+18	; 0x12
    2212:	9b 89       	ldd	r25, Y+19	; 0x13
    2214:	63 eb       	ldi	r22, 0xB3	; 179
    2216:	72 e0       	ldi	r23, 0x02	; 2
    2218:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZN5Print5printEPKc>
    221c:	fa c0       	rjmp	.+500    	; 0x2412 <__stack+0x213>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    221e:	2f ef       	ldi	r18, 0xFF	; 255
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	5f ec       	ldi	r21, 0xCF	; 207
    2226:	6c 89       	ldd	r22, Y+20	; 0x14
    2228:	7d 89       	ldd	r23, Y+21	; 0x15
    222a:	8e 89       	ldd	r24, Y+22	; 0x16
    222c:	9f 89       	ldd	r25, Y+23	; 0x17
    222e:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <__cmpsf2>
    2232:	88 23       	and	r24, r24
    2234:	3c f4       	brge	.+14     	; 0x2244 <__stack+0x45>
    2236:	8a 89       	ldd	r24, Y+18	; 0x12
    2238:	9b 89       	ldd	r25, Y+19	; 0x13
    223a:	63 eb       	ldi	r22, 0xB3	; 179
    223c:	72 e0       	ldi	r23, 0x02	; 2
    223e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZN5Print5printEPKc>
    2242:	e7 c0       	rjmp	.+462    	; 0x2412 <__stack+0x213>
  
  // Handle negative numbers
  if (number < 0.0)
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	a9 01       	movw	r20, r18
    224a:	6c 89       	ldd	r22, Y+20	; 0x14
    224c:	7d 89       	ldd	r23, Y+21	; 0x15
    224e:	8e 89       	ldd	r24, Y+22	; 0x16
    2250:	9f 89       	ldd	r25, Y+23	; 0x17
    2252:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <__cmpsf2>
    2256:	88 23       	and	r24, r24
    2258:	ac f4       	brge	.+42     	; 0x2284 <__stack+0x85>
  {
     n += print('-');
    225a:	8a 89       	ldd	r24, Y+18	; 0x12
    225c:	9b 89       	ldd	r25, Y+19	; 0x13
    225e:	6d e2       	ldi	r22, 0x2D	; 45
    2260:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN5Print5printEc>
    2264:	9c 01       	movw	r18, r24
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	82 0f       	add	r24, r18
    226c:	93 1f       	adc	r25, r19
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
     number = -number;
    2272:	8c 89       	ldd	r24, Y+20	; 0x14
    2274:	9d 89       	ldd	r25, Y+21	; 0x15
    2276:	ae 89       	ldd	r26, Y+22	; 0x16
    2278:	bf 89       	ldd	r27, Y+23	; 0x17
    227a:	b0 58       	subi	r27, 0x80	; 128
    227c:	8c 8b       	std	Y+20, r24	; 0x14
    227e:	9d 8b       	std	Y+21, r25	; 0x15
    2280:	ae 8b       	std	Y+22, r26	; 0x16
    2282:	bf 8b       	std	Y+23, r27	; 0x17
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	bf e3       	ldi	r27, 0x3F	; 63
    228c:	8b 83       	std	Y+3, r24	; 0x03
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	ad 83       	std	Y+5, r26	; 0x05
    2292:	be 83       	std	Y+6, r27	; 0x06
  for (uint8_t i=0; i<digits; ++i)
    2294:	1f 82       	std	Y+7, r1	; 0x07
    2296:	9f 81       	ldd	r25, Y+7	; 0x07
    2298:	88 8d       	ldd	r24, Y+24	; 0x18
    229a:	98 17       	cp	r25, r24
    229c:	a0 f4       	brcc	.+40     	; 0x22c6 <__stack+0xc7>
    rounding /= 10.0;
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	6b 81       	ldd	r22, Y+3	; 0x03
    22a8:	7c 81       	ldd	r23, Y+4	; 0x04
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__divsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	ad 83       	std	Y+5, r26	; 0x05
    22bc:	be 83       	std	Y+6, r27	; 0x06
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    22be:	8f 81       	ldd	r24, Y+7	; 0x07
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	8f 83       	std	Y+7, r24	; 0x07
    22c4:	e8 cf       	rjmp	.-48     	; 0x2296 <__stack+0x97>
    rounding /= 10.0;
  
  number += rounding;
    22c6:	2b 81       	ldd	r18, Y+3	; 0x03
    22c8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ca:	4d 81       	ldd	r20, Y+5	; 0x05
    22cc:	5e 81       	ldd	r21, Y+6	; 0x06
    22ce:	6c 89       	ldd	r22, Y+20	; 0x14
    22d0:	7d 89       	ldd	r23, Y+21	; 0x15
    22d2:	8e 89       	ldd	r24, Y+22	; 0x16
    22d4:	9f 89       	ldd	r25, Y+23	; 0x17
    22d6:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__addsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8c 8b       	std	Y+20, r24	; 0x14
    22e0:	9d 8b       	std	Y+21, r25	; 0x15
    22e2:	ae 8b       	std	Y+22, r26	; 0x16
    22e4:	bf 8b       	std	Y+23, r27	; 0x17

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    22e6:	6c 89       	ldd	r22, Y+20	; 0x14
    22e8:	7d 89       	ldd	r23, Y+21	; 0x15
    22ea:	8e 89       	ldd	r24, Y+22	; 0x16
    22ec:	9f 89       	ldd	r25, Y+23	; 0x17
    22ee:	0e 94 4b 44 	call	0x8896	; 0x8896 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8c 87       	std	Y+12, r24	; 0x0c
    22f8:	9d 87       	std	Y+13, r25	; 0x0d
    22fa:	ae 87       	std	Y+14, r26	; 0x0e
    22fc:	bf 87       	std	Y+15, r27	; 0x0f
  double remainder = number - (double)int_part;
    22fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2300:	7d 85       	ldd	r23, Y+13	; 0x0d
    2302:	8e 85       	ldd	r24, Y+14	; 0x0e
    2304:	9f 85       	ldd	r25, Y+15	; 0x0f
    2306:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <__floatunsisf>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9c 01       	movw	r18, r24
    2310:	ad 01       	movw	r20, r26
    2312:	6c 89       	ldd	r22, Y+20	; 0x14
    2314:	7d 89       	ldd	r23, Y+21	; 0x15
    2316:	8e 89       	ldd	r24, Y+22	; 0x16
    2318:	9f 89       	ldd	r25, Y+23	; 0x17
    231a:	0e 94 67 43 	call	0x86ce	; 0x86ce <__subsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	88 87       	std	Y+8, r24	; 0x08
    2324:	99 87       	std	Y+9, r25	; 0x09
    2326:	aa 87       	std	Y+10, r26	; 0x0a
    2328:	bb 87       	std	Y+11, r27	; 0x0b
  n += print(int_part);
    232a:	8c 85       	ldd	r24, Y+12	; 0x0c
    232c:	9d 85       	ldd	r25, Y+13	; 0x0d
    232e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2330:	bf 85       	ldd	r27, Y+15	; 0x0f
    2332:	ea 89       	ldd	r30, Y+18	; 0x12
    2334:	fb 89       	ldd	r31, Y+19	; 0x13
    2336:	2a e0       	ldi	r18, 0x0A	; 10
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	ac 01       	movw	r20, r24
    233c:	bd 01       	movw	r22, r26
    233e:	cf 01       	movw	r24, r30
    2340:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print5printEmi>
    2344:	9c 01       	movw	r18, r24
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	82 0f       	add	r24, r18
    234c:	93 1f       	adc	r25, r19
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2352:	88 8d       	ldd	r24, Y+24	; 0x18
    2354:	88 23       	and	r24, r24
    2356:	61 f0       	breq	.+24     	; 0x2370 <__stack+0x171>
    n += print('.'); 
    2358:	8a 89       	ldd	r24, Y+18	; 0x12
    235a:	9b 89       	ldd	r25, Y+19	; 0x13
    235c:	6e e2       	ldi	r22, 0x2E	; 46
    235e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN5Print5printEc>
    2362:	9c 01       	movw	r18, r24
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2370:	88 8d       	ldd	r24, Y+24	; 0x18
    2372:	9f ef       	ldi	r25, 0xFF	; 255
    2374:	98 0f       	add	r25, r24
    2376:	98 8f       	std	Y+24, r25	; 0x18
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	88 23       	and	r24, r24
    237c:	09 f4       	brne	.+2      	; 0x2380 <__stack+0x181>
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	99 23       	and	r25, r25
    2382:	09 f4       	brne	.+2      	; 0x2386 <__stack+0x187>
    2384:	44 c0       	rjmp	.+136    	; 0x240e <__stack+0x20f>
  {
    remainder *= 10.0;
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	68 85       	ldd	r22, Y+8	; 0x08
    2390:	79 85       	ldd	r23, Y+9	; 0x09
    2392:	8a 85       	ldd	r24, Y+10	; 0x0a
    2394:	9b 85       	ldd	r25, Y+11	; 0x0b
    2396:	0e 94 31 45 	call	0x8a62	; 0x8a62 <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	88 87       	std	Y+8, r24	; 0x08
    23a0:	99 87       	std	Y+9, r25	; 0x09
    23a2:	aa 87       	std	Y+10, r26	; 0x0a
    23a4:	bb 87       	std	Y+11, r27	; 0x0b
    unsigned int toPrint = (unsigned int)(remainder);
    23a6:	68 85       	ldd	r22, Y+8	; 0x08
    23a8:	79 85       	ldd	r23, Y+9	; 0x09
    23aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ae:	0e 94 4b 44 	call	0x8896	; 0x8896 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	99 8b       	std	Y+17, r25	; 0x11
    23b8:	88 8b       	std	Y+16, r24	; 0x10
    n += print(toPrint);
    23ba:	28 89       	ldd	r18, Y+16	; 0x10
    23bc:	39 89       	ldd	r19, Y+17	; 0x11
    23be:	8a 89       	ldd	r24, Y+18	; 0x12
    23c0:	9b 89       	ldd	r25, Y+19	; 0x13
    23c2:	4a e0       	ldi	r20, 0x0A	; 10
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	b9 01       	movw	r22, r18
    23c8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_ZN5Print5printEji>
    23cc:	9c 01       	movw	r18, r24
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	82 0f       	add	r24, r18
    23d4:	93 1f       	adc	r25, r19
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    remainder -= toPrint; 
    23da:	88 89       	ldd	r24, Y+16	; 0x10
    23dc:	99 89       	ldd	r25, Y+17	; 0x11
    23de:	cc 01       	movw	r24, r24
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <__floatunsisf>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 01       	movw	r18, r24
    23f2:	ad 01       	movw	r20, r26
    23f4:	68 85       	ldd	r22, Y+8	; 0x08
    23f6:	79 85       	ldd	r23, Y+9	; 0x09
    23f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fc:	0e 94 67 43 	call	0x86ce	; 0x86ce <__subsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	88 87       	std	Y+8, r24	; 0x08
    2406:	99 87       	std	Y+9, r25	; 0x09
    2408:	aa 87       	std	Y+10, r26	; 0x0a
    240a:	bb 87       	std	Y+11, r27	; 0x0b
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    240c:	b1 cf       	rjmp	.-158    	; 0x2370 <__stack+0x171>
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2412:	68 96       	adiw	r28, 0x18	; 24
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	08 95       	ret

0000242e <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// protected method to read stream with timeout
int Stream::timedRead()
{
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	00 d0       	rcall	.+0      	; 0x2434 <_ZN6Stream9timedReadEv+0x6>
    2434:	1f 92       	push	r1
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
  int c;
  _startMillis = millis();
    243e:	0e 94 c0 22 	call	0x4580	; 0x4580 <millis>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	2b 81       	ldd	r18, Y+3	; 0x03
    2448:	3c 81       	ldd	r19, Y+4	; 0x04
    244a:	f9 01       	movw	r30, r18
    244c:	80 87       	std	Z+8, r24	; 0x08
    244e:	91 87       	std	Z+9, r25	; 0x09
    2450:	a2 87       	std	Z+10, r26	; 0x0a
    2452:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = read();
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	0a 96       	adiw	r24, 0x0a	; 10
    2460:	fc 01       	movw	r30, r24
    2462:	20 81       	ld	r18, Z
    2464:	31 81       	ldd	r19, Z+1	; 0x01
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	f9 01       	movw	r30, r18
    246c:	19 95       	eicall
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	99 23       	and	r25, r25
    2478:	1c f0       	brlt	.+6      	; 0x2480 <_ZN6Stream9timedReadEv+0x52>
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	22 c0       	rjmp	.+68     	; 0x24c4 <_ZN6Stream9timedReadEv+0x96>
  } while(millis() - _startMillis < _timeout);
    2480:	0e 94 c0 22 	call	0x4580	; 0x4580 <millis>
    2484:	9b 01       	movw	r18, r22
    2486:	ac 01       	movw	r20, r24
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	fc 01       	movw	r30, r24
    248e:	80 85       	ldd	r24, Z+8	; 0x08
    2490:	91 85       	ldd	r25, Z+9	; 0x09
    2492:	a2 85       	ldd	r26, Z+10	; 0x0a
    2494:	b3 85       	ldd	r27, Z+11	; 0x0b
    2496:	28 1b       	sub	r18, r24
    2498:	39 0b       	sbc	r19, r25
    249a:	4a 0b       	sbc	r20, r26
    249c:	5b 0b       	sbc	r21, r27
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	fc 01       	movw	r30, r24
    24a4:	84 81       	ldd	r24, Z+4	; 0x04
    24a6:	95 81       	ldd	r25, Z+5	; 0x05
    24a8:	a6 81       	ldd	r26, Z+6	; 0x06
    24aa:	b7 81       	ldd	r27, Z+7	; 0x07
// protected method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	28 17       	cp	r18, r24
    24b0:	39 07       	cpc	r19, r25
    24b2:	4a 07       	cpc	r20, r26
    24b4:	5b 07       	cpc	r21, r27
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <_ZN6Stream9timedReadEv+0x8c>
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	66 23       	and	r22, r22
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <_ZN6Stream9timedReadEv+0x92>
    24be:	ca cf       	rjmp	.-108    	; 0x2454 <_ZN6Stream9timedReadEv+0x26>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	9f ef       	ldi	r25, 0xFF	; 255
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <_ZN6Stream9timedPeekEv>:

// protected method to peek stream with timeout
int Stream::timedPeek()
{
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <_ZN6Stream9timedPeekEv+0x6>
    24d8:	1f 92       	push	r1
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
  int c;
  _startMillis = millis();
    24e2:	0e 94 c0 22 	call	0x4580	; 0x4580 <millis>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	f9 01       	movw	r30, r18
    24f0:	80 87       	std	Z+8, r24	; 0x08
    24f2:	91 87       	std	Z+9, r25	; 0x09
    24f4:	a2 87       	std	Z+10, r26	; 0x0a
    24f6:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = peek();
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	fc 01       	movw	r30, r24
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	0c 96       	adiw	r24, 0x0c	; 12
    2504:	fc 01       	movw	r30, r24
    2506:	20 81       	ld	r18, Z
    2508:	31 81       	ldd	r19, Z+1	; 0x01
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	f9 01       	movw	r30, r18
    2510:	19 95       	eicall
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	99 23       	and	r25, r25
    251c:	1c f0       	brlt	.+6      	; 0x2524 <_ZN6Stream9timedPeekEv+0x52>
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	9a 81       	ldd	r25, Y+2	; 0x02
    2522:	22 c0       	rjmp	.+68     	; 0x2568 <_ZN6Stream9timedPeekEv+0x96>
  } while(millis() - _startMillis < _timeout);
    2524:	0e 94 c0 22 	call	0x4580	; 0x4580 <millis>
    2528:	9b 01       	movw	r18, r22
    252a:	ac 01       	movw	r20, r24
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	fc 01       	movw	r30, r24
    2532:	80 85       	ldd	r24, Z+8	; 0x08
    2534:	91 85       	ldd	r25, Z+9	; 0x09
    2536:	a2 85       	ldd	r26, Z+10	; 0x0a
    2538:	b3 85       	ldd	r27, Z+11	; 0x0b
    253a:	28 1b       	sub	r18, r24
    253c:	39 0b       	sbc	r19, r25
    253e:	4a 0b       	sbc	r20, r26
    2540:	5b 0b       	sbc	r21, r27
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	fc 01       	movw	r30, r24
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	95 81       	ldd	r25, Z+5	; 0x05
    254c:	a6 81       	ldd	r26, Z+6	; 0x06
    254e:	b7 81       	ldd	r27, Z+7	; 0x07
// protected method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	4a 07       	cpc	r20, r26
    2558:	5b 07       	cpc	r21, r27
    255a:	08 f0       	brcs	.+2      	; 0x255e <_ZN6Stream9timedPeekEv+0x8c>
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	66 23       	and	r22, r22
    2560:	09 f0       	breq	.+2      	; 0x2564 <_ZN6Stream9timedPeekEv+0x92>
    2562:	ca cf       	rjmp	.-108    	; 0x24f8 <_ZN6Stream9timedPeekEv+0x26>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    2564:	8f ef       	ldi	r24, 0xFF	; 255
    2566:	9f ef       	ldi	r25, 0xFF	; 255
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <_ZN6Stream13peekNextDigitE13LookaheadModeb>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit(LookaheadMode lookahead, bool detectDecimal)
{
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	27 97       	sbiw	r28, 0x07	; 7
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	7e 83       	std	Y+6, r23	; 0x06
    2590:	6d 83       	std	Y+5, r22	; 0x05
    2592:	4f 83       	std	Y+7, r20	; 0x07
  int c;
  while (1) {
    c = timedPeek();
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6Stream9timedPeekEv>
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01

    if( c < 0 ||
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	99 23       	and	r25, r25
    25a6:	9c f0       	brlt	.+38     	; 0x25ce <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x58>
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	8d 97       	sbiw	r24, 0x2d	; 45
    25ae:	79 f0       	breq	.+30     	; 0x25ce <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x58>
        c == '-' ||
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	c0 97       	sbiw	r24, 0x30	; 48
    25b6:	24 f0       	brlt	.+8      	; 0x25c0 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x4a>
        (c >= '0' && c <= '9') ||
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	ca 97       	sbiw	r24, 0x3a	; 58
    25be:	3c f0       	brlt	.+14     	; 0x25ce <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x58>
    25c0:	8f 81       	ldd	r24, Y+7	; 0x07
    25c2:	88 23       	and	r24, r24
    25c4:	39 f0       	breq	.+14     	; 0x25d4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x5e>
        (detectDecimal && c == '.')) return c;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	8e 97       	sbiw	r24, 0x2e	; 46
    25cc:	19 f4       	brne	.+6      	; 0x25d4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x5e>
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	9a 81       	ldd	r25, Y+2	; 0x02
    25d2:	2c c0       	rjmp	.+88     	; 0x262c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xb6>

    switch( lookahead ){
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	91 05       	cpc	r25, r1
    25dc:	19 f0       	breq	.+6      	; 0x25e4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    25de:	02 97       	sbiw	r24, 0x02	; 2
    25e0:	21 f0       	breq	.+8      	; 0x25ea <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x74>
                case '\r':
                case '\n': break;
                default: return -1; // Fail code.
            }
        case SKIP_ALL:
            break;
    25e2:	15 c0       	rjmp	.+42     	; 0x260e <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x98>
        c == '-' ||
        (c >= '0' && c <= '9') ||
        (detectDecimal && c == '.')) return c;

    switch( lookahead ){
        case SKIP_NONE: return -1; // Fail code.
    25e4:	8f ef       	ldi	r24, 0xFF	; 255
    25e6:	9f ef       	ldi	r25, 0xFF	; 255
    25e8:	21 c0       	rjmp	.+66     	; 0x262c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xb6>
        case SKIP_WHITESPACE:
            switch( c ){
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	8d 30       	cpi	r24, 0x0D	; 13
    25f0:	91 05       	cpc	r25, r1
    25f2:	61 f0       	breq	.+24     	; 0x260c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x96>
    25f4:	8e 30       	cpi	r24, 0x0E	; 14
    25f6:	91 05       	cpc	r25, r1
    25f8:	24 f4       	brge	.+8      	; 0x2602 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x8c>
    25fa:	09 97       	sbiw	r24, 0x09	; 9
    25fc:	02 97       	sbiw	r24, 0x02	; 2
    25fe:	18 f4       	brcc	.+6      	; 0x2606 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x90>
                case ' ':
                case '\t':
                case '\r':
                case '\n': break;
    2600:	05 c0       	rjmp	.+10     	; 0x260c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x96>
        (detectDecimal && c == '.')) return c;

    switch( lookahead ){
        case SKIP_NONE: return -1; // Fail code.
        case SKIP_WHITESPACE:
            switch( c ){
    2602:	80 97       	sbiw	r24, 0x20	; 32
    2604:	19 f0       	breq	.+6      	; 0x260c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x96>
                case ' ':
                case '\t':
                case '\r':
                case '\n': break;
                default: return -1; // Fail code.
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	10 c0       	rjmp	.+32     	; 0x262c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xb6>
        case SKIP_WHITESPACE:
            switch( c ){
                case ' ':
                case '\t':
                case '\r':
                case '\n': break;
    260c:	00 00       	nop
                default: return -1; // Fail code.
            }
        case SKIP_ALL:
            break;
    260e:	00 00       	nop
    }
    read();  // discard non-numeric
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	fc 01       	movw	r30, r24
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	0a 96       	adiw	r24, 0x0a	; 10
    261c:	fc 01       	movw	r30, r24
    261e:	20 81       	ld	r18, Z
    2620:	31 81       	ldd	r19, Z+1	; 0x01
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	f9 01       	movw	r30, r18
    2628:	19 95       	eicall
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit(LookaheadMode lookahead, bool detectDecimal)
{
  int c;
  while (1) {
    262a:	b4 cf       	rjmp	.-152    	; 0x2594 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x1e>
        case SKIP_ALL:
            break;
    }
    read();  // discard non-numeric
  }
}
    262c:	27 96       	adiw	r28, 0x07	; 7
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	08 95       	ret

0000263e <_ZN6Stream10setTimeoutEm>:

// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	00 d0       	rcall	.+0      	; 0x2644 <_ZN6Stream10setTimeoutEm+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <_ZN6Stream10setTimeoutEm+0x8>
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	4b 83       	std	Y+3, r20	; 0x03
    2650:	5c 83       	std	Y+4, r21	; 0x04
    2652:	6d 83       	std	Y+5, r22	; 0x05
    2654:	7e 83       	std	Y+6, r23	; 0x06
  _timeout = timeout;
    2656:	29 81       	ldd	r18, Y+1	; 0x01
    2658:	3a 81       	ldd	r19, Y+2	; 0x02
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	ad 81       	ldd	r26, Y+5	; 0x05
    2660:	be 81       	ldd	r27, Y+6	; 0x06
    2662:	f9 01       	movw	r30, r18
    2664:	84 83       	std	Z+4, r24	; 0x04
    2666:	95 83       	std	Z+5, r25	; 0x05
    2668:	a6 83       	std	Z+6, r26	; 0x06
    266a:	b7 83       	std	Z+7, r27	; 0x07
}
    266c:	00 00       	nop
    266e:	26 96       	adiw	r28, 0x06	; 6
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <_ZN6Stream4findEPc>:

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	00 d0       	rcall	.+0      	; 0x268a <_ZN6Stream4findEPc+0xa>
    268a:	1f 92       	push	r1
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	7c 83       	std	Y+4, r23	; 0x04
    2696:	6b 83       	std	Y+3, r22	; 0x03
  return findUntil(target, strlen(target), NULL, 0);
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    26a0:	ac 01       	movw	r20, r24
    26a2:	6b 81       	ldd	r22, Y+3	; 0x03
    26a4:	7c 81       	ldd	r23, Y+4	; 0x04
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	00 e0       	ldi	r16, 0x00	; 0
    26ac:	10 e0       	ldi	r17, 0x00	; 0
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN6Stream9findUntilEPcjS0_j>
}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	08 95       	ret

000026c8 <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
{
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <_ZN6Stream4findEPcj+0xa>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <_ZN6Stream4findEPcj+0xc>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	7c 83       	std	Y+4, r23	; 0x04
    26de:	6b 83       	std	Y+3, r22	; 0x03
    26e0:	5e 83       	std	Y+6, r21	; 0x06
    26e2:	4d 83       	std	Y+5, r20	; 0x05
  return findUntil(target, length, NULL, 0);
    26e4:	4d 81       	ldd	r20, Y+5	; 0x05
    26e6:	5e 81       	ldd	r21, Y+6	; 0x06
    26e8:	6b 81       	ldd	r22, Y+3	; 0x03
    26ea:	7c 81       	ldd	r23, Y+4	; 0x04
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	00 e0       	ldi	r16, 0x00	; 0
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN6Stream9findUntilEPcjS0_j>
}
    26fc:	26 96       	adiw	r28, 0x06	; 6
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	08 95       	ret

00002712 <_ZN6Stream9findUntilEPcS0_>:

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	00 d0       	rcall	.+0      	; 0x271c <_ZN6Stream9findUntilEPcS0_+0xa>
    271c:	00 d0       	rcall	.+0      	; 0x271e <_ZN6Stream9findUntilEPcS0_+0xc>
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	7c 83       	std	Y+4, r23	; 0x04
    2728:	6b 83       	std	Y+3, r22	; 0x03
    272a:	5e 83       	std	Y+6, r21	; 0x06
    272c:	4d 83       	std	Y+5, r20	; 0x05
  return findUntil(target, strlen(target), terminator, strlen(terminator));
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    2736:	8c 01       	movw	r16, r24
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    2740:	ac 01       	movw	r20, r24
    2742:	2d 81       	ldd	r18, Y+5	; 0x05
    2744:	3e 81       	ldd	r19, Y+6	; 0x06
    2746:	6b 81       	ldd	r22, Y+3	; 0x03
    2748:	7c 81       	ldd	r23, Y+4	; 0x04
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN6Stream9findUntilEPcjS0_j>
}
    2752:	26 96       	adiw	r28, 0x06	; 6
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	08 95       	ret

00002768 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	6c 97       	sbiw	r28, 0x1c	; 28
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	9c 8b       	std	Y+20, r25	; 0x14
    2782:	8b 8b       	std	Y+19, r24	; 0x13
    2784:	7e 8b       	std	Y+22, r23	; 0x16
    2786:	6d 8b       	std	Y+21, r22	; 0x15
    2788:	58 8f       	std	Y+24, r21	; 0x18
    278a:	4f 8b       	std	Y+23, r20	; 0x17
    278c:	3a 8f       	std	Y+26, r19	; 0x1a
    278e:	29 8f       	std	Y+25, r18	; 0x19
    2790:	1c 8f       	std	Y+28, r17	; 0x1c
    2792:	0b 8f       	std	Y+27, r16	; 0x1b
  if (terminator == NULL) {
    2794:	89 8d       	ldd	r24, Y+25	; 0x19
    2796:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2798:	89 2b       	or	r24, r25
    279a:	01 f5       	brne	.+64     	; 0x27dc <_ZN6Stream9findUntilEPcjS0_j+0x74>
    MultiTarget t[1] = {{target, targetLen, 0}};
    279c:	26 e0       	ldi	r18, 0x06	; 6
    279e:	ce 01       	movw	r24, r28
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	fc 01       	movw	r30, r24
    27a4:	32 2f       	mov	r19, r18
    27a6:	11 92       	st	Z+, r1
    27a8:	3a 95       	dec	r19
    27aa:	e9 f7       	brne	.-6      	; 0x27a6 <_ZN6Stream9findUntilEPcjS0_j+0x3e>
    27ac:	8d 89       	ldd	r24, Y+21	; 0x15
    27ae:	9e 89       	ldd	r25, Y+22	; 0x16
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	8f 89       	ldd	r24, Y+23	; 0x17
    27b6:	98 8d       	ldd	r25, Y+24	; 0x18
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    return findMulti(t, 1) == 0 ? true : false;
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	9c 89       	ldd	r25, Y+20	; 0x14
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	9e 01       	movw	r18, r28
    27c6:	2f 5f       	subi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	b9 01       	movw	r22, r18
    27cc:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN6Stream9findMultiEPNS_11MultiTargetEi>
    27d0:	9c 01       	movw	r18, r24
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	23 2b       	or	r18, r19
    27d6:	49 f1       	breq	.+82     	; 0x282a <_ZN6Stream9findUntilEPcjS0_j+0xc2>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	27 c0       	rjmp	.+78     	; 0x282a <_ZN6Stream9findUntilEPcjS0_j+0xc2>
  } else {
    MultiTarget t[2] = {{target, targetLen, 0}, {terminator, termLen, 0}};
    27dc:	2c e0       	ldi	r18, 0x0C	; 12
    27de:	ce 01       	movw	r24, r28
    27e0:	07 96       	adiw	r24, 0x07	; 7
    27e2:	fc 01       	movw	r30, r24
    27e4:	32 2f       	mov	r19, r18
    27e6:	11 92       	st	Z+, r1
    27e8:	3a 95       	dec	r19
    27ea:	e9 f7       	brne	.-6      	; 0x27e6 <_ZN6Stream9findUntilEPcjS0_j+0x7e>
    27ec:	8d 89       	ldd	r24, Y+21	; 0x15
    27ee:	9e 89       	ldd	r25, Y+22	; 0x16
    27f0:	98 87       	std	Y+8, r25	; 0x08
    27f2:	8f 83       	std	Y+7, r24	; 0x07
    27f4:	8f 89       	ldd	r24, Y+23	; 0x17
    27f6:	98 8d       	ldd	r25, Y+24	; 0x18
    27f8:	9a 87       	std	Y+10, r25	; 0x0a
    27fa:	89 87       	std	Y+9, r24	; 0x09
    27fc:	89 8d       	ldd	r24, Y+25	; 0x19
    27fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2800:	9e 87       	std	Y+14, r25	; 0x0e
    2802:	8d 87       	std	Y+13, r24	; 0x0d
    2804:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2806:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2808:	98 8b       	std	Y+16, r25	; 0x10
    280a:	8f 87       	std	Y+15, r24	; 0x0f
    return findMulti(t, 2) == 0 ? true : false;
    280c:	9e 01       	movw	r18, r28
    280e:	29 5f       	subi	r18, 0xF9	; 249
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	8b 89       	ldd	r24, Y+19	; 0x13
    2814:	9c 89       	ldd	r25, Y+20	; 0x14
    2816:	42 e0       	ldi	r20, 0x02	; 2
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	b9 01       	movw	r22, r18
    281c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN6Stream9findMultiEPNS_11MultiTargetEi>
    2820:	9c 01       	movw	r18, r24
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	23 2b       	or	r18, r19
    2826:	09 f0       	breq	.+2      	; 0x282a <_ZN6Stream9findUntilEPcjS0_j+0xc2>
    2828:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    282a:	6c 96       	adiw	r28, 0x1c	; 28
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	08 95       	ret

00002840 <_ZN6Stream8parseIntE13LookaheadModec>:
// lookahead determines how parseInt looks ahead in the stream.
// See LookaheadMode enumeration at the top of the file.
// Lookahead is terminated by the first character that is not a valid part of an integer.
// Once parsing commences, 'ignore' will be skipped in the stream.
long Stream::parseInt(LookaheadMode lookahead, char ignore)
{
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	2c 97       	sbiw	r28, 0x0c	; 12
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	99 87       	std	Y+9, r25	; 0x09
    2856:	88 87       	std	Y+8, r24	; 0x08
    2858:	7b 87       	std	Y+11, r23	; 0x0b
    285a:	6a 87       	std	Y+10, r22	; 0x0a
    285c:	4c 87       	std	Y+12, r20	; 0x0c
  bool isNegative = false;
    285e:	19 82       	std	Y+1, r1	; 0x01
  long value = 0;
    2860:	1a 82       	std	Y+2, r1	; 0x02
    2862:	1b 82       	std	Y+3, r1	; 0x03
    2864:	1c 82       	std	Y+4, r1	; 0x04
    2866:	1d 82       	std	Y+5, r1	; 0x05
  int c;

  c = peekNextDigit(lookahead, false);
    2868:	2a 85       	ldd	r18, Y+10	; 0x0a
    286a:	3b 85       	ldd	r19, Y+11	; 0x0b
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	99 85       	ldd	r25, Y+9	; 0x09
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	b9 01       	movw	r22, r18
    2874:	0e 94 bb 12 	call	0x2576	; 0x2576 <_ZN6Stream13peekNextDigitE13LookaheadModeb>
    2878:	9f 83       	std	Y+7, r25	; 0x07
    287a:	8e 83       	std	Y+6, r24	; 0x06
  // ignore non numeric leading characters
  if(c < 0)
    287c:	8e 81       	ldd	r24, Y+6	; 0x06
    287e:	9f 81       	ldd	r25, Y+7	; 0x07
    2880:	99 23       	and	r25, r25
    2882:	24 f4       	brge	.+8      	; 0x288c <_ZN6Stream8parseIntE13LookaheadModec+0x4c>
    return 0; // zero returned if timeout
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	dc 01       	movw	r26, r24
    288a:	7b c0       	rjmp	.+246    	; 0x2982 <_ZN6Stream8parseIntE13LookaheadModec+0x142>

  do{
    if(c == ignore)
    288c:	8c 85       	ldd	r24, Y+12	; 0x0c
    288e:	28 2f       	mov	r18, r24
    2890:	88 0f       	add	r24, r24
    2892:	33 0b       	sbc	r19, r19
    2894:	8e 81       	ldd	r24, Y+6	; 0x06
    2896:	9f 81       	ldd	r25, Y+7	; 0x07
    2898:	28 17       	cp	r18, r24
    289a:	39 07       	cpc	r19, r25
    289c:	b1 f1       	breq	.+108    	; 0x290a <_ZN6Stream8parseIntE13LookaheadModec+0xca>
      ; // ignore this character
    else if(c == '-')
    289e:	8e 81       	ldd	r24, Y+6	; 0x06
    28a0:	9f 81       	ldd	r25, Y+7	; 0x07
    28a2:	8d 97       	sbiw	r24, 0x2d	; 45
    28a4:	19 f4       	brne	.+6      	; 0x28ac <_ZN6Stream8parseIntE13LookaheadModec+0x6c>
      isNegative = true;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	2f c0       	rjmp	.+94     	; 0x290a <_ZN6Stream8parseIntE13LookaheadModec+0xca>
    else if(c >= '0' && c <= '9')        // is c a digit?
    28ac:	8e 81       	ldd	r24, Y+6	; 0x06
    28ae:	9f 81       	ldd	r25, Y+7	; 0x07
    28b0:	c0 97       	sbiw	r24, 0x30	; 48
    28b2:	5c f1       	brlt	.+86     	; 0x290a <_ZN6Stream8parseIntE13LookaheadModec+0xca>
    28b4:	8e 81       	ldd	r24, Y+6	; 0x06
    28b6:	9f 81       	ldd	r25, Y+7	; 0x07
    28b8:	ca 97       	sbiw	r24, 0x3a	; 58
    28ba:	3c f5       	brge	.+78     	; 0x290a <_ZN6Stream8parseIntE13LookaheadModec+0xca>
      value = value * 10 + c - '0';
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	ac 81       	ldd	r26, Y+4	; 0x04
    28c2:	bd 81       	ldd	r27, Y+5	; 0x05
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	aa 1f       	adc	r26, r26
    28ca:	bb 1f       	adc	r27, r27
    28cc:	9c 01       	movw	r18, r24
    28ce:	ad 01       	movw	r20, r26
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	44 1f       	adc	r20, r20
    28d6:	55 1f       	adc	r21, r21
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	44 1f       	adc	r20, r20
    28de:	55 1f       	adc	r21, r21
    28e0:	28 0f       	add	r18, r24
    28e2:	39 1f       	adc	r19, r25
    28e4:	4a 1f       	adc	r20, r26
    28e6:	5b 1f       	adc	r21, r27
    28e8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ea:	9f 81       	ldd	r25, Y+7	; 0x07
    28ec:	09 2e       	mov	r0, r25
    28ee:	00 0c       	add	r0, r0
    28f0:	aa 0b       	sbc	r26, r26
    28f2:	bb 0b       	sbc	r27, r27
    28f4:	82 0f       	add	r24, r18
    28f6:	93 1f       	adc	r25, r19
    28f8:	a4 1f       	adc	r26, r20
    28fa:	b5 1f       	adc	r27, r21
    28fc:	c0 97       	sbiw	r24, 0x30	; 48
    28fe:	a1 09       	sbc	r26, r1
    2900:	b1 09       	sbc	r27, r1
    2902:	8a 83       	std	Y+2, r24	; 0x02
    2904:	9b 83       	std	Y+3, r25	; 0x03
    2906:	ac 83       	std	Y+4, r26	; 0x04
    2908:	bd 83       	std	Y+5, r27	; 0x05
    read();  // consume the character we got with peek
    290a:	88 85       	ldd	r24, Y+8	; 0x08
    290c:	99 85       	ldd	r25, Y+9	; 0x09
    290e:	fc 01       	movw	r30, r24
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	0a 96       	adiw	r24, 0x0a	; 10
    2916:	fc 01       	movw	r30, r24
    2918:	20 81       	ld	r18, Z
    291a:	31 81       	ldd	r19, Z+1	; 0x01
    291c:	88 85       	ldd	r24, Y+8	; 0x08
    291e:	99 85       	ldd	r25, Y+9	; 0x09
    2920:	f9 01       	movw	r30, r18
    2922:	19 95       	eicall
    c = timedPeek();
    2924:	88 85       	ldd	r24, Y+8	; 0x08
    2926:	99 85       	ldd	r25, Y+9	; 0x09
    2928:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6Stream9timedPeekEv>
    292c:	9f 83       	std	Y+7, r25	; 0x07
    292e:	8e 83       	std	Y+6, r24	; 0x06
  }
  while( (c >= '0' && c <= '9') || c == ignore );
    2930:	8e 81       	ldd	r24, Y+6	; 0x06
    2932:	9f 81       	ldd	r25, Y+7	; 0x07
    2934:	c0 97       	sbiw	r24, 0x30	; 48
    2936:	2c f0       	brlt	.+10     	; 0x2942 <_ZN6Stream8parseIntE13LookaheadModec+0x102>
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	ca 97       	sbiw	r24, 0x3a	; 58
    293e:	0c f4       	brge	.+2      	; 0x2942 <_ZN6Stream8parseIntE13LookaheadModec+0x102>
    2940:	a5 cf       	rjmp	.-182    	; 0x288c <_ZN6Stream8parseIntE13LookaheadModec+0x4c>
    2942:	8c 85       	ldd	r24, Y+12	; 0x0c
    2944:	28 2f       	mov	r18, r24
    2946:	88 0f       	add	r24, r24
    2948:	33 0b       	sbc	r19, r19
    294a:	8e 81       	ldd	r24, Y+6	; 0x06
    294c:	9f 81       	ldd	r25, Y+7	; 0x07
    294e:	28 17       	cp	r18, r24
    2950:	39 07       	cpc	r19, r25
    2952:	09 f4       	brne	.+2      	; 0x2956 <_ZN6Stream8parseIntE13LookaheadModec+0x116>
  c = peekNextDigit(lookahead, false);
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    2954:	9b cf       	rjmp	.-202    	; 0x288c <_ZN6Stream8parseIntE13LookaheadModec+0x4c>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == ignore );

  if(isNegative)
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	88 23       	and	r24, r24
    295a:	79 f0       	breq	.+30     	; 0x297a <_ZN6Stream8parseIntE13LookaheadModec+0x13a>
    value = -value;
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	9b 81       	ldd	r25, Y+3	; 0x03
    2960:	ac 81       	ldd	r26, Y+4	; 0x04
    2962:	bd 81       	ldd	r27, Y+5	; 0x05
    2964:	b0 95       	com	r27
    2966:	a0 95       	com	r26
    2968:	90 95       	com	r25
    296a:	81 95       	neg	r24
    296c:	9f 4f       	sbci	r25, 0xFF	; 255
    296e:	af 4f       	sbci	r26, 0xFF	; 255
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	8a 83       	std	Y+2, r24	; 0x02
    2974:	9b 83       	std	Y+3, r25	; 0x03
    2976:	ac 83       	std	Y+4, r26	; 0x04
    2978:	bd 83       	std	Y+5, r27	; 0x05
  return value;
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	ac 81       	ldd	r26, Y+4	; 0x04
    2980:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	2c 96       	adiw	r28, 0x0c	; 12
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	08 95       	ret

00002998 <_ZN6Stream10parseFloatE13LookaheadModec>:

// as parseInt but returns a floating point value
float Stream::parseFloat(LookaheadMode lookahead, char ignore)
{
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	61 97       	sbiw	r28, 0x11	; 17
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	9e 87       	std	Y+14, r25	; 0x0e
    29ae:	8d 87       	std	Y+13, r24	; 0x0d
    29b0:	78 8b       	std	Y+16, r23	; 0x10
    29b2:	6f 87       	std	Y+15, r22	; 0x0f
    29b4:	49 8b       	std	Y+17, r20	; 0x11
  bool isNegative = false;
    29b6:	19 82       	std	Y+1, r1	; 0x01
  bool isFraction = false;
    29b8:	1a 82       	std	Y+2, r1	; 0x02
  long value = 0;
    29ba:	1b 82       	std	Y+3, r1	; 0x03
    29bc:	1c 82       	std	Y+4, r1	; 0x04
    29be:	1d 82       	std	Y+5, r1	; 0x05
    29c0:	1e 82       	std	Y+6, r1	; 0x06
  int c;
  float fraction = 1.0;
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a0 e8       	ldi	r26, 0x80	; 128
    29c8:	bf e3       	ldi	r27, 0x3F	; 63
    29ca:	89 87       	std	Y+9, r24	; 0x09
    29cc:	9a 87       	std	Y+10, r25	; 0x0a
    29ce:	ab 87       	std	Y+11, r26	; 0x0b
    29d0:	bc 87       	std	Y+12, r27	; 0x0c

  c = peekNextDigit(lookahead, true);
    29d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    29d4:	38 89       	ldd	r19, Y+16	; 0x10
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	b9 01       	movw	r22, r18
    29de:	0e 94 bb 12 	call	0x2576	; 0x2576 <_ZN6Stream13peekNextDigitE13LookaheadModeb>
    29e2:	98 87       	std	Y+8, r25	; 0x08
    29e4:	8f 83       	std	Y+7, r24	; 0x07
    // ignore non numeric leading characters
  if(c < 0)
    29e6:	8f 81       	ldd	r24, Y+7	; 0x07
    29e8:	98 85       	ldd	r25, Y+8	; 0x08
    29ea:	99 23       	and	r25, r25
    29ec:	24 f4       	brge	.+8      	; 0x29f6 <_ZN6Stream10parseFloatE13LookaheadModec+0x5e>
    return 0; // zero returned if timeout
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	dc 01       	movw	r26, r24
    29f4:	b9 c0       	rjmp	.+370    	; 0x2b68 <_ZN6Stream10parseFloatE13LookaheadModec+0x1d0>

  do{
    if(c == ignore)
    29f6:	89 89       	ldd	r24, Y+17	; 0x11
    29f8:	28 2f       	mov	r18, r24
    29fa:	88 0f       	add	r24, r24
    29fc:	33 0b       	sbc	r19, r19
    29fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2a00:	98 85       	ldd	r25, Y+8	; 0x08
    2a02:	28 17       	cp	r18, r24
    2a04:	39 07       	cpc	r19, r25
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <_ZN6Stream10parseFloatE13LookaheadModec+0x72>
    2a08:	51 c0       	rjmp	.+162    	; 0x2aac <_ZN6Stream10parseFloatE13LookaheadModec+0x114>
      ; // ignore
    else if(c == '-')
    2a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0c:	98 85       	ldd	r25, Y+8	; 0x08
    2a0e:	8d 97       	sbiw	r24, 0x2d	; 45
    2a10:	19 f4       	brne	.+6      	; 0x2a18 <_ZN6Stream10parseFloatE13LookaheadModec+0x80>
      isNegative = true;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	4a c0       	rjmp	.+148    	; 0x2aac <_ZN6Stream10parseFloatE13LookaheadModec+0x114>
    else if (c == '.')
    2a18:	8f 81       	ldd	r24, Y+7	; 0x07
    2a1a:	98 85       	ldd	r25, Y+8	; 0x08
    2a1c:	8e 97       	sbiw	r24, 0x2e	; 46
    2a1e:	19 f4       	brne	.+6      	; 0x2a26 <_ZN6Stream10parseFloatE13LookaheadModec+0x8e>
      isFraction = true;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	8a 83       	std	Y+2, r24	; 0x02
    2a24:	43 c0       	rjmp	.+134    	; 0x2aac <_ZN6Stream10parseFloatE13LookaheadModec+0x114>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    2a26:	8f 81       	ldd	r24, Y+7	; 0x07
    2a28:	98 85       	ldd	r25, Y+8	; 0x08
    2a2a:	c0 97       	sbiw	r24, 0x30	; 48
    2a2c:	0c f4       	brge	.+2      	; 0x2a30 <_ZN6Stream10parseFloatE13LookaheadModec+0x98>
    2a2e:	3e c0       	rjmp	.+124    	; 0x2aac <_ZN6Stream10parseFloatE13LookaheadModec+0x114>
    2a30:	8f 81       	ldd	r24, Y+7	; 0x07
    2a32:	98 85       	ldd	r25, Y+8	; 0x08
    2a34:	ca 97       	sbiw	r24, 0x3a	; 58
    2a36:	d4 f5       	brge	.+116    	; 0x2aac <_ZN6Stream10parseFloatE13LookaheadModec+0x114>
      value = value * 10 + c - '0';
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	ad 81       	ldd	r26, Y+5	; 0x05
    2a3e:	be 81       	ldd	r27, Y+6	; 0x06
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	aa 1f       	adc	r26, r26
    2a46:	bb 1f       	adc	r27, r27
    2a48:	9c 01       	movw	r18, r24
    2a4a:	ad 01       	movw	r20, r26
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	44 1f       	adc	r20, r20
    2a52:	55 1f       	adc	r21, r21
    2a54:	22 0f       	add	r18, r18
    2a56:	33 1f       	adc	r19, r19
    2a58:	44 1f       	adc	r20, r20
    2a5a:	55 1f       	adc	r21, r21
    2a5c:	28 0f       	add	r18, r24
    2a5e:	39 1f       	adc	r19, r25
    2a60:	4a 1f       	adc	r20, r26
    2a62:	5b 1f       	adc	r21, r27
    2a64:	8f 81       	ldd	r24, Y+7	; 0x07
    2a66:	98 85       	ldd	r25, Y+8	; 0x08
    2a68:	09 2e       	mov	r0, r25
    2a6a:	00 0c       	add	r0, r0
    2a6c:	aa 0b       	sbc	r26, r26
    2a6e:	bb 0b       	sbc	r27, r27
    2a70:	82 0f       	add	r24, r18
    2a72:	93 1f       	adc	r25, r19
    2a74:	a4 1f       	adc	r26, r20
    2a76:	b5 1f       	adc	r27, r21
    2a78:	c0 97       	sbiw	r24, 0x30	; 48
    2a7a:	a1 09       	sbc	r26, r1
    2a7c:	b1 09       	sbc	r27, r1
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
    2a80:	9c 83       	std	Y+4, r25	; 0x04
    2a82:	ad 83       	std	Y+5, r26	; 0x05
    2a84:	be 83       	std	Y+6, r27	; 0x06
      if(isFraction)
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	88 23       	and	r24, r24
    2a8a:	81 f0       	breq	.+32     	; 0x2aac <_ZN6Stream10parseFloatE13LookaheadModec+0x114>
         fraction *= 0.1;
    2a8c:	2d ec       	ldi	r18, 0xCD	; 205
    2a8e:	3c ec       	ldi	r19, 0xCC	; 204
    2a90:	4c ec       	ldi	r20, 0xCC	; 204
    2a92:	5d e3       	ldi	r21, 0x3D	; 61
    2a94:	69 85       	ldd	r22, Y+9	; 0x09
    2a96:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a98:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a9c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	89 87       	std	Y+9, r24	; 0x09
    2aa6:	9a 87       	std	Y+10, r25	; 0x0a
    2aa8:	ab 87       	std	Y+11, r26	; 0x0b
    2aaa:	bc 87       	std	Y+12, r27	; 0x0c
    }
    read();  // consume the character we got with peek
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	0a 96       	adiw	r24, 0x0a	; 10
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 81       	ld	r18, Z
    2abc:	31 81       	ldd	r19, Z+1	; 0x01
    2abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac2:	f9 01       	movw	r30, r18
    2ac4:	19 95       	eicall
    c = timedPeek();
    2ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aca:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6Stream9timedPeekEv>
    2ace:	98 87       	std	Y+8, r25	; 0x08
    2ad0:	8f 83       	std	Y+7, r24	; 0x07
  }
  while( (c >= '0' && c <= '9')  || (c == '.' && !isFraction) || c == ignore );
    2ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ad4:	98 85       	ldd	r25, Y+8	; 0x08
    2ad6:	c0 97       	sbiw	r24, 0x30	; 48
    2ad8:	2c f0       	brlt	.+10     	; 0x2ae4 <_ZN6Stream10parseFloatE13LookaheadModec+0x14c>
    2ada:	8f 81       	ldd	r24, Y+7	; 0x07
    2adc:	98 85       	ldd	r25, Y+8	; 0x08
    2ade:	ca 97       	sbiw	r24, 0x3a	; 58
    2ae0:	0c f4       	brge	.+2      	; 0x2ae4 <_ZN6Stream10parseFloatE13LookaheadModec+0x14c>
    2ae2:	89 cf       	rjmp	.-238    	; 0x29f6 <_ZN6Stream10parseFloatE13LookaheadModec+0x5e>
    2ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae6:	98 85       	ldd	r25, Y+8	; 0x08
    2ae8:	8e 97       	sbiw	r24, 0x2e	; 46
    2aea:	21 f4       	brne	.+8      	; 0x2af4 <_ZN6Stream10parseFloatE13LookaheadModec+0x15c>
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	88 23       	and	r24, r24
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <_ZN6Stream10parseFloatE13LookaheadModec+0x15c>
    2af2:	81 cf       	rjmp	.-254    	; 0x29f6 <_ZN6Stream10parseFloatE13LookaheadModec+0x5e>
    2af4:	89 89       	ldd	r24, Y+17	; 0x11
    2af6:	28 2f       	mov	r18, r24
    2af8:	88 0f       	add	r24, r24
    2afa:	33 0b       	sbc	r19, r19
    2afc:	8f 81       	ldd	r24, Y+7	; 0x07
    2afe:	98 85       	ldd	r25, Y+8	; 0x08
    2b00:	28 17       	cp	r18, r24
    2b02:	39 07       	cpc	r19, r25
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <_ZN6Stream10parseFloatE13LookaheadModec+0x170>
  c = peekNextDigit(lookahead, true);
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    2b06:	77 cf       	rjmp	.-274    	; 0x29f6 <_ZN6Stream10parseFloatE13LookaheadModec+0x5e>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || (c == '.' && !isFraction) || c == ignore );

  if(isNegative)
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	88 23       	and	r24, r24
    2b0c:	79 f0       	breq	.+30     	; 0x2b2c <_ZN6Stream10parseFloatE13LookaheadModec+0x194>
    value = -value;
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	ad 81       	ldd	r26, Y+5	; 0x05
    2b14:	be 81       	ldd	r27, Y+6	; 0x06
    2b16:	b0 95       	com	r27
    2b18:	a0 95       	com	r26
    2b1a:	90 95       	com	r25
    2b1c:	81 95       	neg	r24
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	af 4f       	sbci	r26, 0xFF	; 255
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	8b 83       	std	Y+3, r24	; 0x03
    2b26:	9c 83       	std	Y+4, r25	; 0x04
    2b28:	ad 83       	std	Y+5, r26	; 0x05
    2b2a:	be 83       	std	Y+6, r27	; 0x06
  if(isFraction)
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	88 23       	and	r24, r24
    2b30:	99 f0       	breq	.+38     	; 0x2b58 <_ZN6Stream10parseFloatE13LookaheadModec+0x1c0>
    return value * fraction;
    2b32:	6b 81       	ldd	r22, Y+3	; 0x03
    2b34:	7c 81       	ldd	r23, Y+4	; 0x04
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <__floatsisf>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	29 85       	ldd	r18, Y+9	; 0x09
    2b44:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b46:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b48:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 31 45 	call	0x8a62	; 0x8a62 <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	08 c0       	rjmp	.+16     	; 0x2b68 <_ZN6Stream10parseFloatE13LookaheadModec+0x1d0>
  else
    return value;
    2b58:	6b 81       	ldd	r22, Y+3	; 0x03
    2b5a:	7c 81       	ldd	r23, Y+4	; 0x04
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <__floatsisf>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
}
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	61 96       	adiw	r28, 0x11	; 17
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	08 95       	ret

00002b7e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	2a 97       	sbiw	r28, 0x0a	; 10
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	78 87       	std	Y+8, r23	; 0x08
    2b98:	6f 83       	std	Y+7, r22	; 0x07
    2b9a:	5a 87       	std	Y+10, r21	; 0x0a
    2b9c:	49 87       	std	Y+9, r20	; 0x09
  size_t count = 0;
    2b9e:	1a 82       	std	Y+2, r1	; 0x02
    2ba0:	19 82       	std	Y+1, r1	; 0x01
  while (count < length) {
    2ba2:	29 81       	ldd	r18, Y+1	; 0x01
    2ba4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	28 17       	cp	r18, r24
    2bac:	39 07       	cpc	r19, r25
    2bae:	d8 f4       	brcc	.+54     	; 0x2be6 <_ZN6Stream9readBytesEPcj+0x68>
    int c = timedRead();
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb4:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2bb8:	9c 83       	std	Y+4, r25	; 0x04
    2bba:	8b 83       	std	Y+3, r24	; 0x03
    if (c < 0) break;
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	99 23       	and	r25, r25
    2bc2:	84 f0       	brlt	.+32     	; 0x2be4 <_ZN6Stream9readBytesEPcj+0x66>
    *buffer++ = (char)c;
    2bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc6:	98 85       	ldd	r25, Y+8	; 0x08
    2bc8:	9c 01       	movw	r18, r24
    2bca:	2f 5f       	subi	r18, 0xFF	; 255
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	38 87       	std	Y+8, r19	; 0x08
    2bd0:	2f 83       	std	Y+7, r18	; 0x07
    2bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	20 83       	st	Z, r18
    count++;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    2be2:	df cf       	rjmp	.-66     	; 0x2ba2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
    if (c < 0) break;
    2be4:	00 00       	nop
    *buffer++ = (char)c;
    count++;
  }
  return count;
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2bea:	2a 96       	adiw	r28, 0x0a	; 10
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	08 95       	ret

00002bfc <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	2b 97       	sbiw	r28, 0x0b	; 11
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	6f 83       	std	Y+7, r22	; 0x07
    2c16:	59 87       	std	Y+9, r21	; 0x09
    2c18:	48 87       	std	Y+8, r20	; 0x08
    2c1a:	3b 87       	std	Y+11, r19	; 0x0b
    2c1c:	2a 87       	std	Y+10, r18	; 0x0a
  if (length < 1) return 0;
    2c1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c22:	89 2b       	or	r24, r25
    2c24:	19 f4       	brne	.+6      	; 0x2c2c <_ZN6Stream14readBytesUntilEcPcj+0x30>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	2e c0       	rjmp	.+92     	; 0x2c88 <_ZN6Stream14readBytesUntilEcPcj+0x8c>
  size_t index = 0;
    2c2c:	1a 82       	std	Y+2, r1	; 0x02
    2c2e:	19 82       	std	Y+1, r1	; 0x01
  while (index < length) {
    2c30:	29 81       	ldd	r18, Y+1	; 0x01
    2c32:	3a 81       	ldd	r19, Y+2	; 0x02
    2c34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c38:	28 17       	cp	r18, r24
    2c3a:	39 07       	cpc	r19, r25
    2c3c:	18 f5       	brcc	.+70     	; 0x2c84 <_ZN6Stream14readBytesUntilEcPcj+0x88>
    int c = timedRead();
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	9e 81       	ldd	r25, Y+6	; 0x06
    2c42:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2c46:	9c 83       	std	Y+4, r25	; 0x04
    2c48:	8b 83       	std	Y+3, r24	; 0x03
    if (c < 0 || c == terminator) break;
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	99 23       	and	r25, r25
    2c50:	cc f0       	brlt	.+50     	; 0x2c84 <_ZN6Stream14readBytesUntilEcPcj+0x88>
    2c52:	8f 81       	ldd	r24, Y+7	; 0x07
    2c54:	28 2f       	mov	r18, r24
    2c56:	88 0f       	add	r24, r24
    2c58:	33 0b       	sbc	r19, r19
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	28 17       	cp	r18, r24
    2c60:	39 07       	cpc	r19, r25
    2c62:	81 f0       	breq	.+32     	; 0x2c84 <_ZN6Stream14readBytesUntilEcPcj+0x88>
    *buffer++ = (char)c;
    2c64:	88 85       	ldd	r24, Y+8	; 0x08
    2c66:	99 85       	ldd	r25, Y+9	; 0x09
    2c68:	9c 01       	movw	r18, r24
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	39 87       	std	Y+9, r19	; 0x09
    2c70:	28 87       	std	Y+8, r18	; 0x08
    2c72:	2b 81       	ldd	r18, Y+3	; 0x03
    2c74:	fc 01       	movw	r30, r24
    2c76:	20 83       	st	Z, r18
    index++;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	9a 83       	std	Y+2, r25	; 0x02
    2c80:	89 83       	std	Y+1, r24	; 0x01

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    2c82:	d6 cf       	rjmp	.-84     	; 0x2c30 <_ZN6Stream14readBytesUntilEcPcj+0x34>
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c88:	2b 96       	adiw	r28, 0x0b	; 11
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <_ZN6Stream10readStringEv>:

String Stream::readString()
{
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <_ZN6Stream10readStringEv+0x6>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <_ZN6Stream10readStringEv+0x8>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9c 83       	std	Y+4, r25	; 0x04
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
    2caa:	7e 83       	std	Y+6, r23	; 0x06
    2cac:	6d 83       	std	Y+5, r22	; 0x05
  String ret;
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb2:	65 ec       	ldi	r22, 0xC5	; 197
    2cb4:	72 e0       	ldi	r23, 0x02	; 2
    2cb6:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <_ZN6StringC1EPKc>
  int c = timedRead();
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	89 83       	std	Y+1, r24	; 0x01
  while (c >= 0)
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	99 23       	and	r25, r25
    2ccc:	6c f0       	brlt	.+26     	; 0x2ce8 <_ZN6Stream10readStringEv+0x4e>
  {
    ret += (char)c;
    2cce:	29 81       	ldd	r18, Y+1	; 0x01
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	62 2f       	mov	r22, r18
    2cd6:	0e 94 16 42 	call	0x842c	; 0x842c <_ZN6StringpLEc>
    c = timedRead();
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	89 83       	std	Y+1, r24	; 0x01

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
    2ce6:	ef cf       	rjmp	.-34     	; 0x2cc6 <_ZN6Stream10readStringEv+0x2c>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
    2ce8:	00 00       	nop
}
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	26 96       	adiw	r28, 0x06	; 6
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	27 97       	sbiw	r28, 0x07	; 7
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
    2d18:	7e 83       	std	Y+6, r23	; 0x06
    2d1a:	6d 83       	std	Y+5, r22	; 0x05
    2d1c:	4f 83       	std	Y+7, r20	; 0x07
  String ret;
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	65 ec       	ldi	r22, 0xC5	; 197
    2d24:	72 e0       	ldi	r23, 0x02	; 2
    2d26:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <_ZN6StringC1EPKc>
  int c = timedRead();
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
  while (c >= 0 && c != terminator)
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	99 23       	and	r25, r25
    2d3c:	b4 f0       	brlt	.+44     	; 0x2d6a <_ZN6Stream15readStringUntilEc+0x6a>
    2d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d40:	28 2f       	mov	r18, r24
    2d42:	88 0f       	add	r24, r24
    2d44:	33 0b       	sbc	r19, r19
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	28 17       	cp	r18, r24
    2d4c:	39 07       	cpc	r19, r25
    2d4e:	69 f0       	breq	.+26     	; 0x2d6a <_ZN6Stream15readStringUntilEc+0x6a>
  {
    ret += (char)c;
    2d50:	29 81       	ldd	r18, Y+1	; 0x01
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	62 2f       	mov	r22, r18
    2d58:	0e 94 16 42 	call	0x842c	; 0x842c <_ZN6StringpLEc>
    c = timedRead();
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
    2d68:	e6 cf       	rjmp	.-52     	; 0x2d36 <_ZN6Stream15readStringUntilEc+0x36>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
    2d6a:	00 00       	nop
}
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	27 96       	adiw	r28, 0x07	; 7
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	f8 94       	cli
    2d76:	de bf       	out	0x3e, r29	; 62
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	cd bf       	out	0x3d, r28	; 61
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <_ZN6Stream9findMultiEPNS_11MultiTargetEi>:

int Stream::findMulti( struct Stream::MultiTarget *targets, int tCount) {
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	62 97       	sbiw	r28, 0x12	; 18
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	9e 87       	std	Y+14, r25	; 0x0e
    2d98:	8d 87       	std	Y+13, r24	; 0x0d
    2d9a:	78 8b       	std	Y+16, r23	; 0x10
    2d9c:	6f 87       	std	Y+15, r22	; 0x0f
    2d9e:	5a 8b       	std	Y+18, r21	; 0x12
    2da0:	49 8b       	std	Y+17, r20	; 0x11
  // any zero length target string automatically matches and would make
  // a mess of the rest of the algorithm.
  for (struct MultiTarget *t = targets; t < targets+tCount; ++t) {
    2da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da4:	98 89       	ldd	r25, Y+16	; 0x10
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	29 89       	ldd	r18, Y+17	; 0x11
    2dac:	3a 89       	ldd	r19, Y+18	; 0x12
    2dae:	c9 01       	movw	r24, r18
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	82 0f       	add	r24, r18
    2db6:	93 1f       	adc	r25, r19
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	9c 01       	movw	r18, r24
    2dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc0:	98 89       	ldd	r25, Y+16	; 0x10
    2dc2:	28 0f       	add	r18, r24
    2dc4:	39 1f       	adc	r19, r25
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	82 17       	cp	r24, r18
    2dcc:	93 07       	cpc	r25, r19
    2dce:	18 f5       	brcc	.+70     	; 0x2e16 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x94>
    if (t->len <= 0)
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	89 2b       	or	r24, r25
    2ddc:	b1 f4       	brne	.+44     	; 0x2e0a <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x88>
      return t - targets;
    2dde:	29 81       	ldd	r18, Y+1	; 0x01
    2de0:	3a 81       	ldd	r19, Y+2	; 0x02
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	98 89       	ldd	r25, Y+16	; 0x10
    2de6:	a9 01       	movw	r20, r18
    2de8:	48 1b       	sub	r20, r24
    2dea:	59 0b       	sbc	r21, r25
    2dec:	ca 01       	movw	r24, r20
    2dee:	9c 01       	movw	r18, r24
    2df0:	35 95       	asr	r19
    2df2:	27 95       	ror	r18
    2df4:	8b ea       	ldi	r24, 0xAB	; 171
    2df6:	9a ea       	ldi	r25, 0xAA	; 170
    2df8:	28 9f       	mul	r18, r24
    2dfa:	a0 01       	movw	r20, r0
    2dfc:	29 9f       	mul	r18, r25
    2dfe:	50 0d       	add	r21, r0
    2e00:	38 9f       	mul	r19, r24
    2e02:	50 0d       	add	r21, r0
    2e04:	11 24       	eor	r1, r1
    2e06:	ca 01       	movw	r24, r20
    2e08:	23 c1       	rjmp	.+582    	; 0x3050 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2ce>
}

int Stream::findMulti( struct Stream::MultiTarget *targets, int tCount) {
  // any zero length target string automatically matches and would make
  // a mess of the rest of the algorithm.
  for (struct MultiTarget *t = targets; t < targets+tCount; ++t) {
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	06 96       	adiw	r24, 0x06	; 6
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	ca cf       	rjmp	.-108    	; 0x2daa <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x28>
    if (t->len <= 0)
      return t - targets;
  }

  while (1) {
    int c = timedRead();
    2e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1a:	0e 94 17 12 	call	0x242e	; 0x242e <_ZN6Stream9timedReadEv>
    2e1e:	98 87       	std	Y+8, r25	; 0x08
    2e20:	8f 83       	std	Y+7, r24	; 0x07
    if (c < 0)
    2e22:	8f 81       	ldd	r24, Y+7	; 0x07
    2e24:	98 85       	ldd	r25, Y+8	; 0x08
    2e26:	99 23       	and	r25, r25
    2e28:	1c f4       	brge	.+6      	; 0x2e30 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xae>
      return -1;
    2e2a:	8f ef       	ldi	r24, 0xFF	; 255
    2e2c:	9f ef       	ldi	r25, 0xFF	; 255
    2e2e:	10 c1       	rjmp	.+544    	; 0x3050 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2ce>

    for (struct MultiTarget *t = targets; t < targets+tCount; ++t) {
    2e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e32:	98 89       	ldd	r25, Y+16	; 0x10
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	8b 83       	std	Y+3, r24	; 0x03
    2e38:	29 89       	ldd	r18, Y+17	; 0x11
    2e3a:	3a 89       	ldd	r19, Y+18	; 0x12
    2e3c:	c9 01       	movw	r24, r18
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	82 0f       	add	r24, r18
    2e44:	93 1f       	adc	r25, r19
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	9c 01       	movw	r18, r24
    2e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e4e:	98 89       	ldd	r25, Y+16	; 0x10
    2e50:	28 0f       	add	r18, r24
    2e52:	39 1f       	adc	r19, r25
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	82 17       	cp	r24, r18
    2e5a:	93 07       	cpc	r25, r19
    2e5c:	e0 f6       	brcc	.-72     	; 0x2e16 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x94>
      // the simple case is if we match, deal with that first.
      if (c == t->str[t->index]) {
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	fc 01       	movw	r30, r24
    2e64:	20 81       	ld	r18, Z
    2e66:	31 81       	ldd	r19, Z+1	; 0x01
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	84 81       	ldd	r24, Z+4	; 0x04
    2e70:	95 81       	ldd	r25, Z+5	; 0x05
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	fc 01       	movw	r30, r24
    2e78:	80 81       	ld	r24, Z
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	88 0f       	add	r24, r24
    2e7e:	33 0b       	sbc	r19, r19
    2e80:	8f 81       	ldd	r24, Y+7	; 0x07
    2e82:	98 85       	ldd	r25, Y+8	; 0x08
    2e84:	28 17       	cp	r18, r24
    2e86:	39 07       	cpc	r19, r25
    2e88:	a9 f5       	brne	.+106    	; 0x2ef4 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x172>
        if (++t->index == t->len)
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	fc 01       	movw	r30, r24
    2e90:	84 81       	ldd	r24, Z+4	; 0x04
    2e92:	95 81       	ldd	r25, Z+5	; 0x05
    2e94:	9c 01       	movw	r18, r24
    2e96:	2f 5f       	subi	r18, 0xFF	; 255
    2e98:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	35 83       	std	Z+5, r19	; 0x05
    2ea2:	24 83       	std	Z+4, r18	; 0x04
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	24 81       	ldd	r18, Z+4	; 0x04
    2eac:	35 81       	ldd	r19, Z+5	; 0x05
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	41 e0       	ldi	r20, 0x01	; 1
    2eba:	28 17       	cp	r18, r24
    2ebc:	39 07       	cpc	r19, r25
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x140>
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	44 23       	and	r20, r20
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x146>
    2ec6:	bb c0       	rjmp	.+374    	; 0x303e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2bc>
          return t - targets;
    2ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eca:	3c 81       	ldd	r19, Y+4	; 0x04
    2ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ece:	98 89       	ldd	r25, Y+16	; 0x10
    2ed0:	a9 01       	movw	r20, r18
    2ed2:	48 1b       	sub	r20, r24
    2ed4:	59 0b       	sbc	r21, r25
    2ed6:	ca 01       	movw	r24, r20
    2ed8:	9c 01       	movw	r18, r24
    2eda:	35 95       	asr	r19
    2edc:	27 95       	ror	r18
    2ede:	8b ea       	ldi	r24, 0xAB	; 171
    2ee0:	9a ea       	ldi	r25, 0xAA	; 170
    2ee2:	28 9f       	mul	r18, r24
    2ee4:	a0 01       	movw	r20, r0
    2ee6:	29 9f       	mul	r18, r25
    2ee8:	50 0d       	add	r21, r0
    2eea:	38 9f       	mul	r19, r24
    2eec:	50 0d       	add	r21, r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	ca 01       	movw	r24, r20
    2ef2:	ae c0       	rjmp	.+348    	; 0x3050 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2ce>

      // if not we need to walk back and see if we could have matched further
      // down the stream (ie '1112' doesn't match the first position in '11112'
      // but it will match the second position so we can't just reset the current
      // index to 0 when we find a mismatch.
      if (t->index == 0)
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	fc 01       	movw	r30, r24
    2efa:	84 81       	ldd	r24, Z+4	; 0x04
    2efc:	95 81       	ldd	r25, Z+5	; 0x05
    2efe:	89 2b       	or	r24, r25
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x182>
    2f02:	9f c0       	rjmp	.+318    	; 0x3042 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2c0>
        continue;

      int origIndex = t->index;
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	fc 01       	movw	r30, r24
    2f0a:	84 81       	ldd	r24, Z+4	; 0x04
    2f0c:	95 81       	ldd	r25, Z+5	; 0x05
    2f0e:	9a 87       	std	Y+10, r25	; 0x0a
    2f10:	89 87       	std	Y+9, r24	; 0x09
      do {
        --t->index;
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	9c 81       	ldd	r25, Y+4	; 0x04
    2f16:	fc 01       	movw	r30, r24
    2f18:	84 81       	ldd	r24, Z+4	; 0x04
    2f1a:	95 81       	ldd	r25, Z+5	; 0x05
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	21 50       	subi	r18, 0x01	; 1
    2f20:	31 09       	sbc	r19, r1
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	fc 01       	movw	r30, r24
    2f28:	35 83       	std	Z+5, r19	; 0x05
    2f2a:	24 83       	std	Z+4, r18	; 0x04
        // first check if current char works against the new current index
        if (c != t->str[t->index])
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	fc 01       	movw	r30, r24
    2f32:	20 81       	ld	r18, Z
    2f34:	31 81       	ldd	r19, Z+1	; 0x01
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	84 81       	ldd	r24, Z+4	; 0x04
    2f3e:	95 81       	ldd	r25, Z+5	; 0x05
    2f40:	82 0f       	add	r24, r18
    2f42:	93 1f       	adc	r25, r19
    2f44:	fc 01       	movw	r30, r24
    2f46:	80 81       	ld	r24, Z
    2f48:	28 2f       	mov	r18, r24
    2f4a:	88 0f       	add	r24, r24
    2f4c:	33 0b       	sbc	r19, r19
    2f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f50:	98 85       	ldd	r25, Y+8	; 0x08
    2f52:	28 17       	cp	r18, r24
    2f54:	39 07       	cpc	r19, r25
    2f56:	09 f0       	breq	.+2      	; 0x2f5a <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x1d8>
    2f58:	69 c0       	rjmp	.+210    	; 0x302c <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2aa>
          continue;

        // if it's the only char then we're good, nothing more to check
        if (t->index == 0) {
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5e:	fc 01       	movw	r30, r24
    2f60:	84 81       	ldd	r24, Z+4	; 0x04
    2f62:	95 81       	ldd	r25, Z+5	; 0x05
    2f64:	89 2b       	or	r24, r25
    2f66:	71 f4       	brne	.+28     	; 0x2f84 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x202>
          t->index++;
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	84 81       	ldd	r24, Z+4	; 0x04
    2f70:	95 81       	ldd	r25, Z+5	; 0x05
    2f72:	9c 01       	movw	r18, r24
    2f74:	2f 5f       	subi	r18, 0xFF	; 255
    2f76:	3f 4f       	sbci	r19, 0xFF	; 255
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	35 83       	std	Z+5, r19	; 0x05
    2f80:	24 83       	std	Z+4, r18	; 0x04
          break;
    2f82:	60 c0       	rjmp	.+192    	; 0x3044 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2c2>
        }

        // otherwise we need to check the rest of the found string
        int diff = origIndex - t->index;
    2f84:	29 85       	ldd	r18, Y+9	; 0x09
    2f86:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	84 81       	ldd	r24, Z+4	; 0x04
    2f90:	95 81       	ldd	r25, Z+5	; 0x05
    2f92:	a9 01       	movw	r20, r18
    2f94:	48 1b       	sub	r20, r24
    2f96:	59 0b       	sbc	r21, r25
    2f98:	ca 01       	movw	r24, r20
    2f9a:	9c 87       	std	Y+12, r25	; 0x0c
    2f9c:	8b 87       	std	Y+11, r24	; 0x0b
        size_t i;
        for (i = 0; i < t->index; ++i) {
    2f9e:	1e 82       	std	Y+6, r1	; 0x06
    2fa0:	1d 82       	std	Y+5, r1	; 0x05
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	24 81       	ldd	r18, Z+4	; 0x04
    2faa:	35 81       	ldd	r19, Z+5	; 0x05
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	82 17       	cp	r24, r18
    2fb2:	93 07       	cpc	r25, r19
    2fb4:	18 f5       	brcc	.+70     	; 0x2ffc <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x27a>
          if (t->str[i] != t->str[i + diff])
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fba:	fc 01       	movw	r30, r24
    2fbc:	20 81       	ld	r18, Z
    2fbe:	31 81       	ldd	r19, Z+1	; 0x01
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	82 0f       	add	r24, r18
    2fc6:	93 1f       	adc	r25, r19
    2fc8:	fc 01       	movw	r30, r24
    2fca:	60 81       	ld	r22, Z
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	20 81       	ld	r18, Z
    2fd4:	31 81       	ldd	r19, Z+1	; 0x01
    2fd6:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fd8:	5c 85       	ldd	r21, Y+12	; 0x0c
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	84 0f       	add	r24, r20
    2fe0:	95 1f       	adc	r25, r21
    2fe2:	82 0f       	add	r24, r18
    2fe4:	93 1f       	adc	r25, r19
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	80 81       	ld	r24, Z
    2fea:	68 17       	cp	r22, r24
    2fec:	31 f4       	brne	.+12     	; 0x2ffa <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x278>
        }

        // otherwise we need to check the rest of the found string
        int diff = origIndex - t->index;
        size_t i;
        for (i = 0; i < t->index; ++i) {
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	01 96       	adiw	r24, 0x01	; 1
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
    2ff8:	d4 cf       	rjmp	.-88     	; 0x2fa2 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x220>
          if (t->str[i] != t->str[i + diff])
            break;
    2ffa:	00 00       	nop
        }

        // if we successfully got through the previous loop then our current
        // index is good.
        if (i == t->index) {
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	fc 01       	movw	r30, r24
    3002:	24 81       	ldd	r18, Z+4	; 0x04
    3004:	35 81       	ldd	r19, Z+5	; 0x05
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	28 17       	cp	r18, r24
    300c:	39 07       	cpc	r19, r25
    300e:	79 f4       	brne	.+30     	; 0x302e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2ac>
          t->index++;
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	fc 01       	movw	r30, r24
    3016:	84 81       	ldd	r24, Z+4	; 0x04
    3018:	95 81       	ldd	r25, Z+5	; 0x05
    301a:	9c 01       	movw	r18, r24
    301c:	2f 5f       	subi	r18, 0xFF	; 255
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	fc 01       	movw	r30, r24
    3026:	35 83       	std	Z+5, r19	; 0x05
    3028:	24 83       	std	Z+4, r18	; 0x04
          break;
    302a:	0c c0       	rjmp	.+24     	; 0x3044 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2c2>
      int origIndex = t->index;
      do {
        --t->index;
        // first check if current char works against the new current index
        if (c != t->str[t->index])
          continue;
    302c:	00 00       	nop
          t->index++;
          break;
        }

        // otherwise we just try the next index
      } while (t->index);
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	fc 01       	movw	r30, r24
    3034:	84 81       	ldd	r24, Z+4	; 0x04
    3036:	95 81       	ldd	r25, Z+5	; 0x05
      // index to 0 when we find a mismatch.
      if (t->index == 0)
        continue;

      int origIndex = t->index;
      do {
    3038:	89 2b       	or	r24, r25
    303a:	21 f0       	breq	.+8      	; 0x3044 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2c2>
    303c:	6a cf       	rjmp	.-300    	; 0x2f12 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x190>
      // the simple case is if we match, deal with that first.
      if (c == t->str[t->index]) {
        if (++t->index == t->len)
          return t - targets;
        else
          continue;
    303e:	00 00       	nop
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x2c2>
      // if not we need to walk back and see if we could have matched further
      // down the stream (ie '1112' doesn't match the first position in '11112'
      // but it will match the second position so we can't just reset the current
      // index to 0 when we find a mismatch.
      if (t->index == 0)
        continue;
    3042:	00 00       	nop
  while (1) {
    int c = timedRead();
    if (c < 0)
      return -1;

    for (struct MultiTarget *t = targets; t < targets+tCount; ++t) {
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	06 96       	adiw	r24, 0x06	; 6
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	8b 83       	std	Y+3, r24	; 0x03
    304e:	f4 ce       	rjmp	.-536    	; 0x2e38 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xb6>
      } while (t->index);
    }
  }
  // unreachable
  return -1;
}
    3050:	62 96       	adiw	r28, 0x12	; 18
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	08 95       	ret

00003062 <_ZL9toneBeginh>:
#endif



static int8_t toneBegin(uint8_t _pin)
{
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	c8 54       	subi	r28, 0x48	; 72
    306c:	d1 09       	sbc	r29, r1
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	9e 01       	movw	r18, r28
    307a:	28 5b       	subi	r18, 0xB8	; 184
    307c:	3f 4f       	sbci	r19, 0xFF	; 255
    307e:	f9 01       	movw	r30, r18
    3080:	80 83       	st	Z, r24
  int8_t _timer = -1;
    3082:	8f ef       	ldi	r24, 0xFF	; 255
    3084:	89 83       	std	Y+1, r24	; 0x01

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    3086:	1b 82       	std	Y+3, r1	; 0x03
    3088:	1a 82       	std	Y+2, r1	; 0x02
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	9b 81       	ldd	r25, Y+3	; 0x03
    308e:	18 16       	cp	r1, r24
    3090:	19 06       	cpc	r1, r25
    3092:	04 f1       	brlt	.+64     	; 0x30d4 <_ZL9toneBeginh+0x72>
    if (tone_pins[i] == _pin) {
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	80 50       	subi	r24, 0x00	; 0
    309a:	9e 4f       	sbci	r25, 0xFE	; 254
    309c:	fc 01       	movw	r30, r24
    309e:	20 81       	ld	r18, Z
    30a0:	ce 01       	movw	r24, r28
    30a2:	88 5b       	subi	r24, 0xB8	; 184
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	fc 01       	movw	r30, r24
    30a8:	80 81       	ld	r24, Z
    30aa:	28 17       	cp	r18, r24
    30ac:	69 f4       	brne	.+26     	; 0x30c8 <_ZL9toneBeginh+0x66>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	9b 81       	ldd	r25, Y+3	; 0x03
    30b2:	8f 55       	subi	r24, 0x5F	; 95
    30b4:	9c 4f       	sbci	r25, 0xFC	; 252
    30b6:	9f 83       	std	Y+7, r25	; 0x07
    30b8:	8e 83       	std	Y+6, r24	; 0x06
    30ba:	8e 81       	ldd	r24, Y+6	; 0x06
    30bc:	9f 81       	ldd	r25, Y+7	; 0x07
    30be:	fc 01       	movw	r30, r24
    30c0:	84 91       	lpm	r24, Z
    30c2:	88 87       	std	Y+8, r24	; 0x08
    30c4:	88 85       	ldd	r24, Y+8	; 0x08
    30c6:	8e c2       	rjmp	.+1308   	; 0x35e4 <_ZL9toneBeginh+0x582>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	9b 81       	ldd	r25, Y+3	; 0x03
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	9b 83       	std	Y+3, r25	; 0x03
    30d0:	8a 83       	std	Y+2, r24	; 0x02
    30d2:	db cf       	rjmp	.-74     	; 0x308a <_ZL9toneBeginh+0x28>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    30d4:	1d 82       	std	Y+5, r1	; 0x05
    30d6:	1c 82       	std	Y+4, r1	; 0x04
    30d8:	8c 81       	ldd	r24, Y+4	; 0x04
    30da:	9d 81       	ldd	r25, Y+5	; 0x05
    30dc:	18 16       	cp	r1, r24
    30de:	19 06       	cpc	r1, r25
    30e0:	3c f1       	brlt	.+78     	; 0x3130 <_ZL9toneBeginh+0xce>
    if (tone_pins[i] == 255) {
    30e2:	8c 81       	ldd	r24, Y+4	; 0x04
    30e4:	9d 81       	ldd	r25, Y+5	; 0x05
    30e6:	80 50       	subi	r24, 0x00	; 0
    30e8:	9e 4f       	sbci	r25, 0xFE	; 254
    30ea:	fc 01       	movw	r30, r24
    30ec:	80 81       	ld	r24, Z
    30ee:	8f 3f       	cpi	r24, 0xFF	; 255
    30f0:	c9 f4       	brne	.+50     	; 0x3124 <_ZL9toneBeginh+0xc2>
      tone_pins[i] = _pin;
    30f2:	8c 81       	ldd	r24, Y+4	; 0x04
    30f4:	9d 81       	ldd	r25, Y+5	; 0x05
    30f6:	80 50       	subi	r24, 0x00	; 0
    30f8:	9e 4f       	sbci	r25, 0xFE	; 254
    30fa:	9e 01       	movw	r18, r28
    30fc:	28 5b       	subi	r18, 0xB8	; 184
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	f9 01       	movw	r30, r18
    3102:	20 81       	ld	r18, Z
    3104:	fc 01       	movw	r30, r24
    3106:	20 83       	st	Z, r18
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    3108:	8c 81       	ldd	r24, Y+4	; 0x04
    310a:	9d 81       	ldd	r25, Y+5	; 0x05
    310c:	8f 55       	subi	r24, 0x5F	; 95
    310e:	9c 4f       	sbci	r25, 0xFC	; 252
    3110:	9a 87       	std	Y+10, r25	; 0x0a
    3112:	89 87       	std	Y+9, r24	; 0x09
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	9a 85       	ldd	r25, Y+10	; 0x0a
    3118:	fc 01       	movw	r30, r24
    311a:	84 91       	lpm	r24, Z
    311c:	8b 87       	std	Y+11, r24	; 0x0b
    311e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3120:	89 83       	std	Y+1, r24	; 0x01
      break;
    3122:	06 c0       	rjmp	.+12     	; 0x3130 <_ZL9toneBeginh+0xce>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    3124:	8c 81       	ldd	r24, Y+4	; 0x04
    3126:	9d 81       	ldd	r25, Y+5	; 0x05
    3128:	01 96       	adiw	r24, 0x01	; 1
    312a:	9d 83       	std	Y+5, r25	; 0x05
    312c:	8c 83       	std	Y+4, r24	; 0x04
    312e:	d4 cf       	rjmp	.-88     	; 0x30d8 <_ZL9toneBeginh+0x76>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	8f 3f       	cpi	r24, 0xFF	; 255
    3134:	09 f4       	brne	.+2      	; 0x3138 <_ZL9toneBeginh+0xd6>
    3136:	55 c2       	rjmp	.+1194   	; 0x35e2 <_ZL9toneBeginh+0x580>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	08 2e       	mov	r0, r24
    313c:	00 0c       	add	r0, r0
    313e:	99 0b       	sbc	r25, r25
    3140:	82 30       	cpi	r24, 0x02	; 2
    3142:	91 05       	cpc	r25, r1
    3144:	09 f4       	brne	.+2      	; 0x3148 <_ZL9toneBeginh+0xe6>
    3146:	c3 c0       	rjmp	.+390    	; 0x32ce <_ZL9toneBeginh+0x26c>
    3148:	83 30       	cpi	r24, 0x03	; 3
    314a:	91 05       	cpc	r25, r1
    314c:	34 f4       	brge	.+12     	; 0x315a <_ZL9toneBeginh+0xf8>
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	81 f0       	breq	.+32     	; 0x3172 <_ZL9toneBeginh+0x110>
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	09 f4       	brne	.+2      	; 0x3158 <_ZL9toneBeginh+0xf6>
    3156:	64 c0       	rjmp	.+200    	; 0x3220 <_ZL9toneBeginh+0x1be>
    3158:	44 c2       	rjmp	.+1160   	; 0x35e2 <_ZL9toneBeginh+0x580>
    315a:	84 30       	cpi	r24, 0x04	; 4
    315c:	91 05       	cpc	r25, r1
    315e:	09 f4       	brne	.+2      	; 0x3162 <_ZL9toneBeginh+0x100>
    3160:	64 c1       	rjmp	.+712    	; 0x342a <_ZL9toneBeginh+0x3c8>
    3162:	84 30       	cpi	r24, 0x04	; 4
    3164:	91 05       	cpc	r25, r1
    3166:	0c f4       	brge	.+2      	; 0x316a <_ZL9toneBeginh+0x108>
    3168:	09 c1       	rjmp	.+530    	; 0x337c <_ZL9toneBeginh+0x31a>
    316a:	05 97       	sbiw	r24, 0x05	; 5
    316c:	09 f4       	brne	.+2      	; 0x3170 <_ZL9toneBeginh+0x10e>
    316e:	b4 c1       	rjmp	.+872    	; 0x34d8 <_ZL9toneBeginh+0x476>
    3170:	38 c2       	rjmp	.+1136   	; 0x35e2 <_ZL9toneBeginh+0x580>
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    3172:	84 e4       	ldi	r24, 0x44	; 68
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	fc 01       	movw	r30, r24
    3178:	10 82       	st	Z, r1
        TCCR0B = 0;
    317a:	85 e4       	ldi	r24, 0x45	; 69
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	fc 01       	movw	r30, r24
    3180:	10 82       	st	Z, r1
        bitWrite(TCCR0A, WGM01, 1);
    3182:	84 e4       	ldi	r24, 0x44	; 68
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	24 e4       	ldi	r18, 0x44	; 68
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	f9 01       	movw	r30, r18
    318c:	20 81       	ld	r18, Z
    318e:	22 60       	ori	r18, 0x02	; 2
    3190:	fc 01       	movw	r30, r24
    3192:	20 83       	st	Z, r18
        bitWrite(TCCR0B, CS00, 1);
    3194:	85 e4       	ldi	r24, 0x45	; 69
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	25 e4       	ldi	r18, 0x45	; 69
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	f9 01       	movw	r30, r18
    319e:	20 81       	ld	r18, Z
    31a0:	21 60       	ori	r18, 0x01	; 1
    31a2:	fc 01       	movw	r30, r24
    31a4:	20 83       	st	Z, r18
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    31a6:	ce 01       	movw	r24, r28
    31a8:	88 5b       	subi	r24, 0xB8	; 184
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	fc 01       	movw	r30, r24
    31ae:	80 81       	ld	r24, Z
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	80 54       	subi	r24, 0x40	; 64
    31b6:	9c 4f       	sbci	r25, 0xFC	; 252
    31b8:	9d 87       	std	Y+13, r25	; 0x0d
    31ba:	8c 87       	std	Y+12, r24	; 0x0c
    31bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    31be:	9d 85       	ldd	r25, Y+13	; 0x0d
    31c0:	fc 01       	movw	r30, r24
    31c2:	84 91       	lpm	r24, Z
    31c4:	8e 87       	std	Y+14, r24	; 0x0e
    31c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c8:	88 2f       	mov	r24, r24
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	88 0f       	add	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	84 55       	subi	r24, 0x54	; 84
    31d2:	9c 4f       	sbci	r25, 0xFC	; 252
    31d4:	98 8b       	std	Y+16, r25	; 0x10
    31d6:	8f 87       	std	Y+15, r24	; 0x0f
    31d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31da:	98 89       	ldd	r25, Y+16	; 0x10
    31dc:	fc 01       	movw	r30, r24
    31de:	25 91       	lpm	r18, Z+
    31e0:	34 91       	lpm	r19, Z
    31e2:	cf 01       	movw	r24, r30
    31e4:	3a 8b       	std	Y+18, r19	; 0x12
    31e6:	29 8b       	std	Y+17, r18	; 0x11
    31e8:	98 8b       	std	Y+16, r25	; 0x10
    31ea:	8f 87       	std	Y+15, r24	; 0x0f
    31ec:	89 89       	ldd	r24, Y+17	; 0x11
    31ee:	9a 89       	ldd	r25, Y+18	; 0x12
    31f0:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <timer0_pin_port+0x1>
    31f4:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    31f8:	ce 01       	movw	r24, r28
    31fa:	88 5b       	subi	r24, 0xB8	; 184
    31fc:	9f 4f       	sbci	r25, 0xFF	; 255
    31fe:	fc 01       	movw	r30, r24
    3200:	80 81       	ld	r24, Z
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	8c 52       	subi	r24, 0x2C	; 44
    3208:	9c 4f       	sbci	r25, 0xFC	; 252
    320a:	9c 8b       	std	Y+20, r25	; 0x14
    320c:	8b 8b       	std	Y+19, r24	; 0x13
    320e:	8b 89       	ldd	r24, Y+19	; 0x13
    3210:	9c 89       	ldd	r25, Y+20	; 0x14
    3212:	fc 01       	movw	r30, r24
    3214:	84 91       	lpm	r24, Z
    3216:	8d 8b       	std	Y+21, r24	; 0x15
    3218:	8d 89       	ldd	r24, Y+21	; 0x15
    321a:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <timer0_pin_mask>
        break;
    321e:	e1 c1       	rjmp	.+962    	; 0x35e2 <_ZL9toneBeginh+0x580>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    3220:	80 e8       	ldi	r24, 0x80	; 128
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	fc 01       	movw	r30, r24
    3226:	10 82       	st	Z, r1
        TCCR1B = 0;
    3228:	81 e8       	ldi	r24, 0x81	; 129
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	fc 01       	movw	r30, r24
    322e:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
    3230:	81 e8       	ldi	r24, 0x81	; 129
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	21 e8       	ldi	r18, 0x81	; 129
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	f9 01       	movw	r30, r18
    323a:	20 81       	ld	r18, Z
    323c:	28 60       	ori	r18, 0x08	; 8
    323e:	fc 01       	movw	r30, r24
    3240:	20 83       	st	Z, r18
        bitWrite(TCCR1B, CS10, 1);
    3242:	81 e8       	ldi	r24, 0x81	; 129
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	21 e8       	ldi	r18, 0x81	; 129
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	f9 01       	movw	r30, r18
    324c:	20 81       	ld	r18, Z
    324e:	21 60       	ori	r18, 0x01	; 1
    3250:	fc 01       	movw	r30, r24
    3252:	20 83       	st	Z, r18
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    3254:	ce 01       	movw	r24, r28
    3256:	88 5b       	subi	r24, 0xB8	; 184
    3258:	9f 4f       	sbci	r25, 0xFF	; 255
    325a:	fc 01       	movw	r30, r24
    325c:	80 81       	ld	r24, Z
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	80 54       	subi	r24, 0x40	; 64
    3264:	9c 4f       	sbci	r25, 0xFC	; 252
    3266:	9f 8b       	std	Y+23, r25	; 0x17
    3268:	8e 8b       	std	Y+22, r24	; 0x16
    326a:	8e 89       	ldd	r24, Y+22	; 0x16
    326c:	9f 89       	ldd	r25, Y+23	; 0x17
    326e:	fc 01       	movw	r30, r24
    3270:	84 91       	lpm	r24, Z
    3272:	88 8f       	std	Y+24, r24	; 0x18
    3274:	88 8d       	ldd	r24, Y+24	; 0x18
    3276:	88 2f       	mov	r24, r24
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	84 55       	subi	r24, 0x54	; 84
    3280:	9c 4f       	sbci	r25, 0xFC	; 252
    3282:	9a 8f       	std	Y+26, r25	; 0x1a
    3284:	89 8f       	std	Y+25, r24	; 0x19
    3286:	89 8d       	ldd	r24, Y+25	; 0x19
    3288:	9a 8d       	ldd	r25, Y+26	; 0x1a
    328a:	fc 01       	movw	r30, r24
    328c:	25 91       	lpm	r18, Z+
    328e:	34 91       	lpm	r19, Z
    3290:	cf 01       	movw	r24, r30
    3292:	3c 8f       	std	Y+28, r19	; 0x1c
    3294:	2b 8f       	std	Y+27, r18	; 0x1b
    3296:	9a 8f       	std	Y+26, r25	; 0x1a
    3298:	89 8f       	std	Y+25, r24	; 0x19
    329a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    329c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    329e:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <timer1_pin_port+0x1>
    32a2:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    32a6:	ce 01       	movw	r24, r28
    32a8:	88 5b       	subi	r24, 0xB8	; 184
    32aa:	9f 4f       	sbci	r25, 0xFF	; 255
    32ac:	fc 01       	movw	r30, r24
    32ae:	80 81       	ld	r24, Z
    32b0:	88 2f       	mov	r24, r24
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	8c 52       	subi	r24, 0x2C	; 44
    32b6:	9c 4f       	sbci	r25, 0xFC	; 252
    32b8:	9e 8f       	std	Y+30, r25	; 0x1e
    32ba:	8d 8f       	std	Y+29, r24	; 0x1d
    32bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32c0:	fc 01       	movw	r30, r24
    32c2:	84 91       	lpm	r24, Z
    32c4:	8f 8f       	std	Y+31, r24	; 0x1f
    32c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c8:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <timer1_pin_mask>
        break;
    32cc:	8a c1       	rjmp	.+788    	; 0x35e2 <_ZL9toneBeginh+0x580>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    32ce:	80 eb       	ldi	r24, 0xB0	; 176
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	fc 01       	movw	r30, r24
    32d4:	10 82       	st	Z, r1
        TCCR2B = 0;
    32d6:	81 eb       	ldi	r24, 0xB1	; 177
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	fc 01       	movw	r30, r24
    32dc:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
    32de:	80 eb       	ldi	r24, 0xB0	; 176
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	20 eb       	ldi	r18, 0xB0	; 176
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	f9 01       	movw	r30, r18
    32e8:	20 81       	ld	r18, Z
    32ea:	22 60       	ori	r18, 0x02	; 2
    32ec:	fc 01       	movw	r30, r24
    32ee:	20 83       	st	Z, r18
        bitWrite(TCCR2B, CS20, 1);
    32f0:	81 eb       	ldi	r24, 0xB1	; 177
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	21 eb       	ldi	r18, 0xB1	; 177
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	f9 01       	movw	r30, r18
    32fa:	20 81       	ld	r18, Z
    32fc:	21 60       	ori	r18, 0x01	; 1
    32fe:	fc 01       	movw	r30, r24
    3300:	20 83       	st	Z, r18
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    3302:	ce 01       	movw	r24, r28
    3304:	88 5b       	subi	r24, 0xB8	; 184
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	fc 01       	movw	r30, r24
    330a:	80 81       	ld	r24, Z
    330c:	88 2f       	mov	r24, r24
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	80 54       	subi	r24, 0x40	; 64
    3312:	9c 4f       	sbci	r25, 0xFC	; 252
    3314:	99 a3       	std	Y+33, r25	; 0x21
    3316:	88 a3       	std	Y+32, r24	; 0x20
    3318:	88 a1       	ldd	r24, Y+32	; 0x20
    331a:	99 a1       	ldd	r25, Y+33	; 0x21
    331c:	fc 01       	movw	r30, r24
    331e:	84 91       	lpm	r24, Z
    3320:	8a a3       	std	Y+34, r24	; 0x22
    3322:	8a a1       	ldd	r24, Y+34	; 0x22
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	84 55       	subi	r24, 0x54	; 84
    332e:	9c 4f       	sbci	r25, 0xFC	; 252
    3330:	9c a3       	std	Y+36, r25	; 0x24
    3332:	8b a3       	std	Y+35, r24	; 0x23
    3334:	8b a1       	ldd	r24, Y+35	; 0x23
    3336:	9c a1       	ldd	r25, Y+36	; 0x24
    3338:	fc 01       	movw	r30, r24
    333a:	25 91       	lpm	r18, Z+
    333c:	34 91       	lpm	r19, Z
    333e:	cf 01       	movw	r24, r30
    3340:	3e a3       	std	Y+38, r19	; 0x26
    3342:	2d a3       	std	Y+37, r18	; 0x25
    3344:	9c a3       	std	Y+36, r25	; 0x24
    3346:	8b a3       	std	Y+35, r24	; 0x23
    3348:	8d a1       	ldd	r24, Y+37	; 0x25
    334a:	9e a1       	ldd	r25, Y+38	; 0x26
    334c:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <timer2_pin_port+0x1>
    3350:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
    3354:	ce 01       	movw	r24, r28
    3356:	88 5b       	subi	r24, 0xB8	; 184
    3358:	9f 4f       	sbci	r25, 0xFF	; 255
    335a:	fc 01       	movw	r30, r24
    335c:	80 81       	ld	r24, Z
    335e:	88 2f       	mov	r24, r24
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	8c 52       	subi	r24, 0x2C	; 44
    3364:	9c 4f       	sbci	r25, 0xFC	; 252
    3366:	98 a7       	std	Y+40, r25	; 0x28
    3368:	8f a3       	std	Y+39, r24	; 0x27
    336a:	8f a1       	ldd	r24, Y+39	; 0x27
    336c:	98 a5       	ldd	r25, Y+40	; 0x28
    336e:	fc 01       	movw	r30, r24
    3370:	84 91       	lpm	r24, Z
    3372:	89 a7       	std	Y+41, r24	; 0x29
    3374:	89 a5       	ldd	r24, Y+41	; 0x29
    3376:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <timer2_pin_mask>
        break;
    337a:	33 c1       	rjmp	.+614    	; 0x35e2 <_ZL9toneBeginh+0x580>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    337c:	80 e9       	ldi	r24, 0x90	; 144
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	fc 01       	movw	r30, r24
    3382:	10 82       	st	Z, r1
        TCCR3B = 0;
    3384:	81 e9       	ldi	r24, 0x91	; 145
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	fc 01       	movw	r30, r24
    338a:	10 82       	st	Z, r1
        bitWrite(TCCR3B, WGM32, 1);
    338c:	81 e9       	ldi	r24, 0x91	; 145
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	21 e9       	ldi	r18, 0x91	; 145
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	f9 01       	movw	r30, r18
    3396:	20 81       	ld	r18, Z
    3398:	28 60       	ori	r18, 0x08	; 8
    339a:	fc 01       	movw	r30, r24
    339c:	20 83       	st	Z, r18
        bitWrite(TCCR3B, CS30, 1);
    339e:	81 e9       	ldi	r24, 0x91	; 145
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	21 e9       	ldi	r18, 0x91	; 145
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	f9 01       	movw	r30, r18
    33a8:	20 81       	ld	r18, Z
    33aa:	21 60       	ori	r18, 0x01	; 1
    33ac:	fc 01       	movw	r30, r24
    33ae:	20 83       	st	Z, r18
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    33b0:	ce 01       	movw	r24, r28
    33b2:	88 5b       	subi	r24, 0xB8	; 184
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	fc 01       	movw	r30, r24
    33b8:	80 81       	ld	r24, Z
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	80 54       	subi	r24, 0x40	; 64
    33c0:	9c 4f       	sbci	r25, 0xFC	; 252
    33c2:	9b a7       	std	Y+43, r25	; 0x2b
    33c4:	8a a7       	std	Y+42, r24	; 0x2a
    33c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    33c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    33ca:	fc 01       	movw	r30, r24
    33cc:	84 91       	lpm	r24, Z
    33ce:	8c a7       	std	Y+44, r24	; 0x2c
    33d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	84 55       	subi	r24, 0x54	; 84
    33dc:	9c 4f       	sbci	r25, 0xFC	; 252
    33de:	9e a7       	std	Y+46, r25	; 0x2e
    33e0:	8d a7       	std	Y+45, r24	; 0x2d
    33e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    33e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    33e6:	fc 01       	movw	r30, r24
    33e8:	25 91       	lpm	r18, Z+
    33ea:	34 91       	lpm	r19, Z
    33ec:	cf 01       	movw	r24, r30
    33ee:	38 ab       	std	Y+48, r19	; 0x30
    33f0:	2f a7       	std	Y+47, r18	; 0x2f
    33f2:	9e a7       	std	Y+46, r25	; 0x2e
    33f4:	8d a7       	std	Y+45, r24	; 0x2d
    33f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f8:	98 a9       	ldd	r25, Y+48	; 0x30
    33fa:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <timer3_pin_port+0x1>
    33fe:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <timer3_pin_port>
        timer3_pin_mask = digitalPinToBitMask(_pin);
    3402:	ce 01       	movw	r24, r28
    3404:	88 5b       	subi	r24, 0xB8	; 184
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	fc 01       	movw	r30, r24
    340a:	80 81       	ld	r24, Z
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	8c 52       	subi	r24, 0x2C	; 44
    3412:	9c 4f       	sbci	r25, 0xFC	; 252
    3414:	9a ab       	std	Y+50, r25	; 0x32
    3416:	89 ab       	std	Y+49, r24	; 0x31
    3418:	89 a9       	ldd	r24, Y+49	; 0x31
    341a:	9a a9       	ldd	r25, Y+50	; 0x32
    341c:	fc 01       	movw	r30, r24
    341e:	84 91       	lpm	r24, Z
    3420:	8b ab       	std	Y+51, r24	; 0x33
    3422:	8b a9       	ldd	r24, Y+51	; 0x33
    3424:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <timer3_pin_mask>
        break;
    3428:	dc c0       	rjmp	.+440    	; 0x35e2 <_ZL9toneBeginh+0x580>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    342a:	80 ea       	ldi	r24, 0xA0	; 160
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	fc 01       	movw	r30, r24
    3430:	10 82       	st	Z, r1
        TCCR4B = 0;
    3432:	81 ea       	ldi	r24, 0xA1	; 161
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	fc 01       	movw	r30, r24
    3438:	10 82       	st	Z, r1
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    343a:	81 ea       	ldi	r24, 0xA1	; 161
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	21 ea       	ldi	r18, 0xA1	; 161
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	f9 01       	movw	r30, r18
    3444:	20 81       	ld	r18, Z
    3446:	28 60       	ori	r18, 0x08	; 8
    3448:	fc 01       	movw	r30, r24
    344a:	20 83       	st	Z, r18
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    344c:	81 ea       	ldi	r24, 0xA1	; 161
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	21 ea       	ldi	r18, 0xA1	; 161
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	f9 01       	movw	r30, r18
    3456:	20 81       	ld	r18, Z
    3458:	21 60       	ori	r18, 0x01	; 1
    345a:	fc 01       	movw	r30, r24
    345c:	20 83       	st	Z, r18
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    345e:	ce 01       	movw	r24, r28
    3460:	88 5b       	subi	r24, 0xB8	; 184
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	fc 01       	movw	r30, r24
    3466:	80 81       	ld	r24, Z
    3468:	88 2f       	mov	r24, r24
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	80 54       	subi	r24, 0x40	; 64
    346e:	9c 4f       	sbci	r25, 0xFC	; 252
    3470:	9d ab       	std	Y+53, r25	; 0x35
    3472:	8c ab       	std	Y+52, r24	; 0x34
    3474:	8c a9       	ldd	r24, Y+52	; 0x34
    3476:	9d a9       	ldd	r25, Y+53	; 0x35
    3478:	fc 01       	movw	r30, r24
    347a:	84 91       	lpm	r24, Z
    347c:	8e ab       	std	Y+54, r24	; 0x36
    347e:	8e a9       	ldd	r24, Y+54	; 0x36
    3480:	88 2f       	mov	r24, r24
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	84 55       	subi	r24, 0x54	; 84
    348a:	9c 4f       	sbci	r25, 0xFC	; 252
    348c:	98 af       	std	Y+56, r25	; 0x38
    348e:	8f ab       	std	Y+55, r24	; 0x37
    3490:	8f a9       	ldd	r24, Y+55	; 0x37
    3492:	98 ad       	ldd	r25, Y+56	; 0x38
    3494:	fc 01       	movw	r30, r24
    3496:	25 91       	lpm	r18, Z+
    3498:	34 91       	lpm	r19, Z
    349a:	cf 01       	movw	r24, r30
    349c:	3a af       	std	Y+58, r19	; 0x3a
    349e:	29 af       	std	Y+57, r18	; 0x39
    34a0:	98 af       	std	Y+56, r25	; 0x38
    34a2:	8f ab       	std	Y+55, r24	; 0x37
    34a4:	89 ad       	ldd	r24, Y+57	; 0x39
    34a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    34a8:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <timer4_pin_port+0x1>
    34ac:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <timer4_pin_port>
        timer4_pin_mask = digitalPinToBitMask(_pin);
    34b0:	ce 01       	movw	r24, r28
    34b2:	88 5b       	subi	r24, 0xB8	; 184
    34b4:	9f 4f       	sbci	r25, 0xFF	; 255
    34b6:	fc 01       	movw	r30, r24
    34b8:	80 81       	ld	r24, Z
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	8c 52       	subi	r24, 0x2C	; 44
    34c0:	9c 4f       	sbci	r25, 0xFC	; 252
    34c2:	9c af       	std	Y+60, r25	; 0x3c
    34c4:	8b af       	std	Y+59, r24	; 0x3b
    34c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    34ca:	fc 01       	movw	r30, r24
    34cc:	84 91       	lpm	r24, Z
    34ce:	8d af       	std	Y+61, r24	; 0x3d
    34d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    34d2:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <timer4_pin_mask>
        break;
    34d6:	85 c0       	rjmp	.+266    	; 0x35e2 <_ZL9toneBeginh+0x580>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    34d8:	80 e2       	ldi	r24, 0x20	; 32
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	fc 01       	movw	r30, r24
    34de:	10 82       	st	Z, r1
        TCCR5B = 0;
    34e0:	81 e2       	ldi	r24, 0x21	; 33
    34e2:	91 e0       	ldi	r25, 0x01	; 1
    34e4:	fc 01       	movw	r30, r24
    34e6:	10 82       	st	Z, r1
        bitWrite(TCCR5B, WGM52, 1);
    34e8:	81 e2       	ldi	r24, 0x21	; 33
    34ea:	91 e0       	ldi	r25, 0x01	; 1
    34ec:	21 e2       	ldi	r18, 0x21	; 33
    34ee:	31 e0       	ldi	r19, 0x01	; 1
    34f0:	f9 01       	movw	r30, r18
    34f2:	20 81       	ld	r18, Z
    34f4:	28 60       	ori	r18, 0x08	; 8
    34f6:	fc 01       	movw	r30, r24
    34f8:	20 83       	st	Z, r18
        bitWrite(TCCR5B, CS50, 1);
    34fa:	81 e2       	ldi	r24, 0x21	; 33
    34fc:	91 e0       	ldi	r25, 0x01	; 1
    34fe:	21 e2       	ldi	r18, 0x21	; 33
    3500:	31 e0       	ldi	r19, 0x01	; 1
    3502:	f9 01       	movw	r30, r18
    3504:	20 81       	ld	r18, Z
    3506:	21 60       	ori	r18, 0x01	; 1
    3508:	fc 01       	movw	r30, r24
    350a:	20 83       	st	Z, r18
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    350c:	ce 01       	movw	r24, r28
    350e:	88 5b       	subi	r24, 0xB8	; 184
    3510:	9f 4f       	sbci	r25, 0xFF	; 255
    3512:	fc 01       	movw	r30, r24
    3514:	80 81       	ld	r24, Z
    3516:	88 2f       	mov	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	80 54       	subi	r24, 0x40	; 64
    351c:	9c 4f       	sbci	r25, 0xFC	; 252
    351e:	9f af       	std	Y+63, r25	; 0x3f
    3520:	8e af       	std	Y+62, r24	; 0x3e
    3522:	8e ad       	ldd	r24, Y+62	; 0x3e
    3524:	9f ad       	ldd	r25, Y+63	; 0x3f
    3526:	fc 01       	movw	r30, r24
    3528:	24 91       	lpm	r18, Z
    352a:	ce 01       	movw	r24, r28
    352c:	80 5c       	subi	r24, 0xC0	; 192
    352e:	9f 4f       	sbci	r25, 0xFF	; 255
    3530:	fc 01       	movw	r30, r24
    3532:	20 83       	st	Z, r18
    3534:	ce 01       	movw	r24, r28
    3536:	80 5c       	subi	r24, 0xC0	; 192
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	fc 01       	movw	r30, r24
    353c:	80 81       	ld	r24, Z
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	9c 01       	movw	r18, r24
    3548:	24 55       	subi	r18, 0x54	; 84
    354a:	3c 4f       	sbci	r19, 0xFC	; 252
    354c:	ce 01       	movw	r24, r28
    354e:	8f 5b       	subi	r24, 0xBF	; 191
    3550:	9f 4f       	sbci	r25, 0xFF	; 255
    3552:	fc 01       	movw	r30, r24
    3554:	31 83       	std	Z+1, r19	; 0x01
    3556:	20 83       	st	Z, r18
    3558:	ce 01       	movw	r24, r28
    355a:	8f 5b       	subi	r24, 0xBF	; 191
    355c:	9f 4f       	sbci	r25, 0xFF	; 255
    355e:	fc 01       	movw	r30, r24
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	fc 01       	movw	r30, r24
    3566:	45 91       	lpm	r20, Z+
    3568:	54 91       	lpm	r21, Z
    356a:	cf 01       	movw	r24, r30
    356c:	9e 01       	movw	r18, r28
    356e:	2d 5b       	subi	r18, 0xBD	; 189
    3570:	3f 4f       	sbci	r19, 0xFF	; 255
    3572:	f9 01       	movw	r30, r18
    3574:	51 83       	std	Z+1, r21	; 0x01
    3576:	40 83       	st	Z, r20
    3578:	9e 01       	movw	r18, r28
    357a:	2f 5b       	subi	r18, 0xBF	; 191
    357c:	3f 4f       	sbci	r19, 0xFF	; 255
    357e:	f9 01       	movw	r30, r18
    3580:	91 83       	std	Z+1, r25	; 0x01
    3582:	80 83       	st	Z, r24
    3584:	ce 01       	movw	r24, r28
    3586:	8d 5b       	subi	r24, 0xBD	; 189
    3588:	9f 4f       	sbci	r25, 0xFF	; 255
    358a:	fc 01       	movw	r30, r24
    358c:	80 81       	ld	r24, Z
    358e:	91 81       	ldd	r25, Z+1	; 0x01
    3590:	90 93 44 06 	sts	0x0644, r25	; 0x800644 <timer5_pin_port+0x1>
    3594:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <timer5_pin_port>
        timer5_pin_mask = digitalPinToBitMask(_pin);
    3598:	ce 01       	movw	r24, r28
    359a:	88 5b       	subi	r24, 0xB8	; 184
    359c:	9f 4f       	sbci	r25, 0xFF	; 255
    359e:	fc 01       	movw	r30, r24
    35a0:	80 81       	ld	r24, Z
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	9c 01       	movw	r18, r24
    35a8:	2c 52       	subi	r18, 0x2C	; 44
    35aa:	3c 4f       	sbci	r19, 0xFC	; 252
    35ac:	ce 01       	movw	r24, r28
    35ae:	8b 5b       	subi	r24, 0xBB	; 187
    35b0:	9f 4f       	sbci	r25, 0xFF	; 255
    35b2:	fc 01       	movw	r30, r24
    35b4:	31 83       	std	Z+1, r19	; 0x01
    35b6:	20 83       	st	Z, r18
    35b8:	ce 01       	movw	r24, r28
    35ba:	8b 5b       	subi	r24, 0xBB	; 187
    35bc:	9f 4f       	sbci	r25, 0xFF	; 255
    35be:	fc 01       	movw	r30, r24
    35c0:	80 81       	ld	r24, Z
    35c2:	91 81       	ldd	r25, Z+1	; 0x01
    35c4:	fc 01       	movw	r30, r24
    35c6:	24 91       	lpm	r18, Z
    35c8:	ce 01       	movw	r24, r28
    35ca:	89 5b       	subi	r24, 0xB9	; 185
    35cc:	9f 4f       	sbci	r25, 0xFF	; 255
    35ce:	fc 01       	movw	r30, r24
    35d0:	20 83       	st	Z, r18
    35d2:	ce 01       	movw	r24, r28
    35d4:	89 5b       	subi	r24, 0xB9	; 185
    35d6:	9f 4f       	sbci	r25, 0xFF	; 255
    35d8:	fc 01       	movw	r30, r24
    35da:	80 81       	ld	r24, Z
    35dc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <timer5_pin_mask>
        break;
    35e0:	00 00       	nop
      #endif
    }
  }

  return _timer;
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    35e4:	c8 5b       	subi	r28, 0xB8	; 184
    35e6:	df 4f       	sbci	r29, 0xFF	; 255
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	08 95       	ret

000035f8 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	61 97       	sbiw	r28, 0x11	; 17
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	8b 87       	std	Y+11, r24	; 0x0b
    360e:	7d 87       	std	Y+13, r23	; 0x0d
    3610:	6c 87       	std	Y+12, r22	; 0x0c
    3612:	2e 87       	std	Y+14, r18	; 0x0e
    3614:	3f 87       	std	Y+15, r19	; 0x0f
    3616:	48 8b       	std	Y+16, r20	; 0x10
    3618:	59 8b       	std	Y+17, r21	; 0x11
  uint8_t prescalarbits = 0b001;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	89 83       	std	Y+1, r24	; 0x01
  long toggle_count = 0;
    361e:	1a 82       	std	Y+2, r1	; 0x02
    3620:	1b 82       	std	Y+3, r1	; 0x03
    3622:	1c 82       	std	Y+4, r1	; 0x04
    3624:	1d 82       	std	Y+5, r1	; 0x05
  uint32_t ocr = 0;
    3626:	1e 82       	std	Y+6, r1	; 0x06
    3628:	1f 82       	std	Y+7, r1	; 0x07
    362a:	18 86       	std	Y+8, r1	; 0x08
    362c:	19 86       	std	Y+9, r1	; 0x09
  int8_t _timer;

  _timer = toneBegin(_pin);
    362e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3630:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZL9toneBeginh>
    3634:	8a 87       	std	Y+10, r24	; 0x0a

  if (_timer >= 0)
    3636:	8a 85       	ldd	r24, Y+10	; 0x0a
    3638:	88 23       	and	r24, r24
    363a:	0c f4       	brge	.+2      	; 0x363e <_Z4tonehjm+0x46>
    363c:	99 c2       	rjmp	.+1330   	; 0x3b70 <_Z4tonehjm+0x578>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	8b 85       	ldd	r24, Y+11	; 0x0b
    3642:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    3646:	8a 85       	ldd	r24, Y+10	; 0x0a
    3648:	88 23       	and	r24, r24
    364a:	21 f0       	breq	.+8      	; 0x3654 <_Z4tonehjm+0x5c>
    364c:	8a 85       	ldd	r24, Y+10	; 0x0a
    364e:	82 30       	cpi	r24, 0x02	; 2
    3650:	09 f0       	breq	.+2      	; 0x3654 <_Z4tonehjm+0x5c>
    3652:	22 c1       	rjmp	.+580    	; 0x3898 <_Z4tonehjm+0x2a0>
    {
      ocr = F_CPU / frequency / 2 - 1;
    3654:	8c 85       	ldd	r24, Y+12	; 0x0c
    3656:	9d 85       	ldd	r25, Y+13	; 0x0d
    3658:	9c 01       	movw	r18, r24
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	92 e1       	ldi	r25, 0x12	; 18
    3662:	aa e7       	ldi	r26, 0x7A	; 122
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    366e:	da 01       	movw	r26, r20
    3670:	c9 01       	movw	r24, r18
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	a1 09       	sbc	r26, r1
    3676:	b1 09       	sbc	r27, r1
    3678:	8e 83       	std	Y+6, r24	; 0x06
    367a:	9f 83       	std	Y+7, r25	; 0x07
    367c:	a8 87       	std	Y+8, r26	; 0x08
    367e:	b9 87       	std	Y+9, r27	; 0x09
      prescalarbits = 0b001;  // ck/1: same for both timers
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	89 83       	std	Y+1, r24	; 0x01
      if (ocr > 255)
    3684:	8e 81       	ldd	r24, Y+6	; 0x06
    3686:	9f 81       	ldd	r25, Y+7	; 0x07
    3688:	a8 85       	ldd	r26, Y+8	; 0x08
    368a:	b9 85       	ldd	r27, Y+9	; 0x09
    368c:	8f 3f       	cpi	r24, 0xFF	; 255
    368e:	91 05       	cpc	r25, r1
    3690:	a1 05       	cpc	r26, r1
    3692:	b1 05       	cpc	r27, r1
    3694:	09 f0       	breq	.+2      	; 0x3698 <_Z4tonehjm+0xa0>
    3696:	08 f4       	brcc	.+2      	; 0x369a <_Z4tonehjm+0xa2>
    3698:	e2 c0       	rjmp	.+452    	; 0x385e <_Z4tonehjm+0x266>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    369a:	8c 85       	ldd	r24, Y+12	; 0x0c
    369c:	9d 85       	ldd	r25, Y+13	; 0x0d
    369e:	9c 01       	movw	r18, r24
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	50 e0       	ldi	r21, 0x00	; 0
    36a4:	80 e4       	ldi	r24, 0x40	; 64
    36a6:	92 e4       	ldi	r25, 0x42	; 66
    36a8:	af e0       	ldi	r26, 0x0F	; 15
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	bc 01       	movw	r22, r24
    36ae:	cd 01       	movw	r24, r26
    36b0:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    36b4:	da 01       	movw	r26, r20
    36b6:	c9 01       	movw	r24, r18
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	a1 09       	sbc	r26, r1
    36bc:	b1 09       	sbc	r27, r1
    36be:	8e 83       	std	Y+6, r24	; 0x06
    36c0:	9f 83       	std	Y+7, r25	; 0x07
    36c2:	a8 87       	std	Y+8, r26	; 0x08
    36c4:	b9 87       	std	Y+9, r27	; 0x09
        prescalarbits = 0b010;  // ck/8: same for both timers
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	89 83       	std	Y+1, r24	; 0x01

        if (_timer == 2 && ocr > 255)
    36ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    36cc:	82 30       	cpi	r24, 0x02	; 2
    36ce:	11 f5       	brne	.+68     	; 0x3714 <_Z4tonehjm+0x11c>
    36d0:	8e 81       	ldd	r24, Y+6	; 0x06
    36d2:	9f 81       	ldd	r25, Y+7	; 0x07
    36d4:	a8 85       	ldd	r26, Y+8	; 0x08
    36d6:	b9 85       	ldd	r27, Y+9	; 0x09
    36d8:	8f 3f       	cpi	r24, 0xFF	; 255
    36da:	91 05       	cpc	r25, r1
    36dc:	a1 05       	cpc	r26, r1
    36de:	b1 05       	cpc	r27, r1
    36e0:	c9 f0       	breq	.+50     	; 0x3714 <_Z4tonehjm+0x11c>
    36e2:	c0 f0       	brcs	.+48     	; 0x3714 <_Z4tonehjm+0x11c>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    36e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    36e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    36e8:	9c 01       	movw	r18, r24
    36ea:	40 e0       	ldi	r20, 0x00	; 0
    36ec:	50 e0       	ldi	r21, 0x00	; 0
    36ee:	80 e9       	ldi	r24, 0x90	; 144
    36f0:	90 ed       	ldi	r25, 0xD0	; 208
    36f2:	a3 e0       	ldi	r26, 0x03	; 3
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    36fe:	da 01       	movw	r26, r20
    3700:	c9 01       	movw	r24, r18
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	a1 09       	sbc	r26, r1
    3706:	b1 09       	sbc	r27, r1
    3708:	8e 83       	std	Y+6, r24	; 0x06
    370a:	9f 83       	std	Y+7, r25	; 0x07
    370c:	a8 87       	std	Y+8, r26	; 0x08
    370e:	b9 87       	std	Y+9, r27	; 0x09
          prescalarbits = 0b011;
    3710:	83 e0       	ldi	r24, 0x03	; 3
    3712:	89 83       	std	Y+1, r24	; 0x01
        }

        if (ocr > 255)
    3714:	8e 81       	ldd	r24, Y+6	; 0x06
    3716:	9f 81       	ldd	r25, Y+7	; 0x07
    3718:	a8 85       	ldd	r26, Y+8	; 0x08
    371a:	b9 85       	ldd	r27, Y+9	; 0x09
    371c:	8f 3f       	cpi	r24, 0xFF	; 255
    371e:	91 05       	cpc	r25, r1
    3720:	a1 05       	cpc	r26, r1
    3722:	b1 05       	cpc	r27, r1
    3724:	09 f0       	breq	.+2      	; 0x3728 <_Z4tonehjm+0x130>
    3726:	08 f4       	brcc	.+2      	; 0x372a <_Z4tonehjm+0x132>
    3728:	9a c0       	rjmp	.+308    	; 0x385e <_Z4tonehjm+0x266>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    372a:	8c 85       	ldd	r24, Y+12	; 0x0c
    372c:	9d 85       	ldd	r25, Y+13	; 0x0d
    372e:	9c 01       	movw	r18, r24
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	88 e4       	ldi	r24, 0x48	; 72
    3736:	98 ee       	ldi	r25, 0xE8	; 232
    3738:	a1 e0       	ldi	r26, 0x01	; 1
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    3744:	da 01       	movw	r26, r20
    3746:	c9 01       	movw	r24, r18
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	a1 09       	sbc	r26, r1
    374c:	b1 09       	sbc	r27, r1
    374e:	8e 83       	std	Y+6, r24	; 0x06
    3750:	9f 83       	std	Y+7, r25	; 0x07
    3752:	a8 87       	std	Y+8, r26	; 0x08
    3754:	b9 87       	std	Y+9, r27	; 0x09
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    3756:	8a 85       	ldd	r24, Y+10	; 0x0a
    3758:	88 23       	and	r24, r24
    375a:	11 f4       	brne	.+4      	; 0x3760 <_Z4tonehjm+0x168>
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	01 c0       	rjmp	.+2      	; 0x3762 <_Z4tonehjm+0x16a>
    3760:	84 e0       	ldi	r24, 0x04	; 4
    3762:	89 83       	std	Y+1, r24	; 0x01

          if (_timer == 2 && ocr > 255)
    3764:	8a 85       	ldd	r24, Y+10	; 0x0a
    3766:	82 30       	cpi	r24, 0x02	; 2
    3768:	11 f5       	brne	.+68     	; 0x37ae <_Z4tonehjm+0x1b6>
    376a:	8e 81       	ldd	r24, Y+6	; 0x06
    376c:	9f 81       	ldd	r25, Y+7	; 0x07
    376e:	a8 85       	ldd	r26, Y+8	; 0x08
    3770:	b9 85       	ldd	r27, Y+9	; 0x09
    3772:	8f 3f       	cpi	r24, 0xFF	; 255
    3774:	91 05       	cpc	r25, r1
    3776:	a1 05       	cpc	r26, r1
    3778:	b1 05       	cpc	r27, r1
    377a:	c9 f0       	breq	.+50     	; 0x37ae <_Z4tonehjm+0x1b6>
    377c:	c0 f0       	brcs	.+48     	; 0x37ae <_Z4tonehjm+0x1b6>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    377e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3780:	9d 85       	ldd	r25, Y+13	; 0x0d
    3782:	9c 01       	movw	r18, r24
    3784:	40 e0       	ldi	r20, 0x00	; 0
    3786:	50 e0       	ldi	r21, 0x00	; 0
    3788:	84 e2       	ldi	r24, 0x24	; 36
    378a:	94 ef       	ldi	r25, 0xF4	; 244
    378c:	a0 e0       	ldi	r26, 0x00	; 0
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	bc 01       	movw	r22, r24
    3792:	cd 01       	movw	r24, r26
    3794:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    3798:	da 01       	movw	r26, r20
    379a:	c9 01       	movw	r24, r18
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	a1 09       	sbc	r26, r1
    37a0:	b1 09       	sbc	r27, r1
    37a2:	8e 83       	std	Y+6, r24	; 0x06
    37a4:	9f 83       	std	Y+7, r25	; 0x07
    37a6:	a8 87       	std	Y+8, r26	; 0x08
    37a8:	b9 87       	std	Y+9, r27	; 0x09
            prescalarbits = 0b101;
    37aa:	85 e0       	ldi	r24, 0x05	; 5
    37ac:	89 83       	std	Y+1, r24	; 0x01
          }

          if (ocr > 255)
    37ae:	8e 81       	ldd	r24, Y+6	; 0x06
    37b0:	9f 81       	ldd	r25, Y+7	; 0x07
    37b2:	a8 85       	ldd	r26, Y+8	; 0x08
    37b4:	b9 85       	ldd	r27, Y+9	; 0x09
    37b6:	8f 3f       	cpi	r24, 0xFF	; 255
    37b8:	91 05       	cpc	r25, r1
    37ba:	a1 05       	cpc	r26, r1
    37bc:	b1 05       	cpc	r27, r1
    37be:	09 f0       	breq	.+2      	; 0x37c2 <_Z4tonehjm+0x1ca>
    37c0:	08 f4       	brcc	.+2      	; 0x37c4 <_Z4tonehjm+0x1cc>
    37c2:	4d c0       	rjmp	.+154    	; 0x385e <_Z4tonehjm+0x266>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    37c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    37c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    37c8:	9c 01       	movw	r18, r24
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	82 e1       	ldi	r24, 0x12	; 18
    37d0:	9a e7       	ldi	r25, 0x7A	; 122
    37d2:	a0 e0       	ldi	r26, 0x00	; 0
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    37de:	da 01       	movw	r26, r20
    37e0:	c9 01       	movw	r24, r18
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	a1 09       	sbc	r26, r1
    37e6:	b1 09       	sbc	r27, r1
    37e8:	8e 83       	std	Y+6, r24	; 0x06
    37ea:	9f 83       	std	Y+7, r25	; 0x07
    37ec:	a8 87       	std	Y+8, r26	; 0x08
    37ee:	b9 87       	std	Y+9, r27	; 0x09
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    37f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    37f2:	88 23       	and	r24, r24
    37f4:	11 f4       	brne	.+4      	; 0x37fa <_Z4tonehjm+0x202>
    37f6:	84 e0       	ldi	r24, 0x04	; 4
    37f8:	01 c0       	rjmp	.+2      	; 0x37fc <_Z4tonehjm+0x204>
    37fa:	86 e0       	ldi	r24, 0x06	; 6
    37fc:	89 83       	std	Y+1, r24	; 0x01
            if (ocr > 255)
    37fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3800:	9f 81       	ldd	r25, Y+7	; 0x07
    3802:	a8 85       	ldd	r26, Y+8	; 0x08
    3804:	b9 85       	ldd	r27, Y+9	; 0x09
    3806:	8f 3f       	cpi	r24, 0xFF	; 255
    3808:	91 05       	cpc	r25, r1
    380a:	a1 05       	cpc	r26, r1
    380c:	b1 05       	cpc	r27, r1
    380e:	39 f1       	breq	.+78     	; 0x385e <_Z4tonehjm+0x266>
    3810:	30 f1       	brcs	.+76     	; 0x385e <_Z4tonehjm+0x266>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    3812:	8c 85       	ldd	r24, Y+12	; 0x0c
    3814:	9d 85       	ldd	r25, Y+13	; 0x0d
    3816:	9c 01       	movw	r18, r24
    3818:	40 e0       	ldi	r20, 0x00	; 0
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	92 e1       	ldi	r25, 0x12	; 18
    3820:	aa e7       	ldi	r26, 0x7A	; 122
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    382c:	da 01       	movw	r26, r20
    382e:	c9 01       	movw	r24, r18
    3830:	07 2e       	mov	r0, r23
    3832:	7a e0       	ldi	r23, 0x0A	; 10
    3834:	b6 95       	lsr	r27
    3836:	a7 95       	ror	r26
    3838:	97 95       	ror	r25
    383a:	87 95       	ror	r24
    383c:	7a 95       	dec	r23
    383e:	d1 f7       	brne	.-12     	; 0x3834 <_Z4tonehjm+0x23c>
    3840:	70 2d       	mov	r23, r0
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	a1 09       	sbc	r26, r1
    3846:	b1 09       	sbc	r27, r1
    3848:	8e 83       	std	Y+6, r24	; 0x06
    384a:	9f 83       	std	Y+7, r25	; 0x07
    384c:	a8 87       	std	Y+8, r26	; 0x08
    384e:	b9 87       	std	Y+9, r27	; 0x09
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    3850:	8a 85       	ldd	r24, Y+10	; 0x0a
    3852:	88 23       	and	r24, r24
    3854:	11 f4       	brne	.+4      	; 0x385a <_Z4tonehjm+0x262>
    3856:	85 e0       	ldi	r24, 0x05	; 5
    3858:	01 c0       	rjmp	.+2      	; 0x385c <_Z4tonehjm+0x264>
    385a:	87 e0       	ldi	r24, 0x07	; 7
    385c:	89 83       	std	Y+1, r24	; 0x01
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    385e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3860:	88 23       	and	r24, r24
    3862:	69 f4       	brne	.+26     	; 0x387e <_Z4tonehjm+0x286>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    3864:	85 e4       	ldi	r24, 0x45	; 69
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	25 e4       	ldi	r18, 0x45	; 69
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	f9 01       	movw	r30, r18
    386e:	20 81       	ld	r18, Z
    3870:	32 2f       	mov	r19, r18
    3872:	38 7f       	andi	r19, 0xF8	; 248
    3874:	29 81       	ldd	r18, Y+1	; 0x01
    3876:	23 2b       	or	r18, r19
    3878:	fc 01       	movw	r30, r24
    387a:	20 83       	st	Z, r18
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    387c:	84 c0       	rjmp	.+264    	; 0x3986 <_Z4tonehjm+0x38e>
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    387e:	81 eb       	ldi	r24, 0xB1	; 177
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	21 eb       	ldi	r18, 0xB1	; 177
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	f9 01       	movw	r30, r18
    3888:	20 81       	ld	r18, Z
    388a:	32 2f       	mov	r19, r18
    388c:	38 7f       	andi	r19, 0xF8	; 248
    388e:	29 81       	ldd	r18, Y+1	; 0x01
    3890:	23 2b       	or	r18, r19
    3892:	fc 01       	movw	r30, r24
    3894:	20 83       	st	Z, r18
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    3896:	77 c0       	rjmp	.+238    	; 0x3986 <_Z4tonehjm+0x38e>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    3898:	8c 85       	ldd	r24, Y+12	; 0x0c
    389a:	9d 85       	ldd	r25, Y+13	; 0x0d
    389c:	9c 01       	movw	r18, r24
    389e:	40 e0       	ldi	r20, 0x00	; 0
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	92 e1       	ldi	r25, 0x12	; 18
    38a6:	aa e7       	ldi	r26, 0x7A	; 122
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    38b2:	da 01       	movw	r26, r20
    38b4:	c9 01       	movw	r24, r18
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	a1 09       	sbc	r26, r1
    38ba:	b1 09       	sbc	r27, r1
    38bc:	8e 83       	std	Y+6, r24	; 0x06
    38be:	9f 83       	std	Y+7, r25	; 0x07
    38c0:	a8 87       	std	Y+8, r26	; 0x08
    38c2:	b9 87       	std	Y+9, r27	; 0x09

      prescalarbits = 0b001;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	89 83       	std	Y+1, r24	; 0x01
      if (ocr > 0xffff)
    38c8:	8e 81       	ldd	r24, Y+6	; 0x06
    38ca:	9f 81       	ldd	r25, Y+7	; 0x07
    38cc:	a8 85       	ldd	r26, Y+8	; 0x08
    38ce:	b9 85       	ldd	r27, Y+9	; 0x09
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	a1 40       	sbci	r26, 0x01	; 1
    38d4:	b1 05       	cpc	r27, r1
    38d6:	c0 f0       	brcs	.+48     	; 0x3908 <_Z4tonehjm+0x310>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    38d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38da:	9d 85       	ldd	r25, Y+13	; 0x0d
    38dc:	9c 01       	movw	r18, r24
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	88 e4       	ldi	r24, 0x48	; 72
    38e4:	98 ee       	ldi	r25, 0xE8	; 232
    38e6:	a1 e0       	ldi	r26, 0x01	; 1
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	bc 01       	movw	r22, r24
    38ec:	cd 01       	movw	r24, r26
    38ee:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    38f2:	da 01       	movw	r26, r20
    38f4:	c9 01       	movw	r24, r18
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	a1 09       	sbc	r26, r1
    38fa:	b1 09       	sbc	r27, r1
    38fc:	8e 83       	std	Y+6, r24	; 0x06
    38fe:	9f 83       	std	Y+7, r25	; 0x07
    3900:	a8 87       	std	Y+8, r26	; 0x08
    3902:	b9 87       	std	Y+9, r27	; 0x09
        prescalarbits = 0b011;
    3904:	83 e0       	ldi	r24, 0x03	; 3
    3906:	89 83       	std	Y+1, r24	; 0x01
      }

      if (_timer == 1)
    3908:	8a 85       	ldd	r24, Y+10	; 0x0a
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	69 f4       	brne	.+26     	; 0x3928 <_Z4tonehjm+0x330>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    390e:	81 e8       	ldi	r24, 0x81	; 129
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	21 e8       	ldi	r18, 0x81	; 129
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	f9 01       	movw	r30, r18
    3918:	20 81       	ld	r18, Z
    391a:	32 2f       	mov	r19, r18
    391c:	38 7f       	andi	r19, 0xF8	; 248
    391e:	29 81       	ldd	r18, Y+1	; 0x01
    3920:	23 2b       	or	r18, r19
    3922:	fc 01       	movw	r30, r24
    3924:	20 83       	st	Z, r18
    3926:	2f c0       	rjmp	.+94     	; 0x3986 <_Z4tonehjm+0x38e>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    3928:	8a 85       	ldd	r24, Y+10	; 0x0a
    392a:	83 30       	cpi	r24, 0x03	; 3
    392c:	69 f4       	brne	.+26     	; 0x3948 <_Z4tonehjm+0x350>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    392e:	81 e9       	ldi	r24, 0x91	; 145
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	21 e9       	ldi	r18, 0x91	; 145
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	f9 01       	movw	r30, r18
    3938:	20 81       	ld	r18, Z
    393a:	32 2f       	mov	r19, r18
    393c:	38 7f       	andi	r19, 0xF8	; 248
    393e:	29 81       	ldd	r18, Y+1	; 0x01
    3940:	23 2b       	or	r18, r19
    3942:	fc 01       	movw	r30, r24
    3944:	20 83       	st	Z, r18
    3946:	1f c0       	rjmp	.+62     	; 0x3986 <_Z4tonehjm+0x38e>
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    3948:	8a 85       	ldd	r24, Y+10	; 0x0a
    394a:	84 30       	cpi	r24, 0x04	; 4
    394c:	69 f4       	brne	.+26     	; 0x3968 <_Z4tonehjm+0x370>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    394e:	81 ea       	ldi	r24, 0xA1	; 161
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	21 ea       	ldi	r18, 0xA1	; 161
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	f9 01       	movw	r30, r18
    3958:	20 81       	ld	r18, Z
    395a:	32 2f       	mov	r19, r18
    395c:	38 7f       	andi	r19, 0xF8	; 248
    395e:	29 81       	ldd	r18, Y+1	; 0x01
    3960:	23 2b       	or	r18, r19
    3962:	fc 01       	movw	r30, r24
    3964:	20 83       	st	Z, r18
    3966:	0f c0       	rjmp	.+30     	; 0x3986 <_Z4tonehjm+0x38e>
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    3968:	8a 85       	ldd	r24, Y+10	; 0x0a
    396a:	85 30       	cpi	r24, 0x05	; 5
    396c:	61 f4       	brne	.+24     	; 0x3986 <_Z4tonehjm+0x38e>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    396e:	81 e2       	ldi	r24, 0x21	; 33
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	21 e2       	ldi	r18, 0x21	; 33
    3974:	31 e0       	ldi	r19, 0x01	; 1
    3976:	f9 01       	movw	r30, r18
    3978:	20 81       	ld	r18, Z
    397a:	32 2f       	mov	r19, r18
    397c:	38 7f       	andi	r19, 0xF8	; 248
    397e:	29 81       	ldd	r18, Y+1	; 0x01
    3980:	23 2b       	or	r18, r19
    3982:	fc 01       	movw	r30, r24
    3984:	20 83       	st	Z, r18

    }
    

    // Calculate the toggle count
    if (duration > 0)
    3986:	8e 85       	ldd	r24, Y+14	; 0x0e
    3988:	9f 85       	ldd	r25, Y+15	; 0x0f
    398a:	a8 89       	ldd	r26, Y+16	; 0x10
    398c:	b9 89       	ldd	r27, Y+17	; 0x11
    398e:	89 2b       	or	r24, r25
    3990:	8a 2b       	or	r24, r26
    3992:	8b 2b       	or	r24, r27
    3994:	01 f1       	breq	.+64     	; 0x39d6 <_Z4tonehjm+0x3de>
    {
      toggle_count = 2 * frequency * duration / 1000;
    3996:	8c 85       	ldd	r24, Y+12	; 0x0c
    3998:	9d 85       	ldd	r25, Y+13	; 0x0d
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	9c 01       	movw	r18, r24
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    39a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    39a8:	a8 89       	ldd	r26, Y+16	; 0x10
    39aa:	b9 89       	ldd	r27, Y+17	; 0x11
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	0e 94 f4 42 	call	0x85e8	; 0x85e8 <__mulsi3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	28 ee       	ldi	r18, 0xE8	; 232
    39ba:	33 e0       	ldi	r19, 0x03	; 3
    39bc:	40 e0       	ldi	r20, 0x00	; 0
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	bc 01       	movw	r22, r24
    39c2:	cd 01       	movw	r24, r26
    39c4:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    39c8:	da 01       	movw	r26, r20
    39ca:	c9 01       	movw	r24, r18
    39cc:	8a 83       	std	Y+2, r24	; 0x02
    39ce:	9b 83       	std	Y+3, r25	; 0x03
    39d0:	ac 83       	std	Y+4, r26	; 0x04
    39d2:	bd 83       	std	Y+5, r27	; 0x05
    39d4:	07 c0       	rjmp	.+14     	; 0x39e4 <_Z4tonehjm+0x3ec>
    }
    else
    {
      toggle_count = -1;
    39d6:	8f ef       	ldi	r24, 0xFF	; 255
    39d8:	9f ef       	ldi	r25, 0xFF	; 255
    39da:	dc 01       	movw	r26, r24
    39dc:	8a 83       	std	Y+2, r24	; 0x02
    39de:	9b 83       	std	Y+3, r25	; 0x03
    39e0:	ac 83       	std	Y+4, r26	; 0x04
    39e2:	bd 83       	std	Y+5, r27	; 0x05
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    39e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e6:	08 2e       	mov	r0, r24
    39e8:	00 0c       	add	r0, r0
    39ea:	99 0b       	sbc	r25, r25
    39ec:	82 30       	cpi	r24, 0x02	; 2
    39ee:	91 05       	cpc	r25, r1
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <_Z4tonehjm+0x3fc>
    39f2:	4c c0       	rjmp	.+152    	; 0x3a8c <_Z4tonehjm+0x494>
    39f4:	83 30       	cpi	r24, 0x03	; 3
    39f6:	91 05       	cpc	r25, r1
    39f8:	2c f4       	brge	.+10     	; 0x3a04 <_Z4tonehjm+0x40c>
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	79 f0       	breq	.+30     	; 0x3a1c <_Z4tonehjm+0x424>
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	41 f1       	breq	.+80     	; 0x3a52 <_Z4tonehjm+0x45a>
        break;
#endif

    }
  }
}
    3a02:	b6 c0       	rjmp	.+364    	; 0x3b70 <_Z4tonehjm+0x578>
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    3a04:	84 30       	cpi	r24, 0x04	; 4
    3a06:	91 05       	cpc	r25, r1
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <_Z4tonehjm+0x414>
    3a0a:	78 c0       	rjmp	.+240    	; 0x3afc <_Z4tonehjm+0x504>
    3a0c:	84 30       	cpi	r24, 0x04	; 4
    3a0e:	91 05       	cpc	r25, r1
    3a10:	0c f4       	brge	.+2      	; 0x3a14 <_Z4tonehjm+0x41c>
    3a12:	57 c0       	rjmp	.+174    	; 0x3ac2 <_Z4tonehjm+0x4ca>
    3a14:	05 97       	sbiw	r24, 0x05	; 5
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <_Z4tonehjm+0x422>
    3a18:	8e c0       	rjmp	.+284    	; 0x3b36 <_Z4tonehjm+0x53e>
        break;
#endif

    }
  }
}
    3a1a:	aa c0       	rjmp	.+340    	; 0x3b70 <_Z4tonehjm+0x578>
    switch (_timer)
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    3a1c:	87 e4       	ldi	r24, 0x47	; 71
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	2e 81       	ldd	r18, Y+6	; 0x06
    3a22:	fc 01       	movw	r30, r24
    3a24:	20 83       	st	Z, r18
        timer0_toggle_count = toggle_count;
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2a:	ac 81       	ldd	r26, Y+4	; 0x04
    3a2c:	bd 81       	ldd	r27, Y+5	; 0x05
    3a2e:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <timer0_toggle_count>
    3a32:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <timer0_toggle_count+0x1>
    3a36:	a0 93 1e 06 	sts	0x061E, r26	; 0x80061e <timer0_toggle_count+0x2>
    3a3a:	b0 93 1f 06 	sts	0x061F, r27	; 0x80061f <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    3a3e:	8e e6       	ldi	r24, 0x6E	; 110
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	2e e6       	ldi	r18, 0x6E	; 110
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	f9 01       	movw	r30, r18
    3a48:	20 81       	ld	r18, Z
    3a4a:	22 60       	ori	r18, 0x02	; 2
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	20 83       	st	Z, r18
        break;
    3a50:	8f c0       	rjmp	.+286    	; 0x3b70 <_Z4tonehjm+0x578>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    3a52:	88 e8       	ldi	r24, 0x88	; 136
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	2e 81       	ldd	r18, Y+6	; 0x06
    3a58:	3f 81       	ldd	r19, Y+7	; 0x07
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	31 83       	std	Z+1, r19	; 0x01
    3a5e:	20 83       	st	Z, r18
        timer1_toggle_count = toggle_count;
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	9b 81       	ldd	r25, Y+3	; 0x03
    3a64:	ac 81       	ldd	r26, Y+4	; 0x04
    3a66:	bd 81       	ldd	r27, Y+5	; 0x05
    3a68:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <timer1_toggle_count>
    3a6c:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <timer1_toggle_count+0x1>
    3a70:	a0 93 25 06 	sts	0x0625, r26	; 0x800625 <timer1_toggle_count+0x2>
    3a74:	b0 93 26 06 	sts	0x0626, r27	; 0x800626 <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    3a78:	8f e6       	ldi	r24, 0x6F	; 111
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	2f e6       	ldi	r18, 0x6F	; 111
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	f9 01       	movw	r30, r18
    3a82:	20 81       	ld	r18, Z
    3a84:	22 60       	ori	r18, 0x02	; 2
    3a86:	fc 01       	movw	r30, r24
    3a88:	20 83       	st	Z, r18
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    3a8a:	72 c0       	rjmp	.+228    	; 0x3b70 <_Z4tonehjm+0x578>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    3a8c:	83 eb       	ldi	r24, 0xB3	; 179
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	2e 81       	ldd	r18, Y+6	; 0x06
    3a92:	fc 01       	movw	r30, r24
    3a94:	20 83       	st	Z, r18
        timer2_toggle_count = toggle_count;
    3a96:	8a 81       	ldd	r24, Y+2	; 0x02
    3a98:	9b 81       	ldd	r25, Y+3	; 0x03
    3a9a:	ac 81       	ldd	r26, Y+4	; 0x04
    3a9c:	bd 81       	ldd	r27, Y+5	; 0x05
    3a9e:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <timer2_toggle_count>
    3aa2:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <timer2_toggle_count+0x1>
    3aa6:	a0 93 2c 06 	sts	0x062C, r26	; 0x80062c <timer2_toggle_count+0x2>
    3aaa:	b0 93 2d 06 	sts	0x062D, r27	; 0x80062d <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
    3aae:	80 e7       	ldi	r24, 0x70	; 112
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	20 e7       	ldi	r18, 0x70	; 112
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	f9 01       	movw	r30, r18
    3ab8:	20 81       	ld	r18, Z
    3aba:	22 60       	ori	r18, 0x02	; 2
    3abc:	fc 01       	movw	r30, r24
    3abe:	20 83       	st	Z, r18
        break;
    3ac0:	57 c0       	rjmp	.+174    	; 0x3b70 <_Z4tonehjm+0x578>
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    3ac2:	88 e9       	ldi	r24, 0x98	; 152
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	2e 81       	ldd	r18, Y+6	; 0x06
    3ac8:	3f 81       	ldd	r19, Y+7	; 0x07
    3aca:	fc 01       	movw	r30, r24
    3acc:	31 83       	std	Z+1, r19	; 0x01
    3ace:	20 83       	st	Z, r18
        timer3_toggle_count = toggle_count;
    3ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad4:	ac 81       	ldd	r26, Y+4	; 0x04
    3ad6:	bd 81       	ldd	r27, Y+5	; 0x05
    3ad8:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <timer3_toggle_count>
    3adc:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <timer3_toggle_count+0x1>
    3ae0:	a0 93 33 06 	sts	0x0633, r26	; 0x800633 <timer3_toggle_count+0x2>
    3ae4:	b0 93 34 06 	sts	0x0634, r27	; 0x800634 <timer3_toggle_count+0x3>
        bitWrite(TIMSK3, OCIE3A, 1);
    3ae8:	81 e7       	ldi	r24, 0x71	; 113
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	21 e7       	ldi	r18, 0x71	; 113
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	f9 01       	movw	r30, r18
    3af2:	20 81       	ld	r18, Z
    3af4:	22 60       	ori	r18, 0x02	; 2
    3af6:	fc 01       	movw	r30, r24
    3af8:	20 83       	st	Z, r18
        break;
    3afa:	3a c0       	rjmp	.+116    	; 0x3b70 <_Z4tonehjm+0x578>
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    3afc:	88 ea       	ldi	r24, 0xA8	; 168
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	2e 81       	ldd	r18, Y+6	; 0x06
    3b02:	3f 81       	ldd	r19, Y+7	; 0x07
    3b04:	fc 01       	movw	r30, r24
    3b06:	31 83       	std	Z+1, r19	; 0x01
    3b08:	20 83       	st	Z, r18
        timer4_toggle_count = toggle_count;
    3b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b0e:	ac 81       	ldd	r26, Y+4	; 0x04
    3b10:	bd 81       	ldd	r27, Y+5	; 0x05
    3b12:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <timer4_toggle_count>
    3b16:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <timer4_toggle_count+0x1>
    3b1a:	a0 93 3a 06 	sts	0x063A, r26	; 0x80063a <timer4_toggle_count+0x2>
    3b1e:	b0 93 3b 06 	sts	0x063B, r27	; 0x80063b <timer4_toggle_count+0x3>
        bitWrite(TIMSK4, OCIE4A, 1);
    3b22:	82 e7       	ldi	r24, 0x72	; 114
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	22 e7       	ldi	r18, 0x72	; 114
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	f9 01       	movw	r30, r18
    3b2c:	20 81       	ld	r18, Z
    3b2e:	22 60       	ori	r18, 0x02	; 2
    3b30:	fc 01       	movw	r30, r24
    3b32:	20 83       	st	Z, r18
        break;
    3b34:	1d c0       	rjmp	.+58     	; 0x3b70 <_Z4tonehjm+0x578>
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    3b36:	88 e2       	ldi	r24, 0x28	; 40
    3b38:	91 e0       	ldi	r25, 0x01	; 1
    3b3a:	2e 81       	ldd	r18, Y+6	; 0x06
    3b3c:	3f 81       	ldd	r19, Y+7	; 0x07
    3b3e:	fc 01       	movw	r30, r24
    3b40:	31 83       	std	Z+1, r19	; 0x01
    3b42:	20 83       	st	Z, r18
        timer5_toggle_count = toggle_count;
    3b44:	8a 81       	ldd	r24, Y+2	; 0x02
    3b46:	9b 81       	ldd	r25, Y+3	; 0x03
    3b48:	ac 81       	ldd	r26, Y+4	; 0x04
    3b4a:	bd 81       	ldd	r27, Y+5	; 0x05
    3b4c:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <timer5_toggle_count>
    3b50:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <timer5_toggle_count+0x1>
    3b54:	a0 93 41 06 	sts	0x0641, r26	; 0x800641 <timer5_toggle_count+0x2>
    3b58:	b0 93 42 06 	sts	0x0642, r27	; 0x800642 <timer5_toggle_count+0x3>
        bitWrite(TIMSK5, OCIE5A, 1);
    3b5c:	83 e7       	ldi	r24, 0x73	; 115
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	23 e7       	ldi	r18, 0x73	; 115
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	f9 01       	movw	r30, r18
    3b66:	20 81       	ld	r18, Z
    3b68:	22 60       	ori	r18, 0x02	; 2
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	20 83       	st	Z, r18
        break;
    3b6e:	00 00       	nop
#endif

    }
  }
}
    3b70:	00 00       	nop
    3b72:	61 96       	adiw	r28, 0x11	; 17
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	08 95       	ret

00003b84 <_Z12disableTimerh>:

// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29
    3b88:	1f 92       	push	r1
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	89 83       	std	Y+1, r24	; 0x01
  switch (_timer)
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	82 30       	cpi	r24, 0x02	; 2
    3b98:	91 05       	cpc	r25, r1
    3b9a:	09 f1       	breq	.+66     	; 0x3bde <_Z12disableTimerh+0x5a>
    3b9c:	83 30       	cpi	r24, 0x03	; 3
    3b9e:	91 05       	cpc	r25, r1
    3ba0:	2c f4       	brge	.+10     	; 0x3bac <_Z12disableTimerh+0x28>
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f0       	breq	.+26     	; 0x3bc0 <_Z12disableTimerh+0x3c>
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	81 f0       	breq	.+32     	; 0x3bca <_Z12disableTimerh+0x46>
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
      break;
#endif
  }
}
    3baa:	54 c0       	rjmp	.+168    	; 0x3c54 <_Z12disableTimerh+0xd0>
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    3bac:	84 30       	cpi	r24, 0x04	; 4
    3bae:	91 05       	cpc	r25, r1
    3bb0:	e9 f1       	breq	.+122    	; 0x3c2c <_Z12disableTimerh+0xa8>
    3bb2:	84 30       	cpi	r24, 0x04	; 4
    3bb4:	91 05       	cpc	r25, r1
    3bb6:	84 f1       	brlt	.+96     	; 0x3c18 <_Z12disableTimerh+0x94>
    3bb8:	05 97       	sbiw	r24, 0x05	; 5
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <_Z12disableTimerh+0x3a>
    3bbc:	41 c0       	rjmp	.+130    	; 0x3c40 <_Z12disableTimerh+0xbc>
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
      break;
#endif
  }
}
    3bbe:	4a c0       	rjmp	.+148    	; 0x3c54 <_Z12disableTimerh+0xd0>
{
  switch (_timer)
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    3bc0:	8e e6       	ldi	r24, 0x6E	; 110
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	10 82       	st	Z, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    3bc8:	45 c0       	rjmp	.+138    	; 0x3c54 <_Z12disableTimerh+0xd0>

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    3bca:	8f e6       	ldi	r24, 0x6F	; 111
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	2f e6       	ldi	r18, 0x6F	; 111
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	f9 01       	movw	r30, r18
    3bd4:	20 81       	ld	r18, Z
    3bd6:	2d 7f       	andi	r18, 0xFD	; 253
    3bd8:	fc 01       	movw	r30, r24
    3bda:	20 83       	st	Z, r18
      break;
    3bdc:	3b c0       	rjmp	.+118    	; 0x3c54 <_Z12disableTimerh+0xd0>
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    3bde:	80 e7       	ldi	r24, 0x70	; 112
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	20 e7       	ldi	r18, 0x70	; 112
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	f9 01       	movw	r30, r18
    3be8:	20 81       	ld	r18, Z
    3bea:	2d 7f       	andi	r18, 0xFD	; 253
    3bec:	fc 01       	movw	r30, r24
    3bee:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    3bf0:	80 eb       	ldi	r24, 0xB0	; 176
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	21 e0       	ldi	r18, 0x01	; 1
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    3bfa:	81 eb       	ldi	r24, 0xB1	; 177
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	21 eb       	ldi	r18, 0xB1	; 177
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	f9 01       	movw	r30, r18
    3c04:	20 81       	ld	r18, Z
    3c06:	28 7f       	andi	r18, 0xF8	; 248
    3c08:	24 60       	ori	r18, 0x04	; 4
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	20 83       	st	Z, r18
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    3c0e:	83 eb       	ldi	r24, 0xB3	; 179
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	fc 01       	movw	r30, r24
    3c14:	10 82       	st	Z, r1
      #endif
      break;
    3c16:	1e c0       	rjmp	.+60     	; 0x3c54 <_Z12disableTimerh+0xd0>

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    3c18:	81 e7       	ldi	r24, 0x71	; 113
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	21 e7       	ldi	r18, 0x71	; 113
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	f9 01       	movw	r30, r18
    3c22:	20 81       	ld	r18, Z
    3c24:	2d 7f       	andi	r18, 0xFD	; 253
    3c26:	fc 01       	movw	r30, r24
    3c28:	20 83       	st	Z, r18
      break;
    3c2a:	14 c0       	rjmp	.+40     	; 0x3c54 <_Z12disableTimerh+0xd0>
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    3c2c:	82 e7       	ldi	r24, 0x72	; 114
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	22 e7       	ldi	r18, 0x72	; 114
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	f9 01       	movw	r30, r18
    3c36:	20 81       	ld	r18, Z
    3c38:	2d 7f       	andi	r18, 0xFD	; 253
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	20 83       	st	Z, r18
      break;
    3c3e:	0a c0       	rjmp	.+20     	; 0x3c54 <_Z12disableTimerh+0xd0>
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    3c40:	83 e7       	ldi	r24, 0x73	; 115
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	23 e7       	ldi	r18, 0x73	; 115
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	f9 01       	movw	r30, r18
    3c4a:	20 81       	ld	r18, Z
    3c4c:	2d 7f       	andi	r18, 0xFD	; 253
    3c4e:	fc 01       	movw	r30, r24
    3c50:	20 83       	st	Z, r18
      break;
    3c52:	00 00       	nop
#endif
  }
}
    3c54:	00 00       	nop
    3c56:	0f 90       	pop	r0
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	08 95       	ret

00003c5e <_Z6noToneh>:


void noTone(uint8_t _pin)
{
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	27 97       	sbiw	r28, 0x07	; 7
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	8f 83       	std	Y+7, r24	; 0x07
  int8_t _timer = -1;
    3c74:	8f ef       	ldi	r24, 0xFF	; 255
    3c76:	89 83       	std	Y+1, r24	; 0x01
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    3c78:	1b 82       	std	Y+3, r1	; 0x03
    3c7a:	1a 82       	std	Y+2, r1	; 0x02
    3c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c80:	18 16       	cp	r1, r24
    3c82:	19 06       	cpc	r1, r25
    3c84:	24 f1       	brlt	.+72     	; 0x3cce <_Z6noToneh+0x70>
    if (tone_pins[i] == _pin) {
    3c86:	8a 81       	ldd	r24, Y+2	; 0x02
    3c88:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8a:	80 50       	subi	r24, 0x00	; 0
    3c8c:	9e 4f       	sbci	r25, 0xFE	; 254
    3c8e:	fc 01       	movw	r30, r24
    3c90:	90 81       	ld	r25, Z
    3c92:	8f 81       	ldd	r24, Y+7	; 0x07
    3c94:	98 17       	cp	r25, r24
    3c96:	a9 f4       	brne	.+42     	; 0x3cc2 <_Z6noToneh+0x64>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9c:	8f 55       	subi	r24, 0x5F	; 95
    3c9e:	9c 4f       	sbci	r25, 0xFC	; 252
    3ca0:	9d 83       	std	Y+5, r25	; 0x05
    3ca2:	8c 83       	std	Y+4, r24	; 0x04
    3ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca8:	fc 01       	movw	r30, r24
    3caa:	84 91       	lpm	r24, Z
    3cac:	8e 83       	std	Y+6, r24	; 0x06
    3cae:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb0:	89 83       	std	Y+1, r24	; 0x01
      tone_pins[i] = 255;
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb6:	80 50       	subi	r24, 0x00	; 0
    3cb8:	9e 4f       	sbci	r25, 0xFE	; 254
    3cba:	2f ef       	ldi	r18, 0xFF	; 255
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	20 83       	st	Z, r18
      break;
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <_Z6noToneh+0x70>

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    3cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc6:	01 96       	adiw	r24, 0x01	; 1
    3cc8:	9b 83       	std	Y+3, r25	; 0x03
    3cca:	8a 83       	std	Y+2, r24	; 0x02
    3ccc:	d7 cf       	rjmp	.-82     	; 0x3c7c <_Z6noToneh+0x1e>
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cd8:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
}
    3cdc:	00 00       	nop
    3cde:	27 96       	adiw	r28, 0x07	; 7
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    3cf0:	1f 92       	push	r1
    3cf2:	0f 92       	push	r0
    3cf4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3cf8:	0f 92       	push	r0
    3cfa:	11 24       	eor	r1, r1
    3cfc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3d00:	0f 92       	push	r0
    3d02:	2f 93       	push	r18
    3d04:	3f 93       	push	r19
    3d06:	4f 93       	push	r20
    3d08:	5f 93       	push	r21
    3d0a:	6f 93       	push	r22
    3d0c:	7f 93       	push	r23
    3d0e:	8f 93       	push	r24
    3d10:	9f 93       	push	r25
    3d12:	af 93       	push	r26
    3d14:	bf 93       	push	r27
    3d16:	ef 93       	push	r30
    3d18:	ff 93       	push	r31
    3d1a:	cf 93       	push	r28
    3d1c:	df 93       	push	r29
    3d1e:	cd b7       	in	r28, 0x3d	; 61
    3d20:	de b7       	in	r29, 0x3e	; 62

  if (timer2_toggle_count != 0)
    3d22:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <timer2_toggle_count>
    3d26:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <timer2_toggle_count+0x1>
    3d2a:	a0 91 2c 06 	lds	r26, 0x062C	; 0x80062c <timer2_toggle_count+0x2>
    3d2e:	b0 91 2d 06 	lds	r27, 0x062D	; 0x80062d <timer2_toggle_count+0x3>
    3d32:	21 e0       	ldi	r18, 0x01	; 1
    3d34:	89 2b       	or	r24, r25
    3d36:	8a 2b       	or	r24, r26
    3d38:	8b 2b       	or	r24, r27
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <__vector_13+0x4e>
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	22 23       	and	r18, r18
    3d40:	a1 f1       	breq	.+104    	; 0x3daa <__vector_13+0xba>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    3d42:	40 91 30 06 	lds	r20, 0x0630	; 0x800630 <timer2_pin_mask>
    3d46:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <timer2_pin_port>
    3d4a:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <timer2_pin_port+0x1>
    3d4e:	20 91 2e 06 	lds	r18, 0x062E	; 0x80062e <timer2_pin_port>
    3d52:	30 91 2f 06 	lds	r19, 0x062F	; 0x80062f <timer2_pin_port+0x1>
    3d56:	f9 01       	movw	r30, r18
    3d58:	20 81       	ld	r18, Z
    3d5a:	24 27       	eor	r18, r20
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	20 83       	st	Z, r18

    if (timer2_toggle_count > 0)
    3d60:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <timer2_toggle_count>
    3d64:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <timer2_toggle_count+0x1>
    3d68:	a0 91 2c 06 	lds	r26, 0x062C	; 0x80062c <timer2_toggle_count+0x2>
    3d6c:	b0 91 2d 06 	lds	r27, 0x062D	; 0x80062d <timer2_toggle_count+0x3>
    3d70:	21 e0       	ldi	r18, 0x01	; 1
    3d72:	18 16       	cp	r1, r24
    3d74:	19 06       	cpc	r1, r25
    3d76:	1a 06       	cpc	r1, r26
    3d78:	1b 06       	cpc	r1, r27
    3d7a:	0c f0       	brlt	.+2      	; 0x3d7e <__vector_13+0x8e>
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	22 23       	and	r18, r18
    3d80:	c1 f0       	breq	.+48     	; 0x3db2 <__vector_13+0xc2>
      timer2_toggle_count--;
    3d82:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <timer2_toggle_count>
    3d86:	90 91 2b 06 	lds	r25, 0x062B	; 0x80062b <timer2_toggle_count+0x1>
    3d8a:	a0 91 2c 06 	lds	r26, 0x062C	; 0x80062c <timer2_toggle_count+0x2>
    3d8e:	b0 91 2d 06 	lds	r27, 0x062D	; 0x80062d <timer2_toggle_count+0x3>
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	a1 09       	sbc	r26, r1
    3d96:	b1 09       	sbc	r27, r1
    3d98:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <timer2_toggle_count>
    3d9c:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <timer2_toggle_count+0x1>
    3da0:	a0 93 2c 06 	sts	0x062C, r26	; 0x80062c <timer2_toggle_count+0x2>
    3da4:	b0 93 2d 06 	sts	0x062D, r27	; 0x80062d <timer2_toggle_count+0x3>
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    3da8:	04 c0       	rjmp	.+8      	; 0x3db2 <__vector_13+0xc2>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    3daa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3dae:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    3db2:	00 00       	nop
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	ff 91       	pop	r31
    3dba:	ef 91       	pop	r30
    3dbc:	bf 91       	pop	r27
    3dbe:	af 91       	pop	r26
    3dc0:	9f 91       	pop	r25
    3dc2:	8f 91       	pop	r24
    3dc4:	7f 91       	pop	r23
    3dc6:	6f 91       	pop	r22
    3dc8:	5f 91       	pop	r21
    3dca:	4f 91       	pop	r20
    3dcc:	3f 91       	pop	r19
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    3dd6:	0f 90       	pop	r0
    3dd8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    3ddc:	0f 90       	pop	r0
    3dde:	1f 90       	pop	r1
    3de0:	18 95       	reti

00003de2 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    3de2:	cf 93       	push	r28
    3de4:	df 93       	push	r29
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
}
    3dea:	00 00       	nop
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	08 95       	ret

00003df2 <attachInterrupt>:
#if EXTERNAL_NUM_INTERRUPTS > 0
    nothing,
#endif
};

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	00 d0       	rcall	.+0      	; 0x3df8 <attachInterrupt+0x6>
    3df8:	1f 92       	push	r1
    3dfa:	1f 92       	push	r1
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	89 83       	std	Y+1, r24	; 0x01
    3e02:	7b 83       	std	Y+3, r23	; 0x03
    3e04:	6a 83       	std	Y+2, r22	; 0x02
    3e06:	5d 83       	std	Y+5, r21	; 0x05
    3e08:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	88 30       	cpi	r24, 0x08	; 8
    3e0e:	08 f0       	brcs	.+2      	; 0x3e12 <attachInterrupt+0x20>
    3e10:	00 c1       	rjmp	.+512    	; 0x4012 <attachInterrupt+0x220>
    intFunc[interruptNum] = userFunc;
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	88 2f       	mov	r24, r24
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	8f 5f       	subi	r24, 0xFF	; 255
    3e1e:	9d 4f       	sbci	r25, 0xFD	; 253
    3e20:	2a 81       	ldd	r18, Y+2	; 0x02
    3e22:	3b 81       	ldd	r19, Y+3	; 0x03
    3e24:	fc 01       	movw	r30, r24
    3e26:	31 83       	std	Z+1, r19	; 0x01
    3e28:	20 83       	st	Z, r18
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	09 2e       	mov	r0, r25
    3e32:	00 0c       	add	r0, r0
    3e34:	aa 0b       	sbc	r26, r26
    3e36:	bb 0b       	sbc	r27, r27
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	27 e0       	ldi	r18, 0x07	; 7
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	84 1b       	sub	r24, r20
    3e42:	95 0b       	sbc	r25, r21
    3e44:	28 17       	cp	r18, r24
    3e46:	39 07       	cpc	r19, r25
    3e48:	08 f4       	brcc	.+2      	; 0x3e4c <attachInterrupt+0x5a>
    3e4a:	e3 c0       	rjmp	.+454    	; 0x4012 <attachInterrupt+0x220>
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	88 27       	eor	r24, r24
    3e50:	ee 58       	subi	r30, 0x8E	; 142
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	8f 4f       	sbci	r24, 0xFF	; 255
    3e56:	0c 94 45 43 	jmp	0x868a	; 0x868a <__tablejump2__>
        EICRB = (EICRB & ~((1<<ISC60) | (1<<ISC61))) | (mode << ISC60);
        EIMSK |= (1<<INT6);
        break;
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    3e5a:	89 e6       	ldi	r24, 0x69	; 105
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	29 e6       	ldi	r18, 0x69	; 105
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	f9 01       	movw	r30, r18
    3e64:	20 81       	ld	r18, Z
    3e66:	32 2f       	mov	r19, r18
    3e68:	3c 7f       	andi	r19, 0xFC	; 252
    3e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    3e6c:	23 2b       	or	r18, r19
    3e6e:	fc 01       	movw	r30, r24
    3e70:	20 83       	st	Z, r18
      EIMSK |= (1 << INT0);
    3e72:	8d e3       	ldi	r24, 0x3D	; 61
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	2d e3       	ldi	r18, 0x3D	; 61
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	f9 01       	movw	r30, r18
    3e7c:	20 81       	ld	r18, Z
    3e7e:	21 60       	ori	r18, 0x01	; 1
    3e80:	fc 01       	movw	r30, r24
    3e82:	20 83       	st	Z, r18
      break;
    3e84:	c6 c0       	rjmp	.+396    	; 0x4012 <attachInterrupt+0x220>
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    3e86:	89 e6       	ldi	r24, 0x69	; 105
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	29 e6       	ldi	r18, 0x69	; 105
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	f9 01       	movw	r30, r18
    3e90:	20 81       	ld	r18, Z
    3e92:	42 2f       	mov	r20, r18
    3e94:	43 7f       	andi	r20, 0xF3	; 243
    3e96:	2c 81       	ldd	r18, Y+4	; 0x04
    3e98:	3d 81       	ldd	r19, Y+5	; 0x05
    3e9a:	22 0f       	add	r18, r18
    3e9c:	33 1f       	adc	r19, r19
    3e9e:	22 0f       	add	r18, r18
    3ea0:	33 1f       	adc	r19, r19
    3ea2:	24 2b       	or	r18, r20
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	20 83       	st	Z, r18
      EIMSK |= (1 << INT1);
    3ea8:	8d e3       	ldi	r24, 0x3D	; 61
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	2d e3       	ldi	r18, 0x3D	; 61
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	f9 01       	movw	r30, r18
    3eb2:	20 81       	ld	r18, Z
    3eb4:	22 60       	ori	r18, 0x02	; 2
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	20 83       	st	Z, r18
      break;
    3eba:	ab c0       	rjmp	.+342    	; 0x4012 <attachInterrupt+0x220>
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    3ebc:	89 e6       	ldi	r24, 0x69	; 105
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	29 e6       	ldi	r18, 0x69	; 105
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	f9 01       	movw	r30, r18
    3ec6:	20 81       	ld	r18, Z
    3ec8:	42 2f       	mov	r20, r18
    3eca:	4f 7c       	andi	r20, 0xCF	; 207
    3ecc:	2c 81       	ldd	r18, Y+4	; 0x04
    3ece:	3d 81       	ldd	r19, Y+5	; 0x05
    3ed0:	22 95       	swap	r18
    3ed2:	32 95       	swap	r19
    3ed4:	30 7f       	andi	r19, 0xF0	; 240
    3ed6:	32 27       	eor	r19, r18
    3ed8:	20 7f       	andi	r18, 0xF0	; 240
    3eda:	32 27       	eor	r19, r18
    3edc:	24 2b       	or	r18, r20
    3ede:	fc 01       	movw	r30, r24
    3ee0:	20 83       	st	Z, r18
      EIMSK |= (1 << INT2);
    3ee2:	8d e3       	ldi	r24, 0x3D	; 61
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	2d e3       	ldi	r18, 0x3D	; 61
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	f9 01       	movw	r30, r18
    3eec:	20 81       	ld	r18, Z
    3eee:	24 60       	ori	r18, 0x04	; 4
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	20 83       	st	Z, r18
      break;
    3ef4:	8e c0       	rjmp	.+284    	; 0x4012 <attachInterrupt+0x220>
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    3ef6:	89 e6       	ldi	r24, 0x69	; 105
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	29 e6       	ldi	r18, 0x69	; 105
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	f9 01       	movw	r30, r18
    3f00:	20 81       	ld	r18, Z
    3f02:	42 2f       	mov	r20, r18
    3f04:	4f 73       	andi	r20, 0x3F	; 63
    3f06:	2c 81       	ldd	r18, Y+4	; 0x04
    3f08:	3d 81       	ldd	r19, Y+5	; 0x05
    3f0a:	00 24       	eor	r0, r0
    3f0c:	36 95       	lsr	r19
    3f0e:	27 95       	ror	r18
    3f10:	07 94       	ror	r0
    3f12:	36 95       	lsr	r19
    3f14:	27 95       	ror	r18
    3f16:	07 94       	ror	r0
    3f18:	32 2f       	mov	r19, r18
    3f1a:	20 2d       	mov	r18, r0
    3f1c:	24 2b       	or	r18, r20
    3f1e:	fc 01       	movw	r30, r24
    3f20:	20 83       	st	Z, r18
      EIMSK |= (1 << INT3);
    3f22:	8d e3       	ldi	r24, 0x3D	; 61
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	2d e3       	ldi	r18, 0x3D	; 61
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	f9 01       	movw	r30, r18
    3f2c:	20 81       	ld	r18, Z
    3f2e:	28 60       	ori	r18, 0x08	; 8
    3f30:	fc 01       	movw	r30, r24
    3f32:	20 83       	st	Z, r18
      break;
    3f34:	6e c0       	rjmp	.+220    	; 0x4012 <attachInterrupt+0x220>
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    3f36:	8a e6       	ldi	r24, 0x6A	; 106
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	2a e6       	ldi	r18, 0x6A	; 106
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	f9 01       	movw	r30, r18
    3f40:	20 81       	ld	r18, Z
    3f42:	32 2f       	mov	r19, r18
    3f44:	3c 7f       	andi	r19, 0xFC	; 252
    3f46:	2c 81       	ldd	r18, Y+4	; 0x04
    3f48:	23 2b       	or	r18, r19
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	20 83       	st	Z, r18
      EIMSK |= (1 << INT4);
    3f4e:	8d e3       	ldi	r24, 0x3D	; 61
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	2d e3       	ldi	r18, 0x3D	; 61
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	f9 01       	movw	r30, r18
    3f58:	20 81       	ld	r18, Z
    3f5a:	20 61       	ori	r18, 0x10	; 16
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	20 83       	st	Z, r18
      break;
    3f60:	58 c0       	rjmp	.+176    	; 0x4012 <attachInterrupt+0x220>
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    3f62:	8a e6       	ldi	r24, 0x6A	; 106
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	2a e6       	ldi	r18, 0x6A	; 106
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	f9 01       	movw	r30, r18
    3f6c:	20 81       	ld	r18, Z
    3f6e:	42 2f       	mov	r20, r18
    3f70:	43 7f       	andi	r20, 0xF3	; 243
    3f72:	2c 81       	ldd	r18, Y+4	; 0x04
    3f74:	3d 81       	ldd	r19, Y+5	; 0x05
    3f76:	22 0f       	add	r18, r18
    3f78:	33 1f       	adc	r19, r19
    3f7a:	22 0f       	add	r18, r18
    3f7c:	33 1f       	adc	r19, r19
    3f7e:	24 2b       	or	r18, r20
    3f80:	fc 01       	movw	r30, r24
    3f82:	20 83       	st	Z, r18
      EIMSK |= (1 << INT5);
    3f84:	8d e3       	ldi	r24, 0x3D	; 61
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	2d e3       	ldi	r18, 0x3D	; 61
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	f9 01       	movw	r30, r18
    3f8e:	20 81       	ld	r18, Z
    3f90:	20 62       	ori	r18, 0x20	; 32
    3f92:	fc 01       	movw	r30, r24
    3f94:	20 83       	st	Z, r18
      break;
    3f96:	3d c0       	rjmp	.+122    	; 0x4012 <attachInterrupt+0x220>
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    3f98:	8a e6       	ldi	r24, 0x6A	; 106
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	2a e6       	ldi	r18, 0x6A	; 106
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	f9 01       	movw	r30, r18
    3fa2:	20 81       	ld	r18, Z
    3fa4:	42 2f       	mov	r20, r18
    3fa6:	4f 7c       	andi	r20, 0xCF	; 207
    3fa8:	2c 81       	ldd	r18, Y+4	; 0x04
    3faa:	3d 81       	ldd	r19, Y+5	; 0x05
    3fac:	22 95       	swap	r18
    3fae:	32 95       	swap	r19
    3fb0:	30 7f       	andi	r19, 0xF0	; 240
    3fb2:	32 27       	eor	r19, r18
    3fb4:	20 7f       	andi	r18, 0xF0	; 240
    3fb6:	32 27       	eor	r19, r18
    3fb8:	24 2b       	or	r18, r20
    3fba:	fc 01       	movw	r30, r24
    3fbc:	20 83       	st	Z, r18
      EIMSK |= (1 << INT6);
    3fbe:	8d e3       	ldi	r24, 0x3D	; 61
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	2d e3       	ldi	r18, 0x3D	; 61
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	f9 01       	movw	r30, r18
    3fc8:	20 81       	ld	r18, Z
    3fca:	20 64       	ori	r18, 0x40	; 64
    3fcc:	fc 01       	movw	r30, r24
    3fce:	20 83       	st	Z, r18
      break;
    3fd0:	20 c0       	rjmp	.+64     	; 0x4012 <attachInterrupt+0x220>
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    3fd2:	8a e6       	ldi	r24, 0x6A	; 106
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	2a e6       	ldi	r18, 0x6A	; 106
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	f9 01       	movw	r30, r18
    3fdc:	20 81       	ld	r18, Z
    3fde:	42 2f       	mov	r20, r18
    3fe0:	4f 73       	andi	r20, 0x3F	; 63
    3fe2:	2c 81       	ldd	r18, Y+4	; 0x04
    3fe4:	3d 81       	ldd	r19, Y+5	; 0x05
    3fe6:	00 24       	eor	r0, r0
    3fe8:	36 95       	lsr	r19
    3fea:	27 95       	ror	r18
    3fec:	07 94       	ror	r0
    3fee:	36 95       	lsr	r19
    3ff0:	27 95       	ror	r18
    3ff2:	07 94       	ror	r0
    3ff4:	32 2f       	mov	r19, r18
    3ff6:	20 2d       	mov	r18, r0
    3ff8:	24 2b       	or	r18, r20
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	20 83       	st	Z, r18
      EIMSK |= (1 << INT7);
    3ffe:	8d e3       	ldi	r24, 0x3D	; 61
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	2d e3       	ldi	r18, 0x3D	; 61
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	f9 01       	movw	r30, r18
    4008:	20 81       	ld	r18, Z
    400a:	20 68       	ori	r18, 0x80	; 128
    400c:	fc 01       	movw	r30, r24
    400e:	20 83       	st	Z, r18
      break;
    4010:	00 00       	nop
    #endif
      break;
#endif
    }
  }
}
    4012:	00 00       	nop
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <detachInterrupt>:

void detachInterrupt(uint8_t interruptNum) {
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	1f 92       	push	r1
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	89 83       	std	Y+1, r24	; 0x01
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	88 30       	cpi	r24, 0x08	; 8
    4034:	08 f0       	brcs	.+2      	; 0x4038 <detachInterrupt+0x14>
    4036:	74 c0       	rjmp	.+232    	; 0x4120 <detachInterrupt+0xfc>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	88 2f       	mov	r24, r24
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	09 2e       	mov	r0, r25
    4040:	00 0c       	add	r0, r0
    4042:	aa 0b       	sbc	r26, r26
    4044:	bb 0b       	sbc	r27, r27
    4046:	40 e0       	ldi	r20, 0x00	; 0
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	27 e0       	ldi	r18, 0x07	; 7
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	84 1b       	sub	r24, r20
    4050:	95 0b       	sbc	r25, r21
    4052:	28 17       	cp	r18, r24
    4054:	39 07       	cpc	r19, r25
    4056:	08 f4       	brcc	.+2      	; 0x405a <detachInterrupt+0x36>
    4058:	57 c0       	rjmp	.+174    	; 0x4108 <detachInterrupt+0xe4>
    405a:	fc 01       	movw	r30, r24
    405c:	88 27       	eor	r24, r24
    405e:	e6 58       	subi	r30, 0x86	; 134
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	8f 4f       	sbci	r24, 0xFF	; 255
    4064:	0c 94 45 43 	jmp	0x868a	; 0x868a <__tablejump2__>
    case 4:
        EIMSK &= ~(1<<INT6);
        break;	
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
    4068:	8d e3       	ldi	r24, 0x3D	; 61
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	2d e3       	ldi	r18, 0x3D	; 61
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	f9 01       	movw	r30, r18
    4072:	20 81       	ld	r18, Z
    4074:	2e 7f       	andi	r18, 0xFE	; 254
    4076:	fc 01       	movw	r30, r24
    4078:	20 83       	st	Z, r18
      break;
    407a:	46 c0       	rjmp	.+140    	; 0x4108 <detachInterrupt+0xe4>
    case 3:
      EIMSK &= ~(1 << INT1);
    407c:	8d e3       	ldi	r24, 0x3D	; 61
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	2d e3       	ldi	r18, 0x3D	; 61
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	f9 01       	movw	r30, r18
    4086:	20 81       	ld	r18, Z
    4088:	2d 7f       	andi	r18, 0xFD	; 253
    408a:	fc 01       	movw	r30, r24
    408c:	20 83       	st	Z, r18
      break;
    408e:	3c c0       	rjmp	.+120    	; 0x4108 <detachInterrupt+0xe4>
    case 4:
      EIMSK &= ~(1 << INT2);
    4090:	8d e3       	ldi	r24, 0x3D	; 61
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	2d e3       	ldi	r18, 0x3D	; 61
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	f9 01       	movw	r30, r18
    409a:	20 81       	ld	r18, Z
    409c:	2b 7f       	andi	r18, 0xFB	; 251
    409e:	fc 01       	movw	r30, r24
    40a0:	20 83       	st	Z, r18
      break;
    40a2:	32 c0       	rjmp	.+100    	; 0x4108 <detachInterrupt+0xe4>
    case 5:
      EIMSK &= ~(1 << INT3);
    40a4:	8d e3       	ldi	r24, 0x3D	; 61
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	2d e3       	ldi	r18, 0x3D	; 61
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	f9 01       	movw	r30, r18
    40ae:	20 81       	ld	r18, Z
    40b0:	27 7f       	andi	r18, 0xF7	; 247
    40b2:	fc 01       	movw	r30, r24
    40b4:	20 83       	st	Z, r18
      break;
    40b6:	28 c0       	rjmp	.+80     	; 0x4108 <detachInterrupt+0xe4>
    case 0:
      EIMSK &= ~(1 << INT4);
    40b8:	8d e3       	ldi	r24, 0x3D	; 61
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	2d e3       	ldi	r18, 0x3D	; 61
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	f9 01       	movw	r30, r18
    40c2:	20 81       	ld	r18, Z
    40c4:	2f 7e       	andi	r18, 0xEF	; 239
    40c6:	fc 01       	movw	r30, r24
    40c8:	20 83       	st	Z, r18
      break;
    40ca:	1e c0       	rjmp	.+60     	; 0x4108 <detachInterrupt+0xe4>
    case 1:
      EIMSK &= ~(1 << INT5);
    40cc:	8d e3       	ldi	r24, 0x3D	; 61
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	2d e3       	ldi	r18, 0x3D	; 61
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	f9 01       	movw	r30, r18
    40d6:	20 81       	ld	r18, Z
    40d8:	2f 7d       	andi	r18, 0xDF	; 223
    40da:	fc 01       	movw	r30, r24
    40dc:	20 83       	st	Z, r18
      break;
    40de:	14 c0       	rjmp	.+40     	; 0x4108 <detachInterrupt+0xe4>
    case 6:
      EIMSK &= ~(1 << INT6);
    40e0:	8d e3       	ldi	r24, 0x3D	; 61
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	2d e3       	ldi	r18, 0x3D	; 61
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	f9 01       	movw	r30, r18
    40ea:	20 81       	ld	r18, Z
    40ec:	2f 7b       	andi	r18, 0xBF	; 191
    40ee:	fc 01       	movw	r30, r24
    40f0:	20 83       	st	Z, r18
      break;
    40f2:	0a c0       	rjmp	.+20     	; 0x4108 <detachInterrupt+0xe4>
    case 7:
      EIMSK &= ~(1 << INT7);
    40f4:	8d e3       	ldi	r24, 0x3D	; 61
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	2d e3       	ldi	r18, 0x3D	; 61
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	f9 01       	movw	r30, r18
    40fe:	20 81       	ld	r18, Z
    4100:	2f 77       	andi	r18, 0x7F	; 127
    4102:	fc 01       	movw	r30, r24
    4104:	20 83       	st	Z, r18
      break;
    4106:	00 00       	nop
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	88 2f       	mov	r24, r24
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	8f 5f       	subi	r24, 0xFF	; 255
    4114:	9d 4f       	sbci	r25, 0xFD	; 253
    4116:	21 ef       	ldi	r18, 0xF1	; 241
    4118:	3e e1       	ldi	r19, 0x1E	; 30
    411a:	fc 01       	movw	r30, r24
    411c:	31 83       	std	Z+1, r19	; 0x01
    411e:	20 83       	st	Z, r18
  }
}
    4120:	00 00       	nop
    4122:	0f 90       	pop	r0
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	08 95       	ret

0000412a <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    412a:	1f 92       	push	r1
    412c:	0f 92       	push	r0
    412e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4132:	0f 92       	push	r0
    4134:	11 24       	eor	r1, r1
    4136:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    413a:	0f 92       	push	r0
    413c:	2f 93       	push	r18
    413e:	3f 93       	push	r19
    4140:	4f 93       	push	r20
    4142:	5f 93       	push	r21
    4144:	6f 93       	push	r22
    4146:	7f 93       	push	r23
    4148:	8f 93       	push	r24
    414a:	9f 93       	push	r25
    414c:	af 93       	push	r26
    414e:	bf 93       	push	r27
    4150:	ef 93       	push	r30
    4152:	ff 93       	push	r31
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
    415c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <intFunc+0x4>
    4160:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <intFunc+0x5>
    4164:	fc 01       	movw	r30, r24
    4166:	19 95       	eicall
    4168:	00 00       	nop
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	ff 91       	pop	r31
    4170:	ef 91       	pop	r30
    4172:	bf 91       	pop	r27
    4174:	af 91       	pop	r26
    4176:	9f 91       	pop	r25
    4178:	8f 91       	pop	r24
    417a:	7f 91       	pop	r23
    417c:	6f 91       	pop	r22
    417e:	5f 91       	pop	r21
    4180:	4f 91       	pop	r20
    4182:	3f 91       	pop	r19
    4184:	2f 91       	pop	r18
    4186:	0f 90       	pop	r0
    4188:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    418c:	0f 90       	pop	r0
    418e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4192:	0f 90       	pop	r0
    4194:	1f 90       	pop	r1
    4196:	18 95       	reti

00004198 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    4198:	1f 92       	push	r1
    419a:	0f 92       	push	r0
    419c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    41a0:	0f 92       	push	r0
    41a2:	11 24       	eor	r1, r1
    41a4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    41a8:	0f 92       	push	r0
    41aa:	2f 93       	push	r18
    41ac:	3f 93       	push	r19
    41ae:	4f 93       	push	r20
    41b0:	5f 93       	push	r21
    41b2:	6f 93       	push	r22
    41b4:	7f 93       	push	r23
    41b6:	8f 93       	push	r24
    41b8:	9f 93       	push	r25
    41ba:	af 93       	push	r26
    41bc:	bf 93       	push	r27
    41be:	ef 93       	push	r30
    41c0:	ff 93       	push	r31
    41c2:	cf 93       	push	r28
    41c4:	df 93       	push	r29
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
    41ca:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <intFunc+0x6>
    41ce:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <intFunc+0x7>
    41d2:	fc 01       	movw	r30, r24
    41d4:	19 95       	eicall
    41d6:	00 00       	nop
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	ff 91       	pop	r31
    41de:	ef 91       	pop	r30
    41e0:	bf 91       	pop	r27
    41e2:	af 91       	pop	r26
    41e4:	9f 91       	pop	r25
    41e6:	8f 91       	pop	r24
    41e8:	7f 91       	pop	r23
    41ea:	6f 91       	pop	r22
    41ec:	5f 91       	pop	r21
    41ee:	4f 91       	pop	r20
    41f0:	3f 91       	pop	r19
    41f2:	2f 91       	pop	r18
    41f4:	0f 90       	pop	r0
    41f6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    41fa:	0f 90       	pop	r0
    41fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4200:	0f 90       	pop	r0
    4202:	1f 90       	pop	r1
    4204:	18 95       	reti

00004206 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    4206:	1f 92       	push	r1
    4208:	0f 92       	push	r0
    420a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    420e:	0f 92       	push	r0
    4210:	11 24       	eor	r1, r1
    4212:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4216:	0f 92       	push	r0
    4218:	2f 93       	push	r18
    421a:	3f 93       	push	r19
    421c:	4f 93       	push	r20
    421e:	5f 93       	push	r21
    4220:	6f 93       	push	r22
    4222:	7f 93       	push	r23
    4224:	8f 93       	push	r24
    4226:	9f 93       	push	r25
    4228:	af 93       	push	r26
    422a:	bf 93       	push	r27
    422c:	ef 93       	push	r30
    422e:	ff 93       	push	r31
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <intFunc+0x8>
    423c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <intFunc+0x9>
    4240:	fc 01       	movw	r30, r24
    4242:	19 95       	eicall
    4244:	00 00       	nop
    4246:	df 91       	pop	r29
    4248:	cf 91       	pop	r28
    424a:	ff 91       	pop	r31
    424c:	ef 91       	pop	r30
    424e:	bf 91       	pop	r27
    4250:	af 91       	pop	r26
    4252:	9f 91       	pop	r25
    4254:	8f 91       	pop	r24
    4256:	7f 91       	pop	r23
    4258:	6f 91       	pop	r22
    425a:	5f 91       	pop	r21
    425c:	4f 91       	pop	r20
    425e:	3f 91       	pop	r19
    4260:	2f 91       	pop	r18
    4262:	0f 90       	pop	r0
    4264:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4268:	0f 90       	pop	r0
    426a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    426e:	0f 90       	pop	r0
    4270:	1f 90       	pop	r1
    4272:	18 95       	reti

00004274 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    4274:	1f 92       	push	r1
    4276:	0f 92       	push	r0
    4278:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    427c:	0f 92       	push	r0
    427e:	11 24       	eor	r1, r1
    4280:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4284:	0f 92       	push	r0
    4286:	2f 93       	push	r18
    4288:	3f 93       	push	r19
    428a:	4f 93       	push	r20
    428c:	5f 93       	push	r21
    428e:	6f 93       	push	r22
    4290:	7f 93       	push	r23
    4292:	8f 93       	push	r24
    4294:	9f 93       	push	r25
    4296:	af 93       	push	r26
    4298:	bf 93       	push	r27
    429a:	ef 93       	push	r30
    429c:	ff 93       	push	r31
    429e:	cf 93       	push	r28
    42a0:	df 93       	push	r29
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <intFunc+0xa>
    42aa:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <intFunc+0xb>
    42ae:	fc 01       	movw	r30, r24
    42b0:	19 95       	eicall
    42b2:	00 00       	nop
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	ff 91       	pop	r31
    42ba:	ef 91       	pop	r30
    42bc:	bf 91       	pop	r27
    42be:	af 91       	pop	r26
    42c0:	9f 91       	pop	r25
    42c2:	8f 91       	pop	r24
    42c4:	7f 91       	pop	r23
    42c6:	6f 91       	pop	r22
    42c8:	5f 91       	pop	r21
    42ca:	4f 91       	pop	r20
    42cc:	3f 91       	pop	r19
    42ce:	2f 91       	pop	r18
    42d0:	0f 90       	pop	r0
    42d2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    42d6:	0f 90       	pop	r0
    42d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    42dc:	0f 90       	pop	r0
    42de:	1f 90       	pop	r1
    42e0:	18 95       	reti

000042e2 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    42e2:	1f 92       	push	r1
    42e4:	0f 92       	push	r0
    42e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    42ea:	0f 92       	push	r0
    42ec:	11 24       	eor	r1, r1
    42ee:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    42f2:	0f 92       	push	r0
    42f4:	2f 93       	push	r18
    42f6:	3f 93       	push	r19
    42f8:	4f 93       	push	r20
    42fa:	5f 93       	push	r21
    42fc:	6f 93       	push	r22
    42fe:	7f 93       	push	r23
    4300:	8f 93       	push	r24
    4302:	9f 93       	push	r25
    4304:	af 93       	push	r26
    4306:	bf 93       	push	r27
    4308:	ef 93       	push	r30
    430a:	ff 93       	push	r31
    430c:	cf 93       	push	r28
    430e:	df 93       	push	r29
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <intFunc>
    4318:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <intFunc+0x1>
    431c:	fc 01       	movw	r30, r24
    431e:	19 95       	eicall
    4320:	00 00       	nop
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	ff 91       	pop	r31
    4328:	ef 91       	pop	r30
    432a:	bf 91       	pop	r27
    432c:	af 91       	pop	r26
    432e:	9f 91       	pop	r25
    4330:	8f 91       	pop	r24
    4332:	7f 91       	pop	r23
    4334:	6f 91       	pop	r22
    4336:	5f 91       	pop	r21
    4338:	4f 91       	pop	r20
    433a:	3f 91       	pop	r19
    433c:	2f 91       	pop	r18
    433e:	0f 90       	pop	r0
    4340:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4344:	0f 90       	pop	r0
    4346:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    434a:	0f 90       	pop	r0
    434c:	1f 90       	pop	r1
    434e:	18 95       	reti

00004350 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    4350:	1f 92       	push	r1
    4352:	0f 92       	push	r0
    4354:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4358:	0f 92       	push	r0
    435a:	11 24       	eor	r1, r1
    435c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4360:	0f 92       	push	r0
    4362:	2f 93       	push	r18
    4364:	3f 93       	push	r19
    4366:	4f 93       	push	r20
    4368:	5f 93       	push	r21
    436a:	6f 93       	push	r22
    436c:	7f 93       	push	r23
    436e:	8f 93       	push	r24
    4370:	9f 93       	push	r25
    4372:	af 93       	push	r26
    4374:	bf 93       	push	r27
    4376:	ef 93       	push	r30
    4378:	ff 93       	push	r31
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	cd b7       	in	r28, 0x3d	; 61
    4380:	de b7       	in	r29, 0x3e	; 62
    4382:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <intFunc+0x2>
    4386:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <intFunc+0x3>
    438a:	fc 01       	movw	r30, r24
    438c:	19 95       	eicall
    438e:	00 00       	nop
    4390:	df 91       	pop	r29
    4392:	cf 91       	pop	r28
    4394:	ff 91       	pop	r31
    4396:	ef 91       	pop	r30
    4398:	bf 91       	pop	r27
    439a:	af 91       	pop	r26
    439c:	9f 91       	pop	r25
    439e:	8f 91       	pop	r24
    43a0:	7f 91       	pop	r23
    43a2:	6f 91       	pop	r22
    43a4:	5f 91       	pop	r21
    43a6:	4f 91       	pop	r20
    43a8:	3f 91       	pop	r19
    43aa:	2f 91       	pop	r18
    43ac:	0f 90       	pop	r0
    43ae:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    43b2:	0f 90       	pop	r0
    43b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    43b8:	0f 90       	pop	r0
    43ba:	1f 90       	pop	r1
    43bc:	18 95       	reti

000043be <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    43be:	1f 92       	push	r1
    43c0:	0f 92       	push	r0
    43c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    43c6:	0f 92       	push	r0
    43c8:	11 24       	eor	r1, r1
    43ca:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    43ce:	0f 92       	push	r0
    43d0:	2f 93       	push	r18
    43d2:	3f 93       	push	r19
    43d4:	4f 93       	push	r20
    43d6:	5f 93       	push	r21
    43d8:	6f 93       	push	r22
    43da:	7f 93       	push	r23
    43dc:	8f 93       	push	r24
    43de:	9f 93       	push	r25
    43e0:	af 93       	push	r26
    43e2:	bf 93       	push	r27
    43e4:	ef 93       	push	r30
    43e6:	ff 93       	push	r31
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	cd b7       	in	r28, 0x3d	; 61
    43ee:	de b7       	in	r29, 0x3e	; 62
    43f0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <intFunc+0xc>
    43f4:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <intFunc+0xd>
    43f8:	fc 01       	movw	r30, r24
    43fa:	19 95       	eicall
    43fc:	00 00       	nop
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	ff 91       	pop	r31
    4404:	ef 91       	pop	r30
    4406:	bf 91       	pop	r27
    4408:	af 91       	pop	r26
    440a:	9f 91       	pop	r25
    440c:	8f 91       	pop	r24
    440e:	7f 91       	pop	r23
    4410:	6f 91       	pop	r22
    4412:	5f 91       	pop	r21
    4414:	4f 91       	pop	r20
    4416:	3f 91       	pop	r19
    4418:	2f 91       	pop	r18
    441a:	0f 90       	pop	r0
    441c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4420:	0f 90       	pop	r0
    4422:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4426:	0f 90       	pop	r0
    4428:	1f 90       	pop	r1
    442a:	18 95       	reti

0000442c <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    442c:	1f 92       	push	r1
    442e:	0f 92       	push	r0
    4430:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4434:	0f 92       	push	r0
    4436:	11 24       	eor	r1, r1
    4438:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    443c:	0f 92       	push	r0
    443e:	2f 93       	push	r18
    4440:	3f 93       	push	r19
    4442:	4f 93       	push	r20
    4444:	5f 93       	push	r21
    4446:	6f 93       	push	r22
    4448:	7f 93       	push	r23
    444a:	8f 93       	push	r24
    444c:	9f 93       	push	r25
    444e:	af 93       	push	r26
    4450:	bf 93       	push	r27
    4452:	ef 93       	push	r30
    4454:	ff 93       	push	r31
    4456:	cf 93       	push	r28
    4458:	df 93       	push	r29
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
    445e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <intFunc+0xe>
    4462:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <intFunc+0xf>
    4466:	fc 01       	movw	r30, r24
    4468:	19 95       	eicall
    446a:	00 00       	nop
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	ff 91       	pop	r31
    4472:	ef 91       	pop	r30
    4474:	bf 91       	pop	r27
    4476:	af 91       	pop	r26
    4478:	9f 91       	pop	r25
    447a:	8f 91       	pop	r24
    447c:	7f 91       	pop	r23
    447e:	6f 91       	pop	r22
    4480:	5f 91       	pop	r21
    4482:	4f 91       	pop	r20
    4484:	3f 91       	pop	r19
    4486:	2f 91       	pop	r18
    4488:	0f 90       	pop	r0
    448a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    448e:	0f 90       	pop	r0
    4490:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4494:	0f 90       	pop	r0
    4496:	1f 90       	pop	r1
    4498:	18 95       	reti

0000449a <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    449a:	1f 92       	push	r1
    449c:	0f 92       	push	r0
    449e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    44a2:	0f 92       	push	r0
    44a4:	11 24       	eor	r1, r1
    44a6:	8f 93       	push	r24
    44a8:	9f 93       	push	r25
    44aa:	af 93       	push	r26
    44ac:	bf 93       	push	r27
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	cd b7       	in	r28, 0x3d	; 61
    44b4:	de b7       	in	r29, 0x3e	; 62
    44b6:	25 97       	sbiw	r28, 0x05	; 5
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	cd bf       	out	0x3d, r28	; 61
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    44bc:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <timer0_millis>
    44c0:	90 91 4b 06 	lds	r25, 0x064B	; 0x80064b <timer0_millis+0x1>
    44c4:	a0 91 4c 06 	lds	r26, 0x064C	; 0x80064c <timer0_millis+0x2>
    44c8:	b0 91 4d 06 	lds	r27, 0x064D	; 0x80064d <timer0_millis+0x3>
    44cc:	89 83       	std	Y+1, r24	; 0x01
    44ce:	9a 83       	std	Y+2, r25	; 0x02
    44d0:	ab 83       	std	Y+3, r26	; 0x03
    44d2:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char f = timer0_fract;
    44d4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <timer0_fract>
    44d8:	8d 83       	std	Y+5, r24	; 0x05

	m += MILLIS_INC;
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	9a 81       	ldd	r25, Y+2	; 0x02
    44de:	ab 81       	ldd	r26, Y+3	; 0x03
    44e0:	bc 81       	ldd	r27, Y+4	; 0x04
    44e2:	01 96       	adiw	r24, 0x01	; 1
    44e4:	a1 1d       	adc	r26, r1
    44e6:	b1 1d       	adc	r27, r1
    44e8:	89 83       	std	Y+1, r24	; 0x01
    44ea:	9a 83       	std	Y+2, r25	; 0x02
    44ec:	ab 83       	std	Y+3, r26	; 0x03
    44ee:	bc 83       	std	Y+4, r27	; 0x04
	f += FRACT_INC;
    44f0:	8d 81       	ldd	r24, Y+5	; 0x05
    44f2:	8d 5f       	subi	r24, 0xFD	; 253
    44f4:	8d 83       	std	Y+5, r24	; 0x05
	if (f >= FRACT_MAX) {
    44f6:	8d 81       	ldd	r24, Y+5	; 0x05
    44f8:	8d 37       	cpi	r24, 0x7D	; 125
    44fa:	70 f0       	brcs	.+28     	; 0x4518 <__vector_23+0x7e>
		f -= FRACT_MAX;
    44fc:	8d 81       	ldd	r24, Y+5	; 0x05
    44fe:	8d 57       	subi	r24, 0x7D	; 125
    4500:	8d 83       	std	Y+5, r24	; 0x05
		m += 1;
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	ab 81       	ldd	r26, Y+3	; 0x03
    4508:	bc 81       	ldd	r27, Y+4	; 0x04
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	a1 1d       	adc	r26, r1
    450e:	b1 1d       	adc	r27, r1
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	ab 83       	std	Y+3, r26	; 0x03
    4516:	bc 83       	std	Y+4, r27	; 0x04
	}

	timer0_fract = f;
    4518:	8d 81       	ldd	r24, Y+5	; 0x05
    451a:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <timer0_fract>
	timer0_millis = m;
    451e:	89 81       	ldd	r24, Y+1	; 0x01
    4520:	9a 81       	ldd	r25, Y+2	; 0x02
    4522:	ab 81       	ldd	r26, Y+3	; 0x03
    4524:	bc 81       	ldd	r27, Y+4	; 0x04
    4526:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <timer0_millis>
    452a:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <timer0_millis+0x1>
    452e:	a0 93 4c 06 	sts	0x064C, r26	; 0x80064c <timer0_millis+0x2>
    4532:	b0 93 4d 06 	sts	0x064D, r27	; 0x80064d <timer0_millis+0x3>
	timer0_overflow_count++;
    4536:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <timer0_overflow_count>
    453a:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <timer0_overflow_count+0x1>
    453e:	a0 91 48 06 	lds	r26, 0x0648	; 0x800648 <timer0_overflow_count+0x2>
    4542:	b0 91 49 06 	lds	r27, 0x0649	; 0x800649 <timer0_overflow_count+0x3>
    4546:	01 96       	adiw	r24, 0x01	; 1
    4548:	a1 1d       	adc	r26, r1
    454a:	b1 1d       	adc	r27, r1
    454c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <timer0_overflow_count>
    4550:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <timer0_overflow_count+0x1>
    4554:	a0 93 48 06 	sts	0x0648, r26	; 0x800648 <timer0_overflow_count+0x2>
    4558:	b0 93 49 06 	sts	0x0649, r27	; 0x800649 <timer0_overflow_count+0x3>
}
    455c:	00 00       	nop
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	bf 91       	pop	r27
    456e:	af 91       	pop	r26
    4570:	9f 91       	pop	r25
    4572:	8f 91       	pop	r24
    4574:	0f 90       	pop	r0
    4576:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    457a:	0f 90       	pop	r0
    457c:	1f 90       	pop	r1
    457e:	18 95       	reti

00004580 <millis>:

unsigned long millis()
{
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	00 d0       	rcall	.+0      	; 0x4586 <millis+0x6>
    4586:	1f 92       	push	r1
    4588:	1f 92       	push	r1
    458a:	cd b7       	in	r28, 0x3d	; 61
    458c:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
    458e:	8f e5       	ldi	r24, 0x5F	; 95
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	fc 01       	movw	r30, r24
    4594:	80 81       	ld	r24, Z
    4596:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4598:	f8 94       	cli
	m = timer0_millis;
    459a:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <timer0_millis>
    459e:	90 91 4b 06 	lds	r25, 0x064B	; 0x80064b <timer0_millis+0x1>
    45a2:	a0 91 4c 06 	lds	r26, 0x064C	; 0x80064c <timer0_millis+0x2>
    45a6:	b0 91 4d 06 	lds	r27, 0x064D	; 0x80064d <timer0_millis+0x3>
    45aa:	8a 83       	std	Y+2, r24	; 0x02
    45ac:	9b 83       	std	Y+3, r25	; 0x03
    45ae:	ac 83       	std	Y+4, r26	; 0x04
    45b0:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
    45b2:	8f e5       	ldi	r24, 0x5F	; 95
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	29 81       	ldd	r18, Y+1	; 0x01
    45b8:	fc 01       	movw	r30, r24
    45ba:	20 83       	st	Z, r18

	return m;
    45bc:	8a 81       	ldd	r24, Y+2	; 0x02
    45be:	9b 81       	ldd	r25, Y+3	; 0x03
    45c0:	ac 81       	ldd	r26, Y+4	; 0x04
    45c2:	bd 81       	ldd	r27, Y+5	; 0x05
}
    45c4:	bc 01       	movw	r22, r24
    45c6:	cd 01       	movw	r24, r26
    45c8:	0f 90       	pop	r0
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	df 91       	pop	r29
    45d4:	cf 91       	pop	r28
    45d6:	08 95       	ret

000045d8 <micros>:

unsigned long micros() {
    45d8:	cf 93       	push	r28
    45da:	df 93       	push	r29
    45dc:	00 d0       	rcall	.+0      	; 0x45de <micros+0x6>
    45de:	00 d0       	rcall	.+0      	; 0x45e0 <micros+0x8>
    45e0:	cd b7       	in	r28, 0x3d	; 61
    45e2:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    45e4:	8f e5       	ldi	r24, 0x5F	; 95
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	fc 01       	movw	r30, r24
    45ea:	80 81       	ld	r24, Z
    45ec:	8d 83       	std	Y+5, r24	; 0x05
	
	cli();
    45ee:	f8 94       	cli
	m = timer0_overflow_count;
    45f0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <timer0_overflow_count>
    45f4:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <timer0_overflow_count+0x1>
    45f8:	a0 91 48 06 	lds	r26, 0x0648	; 0x800648 <timer0_overflow_count+0x2>
    45fc:	b0 91 49 06 	lds	r27, 0x0649	; 0x800649 <timer0_overflow_count+0x3>
    4600:	89 83       	std	Y+1, r24	; 0x01
    4602:	9a 83       	std	Y+2, r25	; 0x02
    4604:	ab 83       	std	Y+3, r26	; 0x03
    4606:	bc 83       	std	Y+4, r27	; 0x04
#if defined(TCNT0)
	t = TCNT0;
    4608:	86 e4       	ldi	r24, 0x46	; 70
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	fc 01       	movw	r30, r24
    460e:	80 81       	ld	r24, Z
    4610:	8e 83       	std	Y+6, r24	; 0x06
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4612:	85 e3       	ldi	r24, 0x35	; 53
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	fc 01       	movw	r30, r24
    4618:	80 81       	ld	r24, Z
    461a:	88 2f       	mov	r24, r24
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	81 70       	andi	r24, 0x01	; 1
    4620:	99 27       	eor	r25, r25
    4622:	89 2b       	or	r24, r25
    4624:	71 f0       	breq	.+28     	; 0x4642 <micros+0x6a>
    4626:	8e 81       	ldd	r24, Y+6	; 0x06
    4628:	8f 3f       	cpi	r24, 0xFF	; 255
    462a:	59 f0       	breq	.+22     	; 0x4642 <micros+0x6a>
		m++;
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	9a 81       	ldd	r25, Y+2	; 0x02
    4630:	ab 81       	ldd	r26, Y+3	; 0x03
    4632:	bc 81       	ldd	r27, Y+4	; 0x04
    4634:	01 96       	adiw	r24, 0x01	; 1
    4636:	a1 1d       	adc	r26, r1
    4638:	b1 1d       	adc	r27, r1
    463a:	89 83       	std	Y+1, r24	; 0x01
    463c:	9a 83       	std	Y+2, r25	; 0x02
    463e:	ab 83       	std	Y+3, r26	; 0x03
    4640:	bc 83       	std	Y+4, r27	; 0x04
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4642:	8f e5       	ldi	r24, 0x5F	; 95
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	2d 81       	ldd	r18, Y+5	; 0x05
    4648:	fc 01       	movw	r30, r24
    464a:	20 83       	st	Z, r18
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    464c:	89 81       	ldd	r24, Y+1	; 0x01
    464e:	9a 81       	ldd	r25, Y+2	; 0x02
    4650:	ab 81       	ldd	r26, Y+3	; 0x03
    4652:	bc 81       	ldd	r27, Y+4	; 0x04
    4654:	22 27       	eor	r18, r18
    4656:	38 2f       	mov	r19, r24
    4658:	49 2f       	mov	r20, r25
    465a:	5a 2f       	mov	r21, r26
    465c:	8e 81       	ldd	r24, Y+6	; 0x06
    465e:	88 2f       	mov	r24, r24
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	a0 e0       	ldi	r26, 0x00	; 0
    4664:	b0 e0       	ldi	r27, 0x00	; 0
    4666:	82 0f       	add	r24, r18
    4668:	93 1f       	adc	r25, r19
    466a:	a4 1f       	adc	r26, r20
    466c:	b5 1f       	adc	r27, r21
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	aa 1f       	adc	r26, r26
    4674:	bb 1f       	adc	r27, r27
    4676:	88 0f       	add	r24, r24
    4678:	99 1f       	adc	r25, r25
    467a:	aa 1f       	adc	r26, r26
    467c:	bb 1f       	adc	r27, r27
}
    467e:	bc 01       	movw	r22, r24
    4680:	cd 01       	movw	r24, r26
    4682:	26 96       	adiw	r28, 0x06	; 6
    4684:	0f b6       	in	r0, 0x3f	; 63
    4686:	f8 94       	cli
    4688:	de bf       	out	0x3e, r29	; 62
    468a:	0f be       	out	0x3f, r0	; 63
    468c:	cd bf       	out	0x3d, r28	; 61
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	08 95       	ret

00004694 <delay>:

void delay(unsigned long ms)
{
    4694:	ef 92       	push	r14
    4696:	ff 92       	push	r15
    4698:	0f 93       	push	r16
    469a:	1f 93       	push	r17
    469c:	cf 93       	push	r28
    469e:	df 93       	push	r29
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	28 97       	sbiw	r28, 0x08	; 8
    46a6:	0f b6       	in	r0, 0x3f	; 63
    46a8:	f8 94       	cli
    46aa:	de bf       	out	0x3e, r29	; 62
    46ac:	0f be       	out	0x3f, r0	; 63
    46ae:	cd bf       	out	0x3d, r28	; 61
    46b0:	6d 83       	std	Y+5, r22	; 0x05
    46b2:	7e 83       	std	Y+6, r23	; 0x06
    46b4:	8f 83       	std	Y+7, r24	; 0x07
    46b6:	98 87       	std	Y+8, r25	; 0x08
	uint32_t start = micros();
    46b8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	89 83       	std	Y+1, r24	; 0x01
    46c2:	9a 83       	std	Y+2, r25	; 0x02
    46c4:	ab 83       	std	Y+3, r26	; 0x03
    46c6:	bc 83       	std	Y+4, r27	; 0x04

	while (ms > 0) {
    46c8:	37 c0       	rjmp	.+110    	; 0x4738 <delay+0xa4>
		yield();
    46ca:	0e 94 40 09 	call	0x1280	; 0x1280 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    46ce:	17 c0       	rjmp	.+46     	; 0x46fe <delay+0x6a>
			ms--;
    46d0:	8d 81       	ldd	r24, Y+5	; 0x05
    46d2:	9e 81       	ldd	r25, Y+6	; 0x06
    46d4:	af 81       	ldd	r26, Y+7	; 0x07
    46d6:	b8 85       	ldd	r27, Y+8	; 0x08
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	a1 09       	sbc	r26, r1
    46dc:	b1 09       	sbc	r27, r1
    46de:	8d 83       	std	Y+5, r24	; 0x05
    46e0:	9e 83       	std	Y+6, r25	; 0x06
    46e2:	af 83       	std	Y+7, r26	; 0x07
    46e4:	b8 87       	std	Y+8, r27	; 0x08
			start += 1000;
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ea:	ab 81       	ldd	r26, Y+3	; 0x03
    46ec:	bc 81       	ldd	r27, Y+4	; 0x04
    46ee:	88 51       	subi	r24, 0x18	; 24
    46f0:	9c 4f       	sbci	r25, 0xFC	; 252
    46f2:	af 4f       	sbci	r26, 0xFF	; 255
    46f4:	bf 4f       	sbci	r27, 0xFF	; 255
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	9a 83       	std	Y+2, r25	; 0x02
    46fa:	ab 83       	std	Y+3, r26	; 0x03
    46fc:	bc 83       	std	Y+4, r27	; 0x04
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    46fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4700:	9e 81       	ldd	r25, Y+6	; 0x06
    4702:	af 81       	ldd	r26, Y+7	; 0x07
    4704:	b8 85       	ldd	r27, Y+8	; 0x08
    4706:	89 2b       	or	r24, r25
    4708:	8a 2b       	or	r24, r26
    470a:	8b 2b       	or	r24, r27
    470c:	a9 f0       	breq	.+42     	; 0x4738 <delay+0xa4>
    470e:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    4712:	9b 01       	movw	r18, r22
    4714:	ac 01       	movw	r20, r24
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	9a 81       	ldd	r25, Y+2	; 0x02
    471a:	ab 81       	ldd	r26, Y+3	; 0x03
    471c:	bc 81       	ldd	r27, Y+4	; 0x04
    471e:	79 01       	movw	r14, r18
    4720:	8a 01       	movw	r16, r20
    4722:	e8 1a       	sub	r14, r24
    4724:	f9 0a       	sbc	r15, r25
    4726:	0a 0b       	sbc	r16, r26
    4728:	1b 0b       	sbc	r17, r27
    472a:	d8 01       	movw	r26, r16
    472c:	c7 01       	movw	r24, r14
    472e:	88 3e       	cpi	r24, 0xE8	; 232
    4730:	93 40       	sbci	r25, 0x03	; 3
    4732:	a1 05       	cpc	r26, r1
    4734:	b1 05       	cpc	r27, r1
    4736:	60 f6       	brcc	.-104    	; 0x46d0 <delay+0x3c>

void delay(unsigned long ms)
{
	uint32_t start = micros();

	while (ms > 0) {
    4738:	8d 81       	ldd	r24, Y+5	; 0x05
    473a:	9e 81       	ldd	r25, Y+6	; 0x06
    473c:	af 81       	ldd	r26, Y+7	; 0x07
    473e:	b8 85       	ldd	r27, Y+8	; 0x08
    4740:	89 2b       	or	r24, r25
    4742:	8a 2b       	or	r24, r26
    4744:	8b 2b       	or	r24, r27
    4746:	09 f6       	brne	.-126    	; 0x46ca <delay+0x36>
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    4748:	00 00       	nop
    474a:	28 96       	adiw	r28, 0x08	; 8
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	ff 90       	pop	r15
    4760:	ef 90       	pop	r14
    4762:	08 95       	ret

00004764 <delayMicroseconds>:

/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */
void delayMicroseconds(unsigned int us)
{
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	1f 92       	push	r1
    476a:	1f 92       	push	r1
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    4770:	9a 83       	std	Y+2, r25	; 0x02
    4772:	89 83       	std	Y+1, r24	; 0x01
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4774:	89 81       	ldd	r24, Y+1	; 0x01
    4776:	9a 81       	ldd	r25, Y+2	; 0x02
    4778:	02 97       	sbiw	r24, 0x02	; 2
    477a:	a0 f0       	brcs	.+40     	; 0x47a4 <delayMicroseconds+0x40>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	9a 81       	ldd	r25, Y+2	; 0x02
    4780:	88 0f       	add	r24, r24
    4782:	99 1f       	adc	r25, r25
    4784:	88 0f       	add	r24, r24
    4786:	99 1f       	adc	r25, r25
    4788:	9a 83       	std	Y+2, r25	; 0x02
    478a:	89 83       	std	Y+1, r24	; 0x01

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	9a 81       	ldd	r25, Y+2	; 0x02
    4790:	05 97       	sbiw	r24, 0x05	; 5
    4792:	9a 83       	std	Y+2, r25	; 0x02
    4794:	89 83       	std	Y+1, r24	; 0x01
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	01 97       	sbiw	r24, 0x01	; 1
    479c:	f1 f7       	brne	.-4      	; 0x479a <delayMicroseconds+0x36>
    479e:	9a 83       	std	Y+2, r25	; 0x02
    47a0:	89 83       	std	Y+1, r24	; 0x01
    47a2:	01 c0       	rjmp	.+2      	; 0x47a6 <delayMicroseconds+0x42>
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    47a4:	00 00       	nop
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	08 95       	ret

000047b0 <init>:

void init()
{
    47b0:	cf 93       	push	r28
    47b2:	df 93       	push	r29
    47b4:	cd b7       	in	r28, 0x3d	; 61
    47b6:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    47b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    47ba:	84 e4       	ldi	r24, 0x44	; 68
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	24 e4       	ldi	r18, 0x44	; 68
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	f9 01       	movw	r30, r18
    47c4:	20 81       	ld	r18, Z
    47c6:	22 60       	ori	r18, 0x02	; 2
    47c8:	fc 01       	movw	r30, r24
    47ca:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    47cc:	84 e4       	ldi	r24, 0x44	; 68
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	24 e4       	ldi	r18, 0x44	; 68
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	f9 01       	movw	r30, r18
    47d6:	20 81       	ld	r18, Z
    47d8:	21 60       	ori	r18, 0x01	; 1
    47da:	fc 01       	movw	r30, r24
    47dc:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    47de:	85 e4       	ldi	r24, 0x45	; 69
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	25 e4       	ldi	r18, 0x45	; 69
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	f9 01       	movw	r30, r18
    47e8:	20 81       	ld	r18, Z
    47ea:	22 60       	ori	r18, 0x02	; 2
    47ec:	fc 01       	movw	r30, r24
    47ee:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    47f0:	85 e4       	ldi	r24, 0x45	; 69
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	25 e4       	ldi	r18, 0x45	; 69
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	f9 01       	movw	r30, r18
    47fa:	20 81       	ld	r18, Z
    47fc:	21 60       	ori	r18, 0x01	; 1
    47fe:	fc 01       	movw	r30, r24
    4800:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4802:	8e e6       	ldi	r24, 0x6E	; 110
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	2e e6       	ldi	r18, 0x6E	; 110
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	f9 01       	movw	r30, r18
    480c:	20 81       	ld	r18, Z
    480e:	21 60       	ori	r18, 0x01	; 1
    4810:	fc 01       	movw	r30, r24
    4812:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4814:	81 e8       	ldi	r24, 0x81	; 129
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	fc 01       	movw	r30, r24
    481a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    481c:	81 e8       	ldi	r24, 0x81	; 129
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	21 e8       	ldi	r18, 0x81	; 129
    4822:	30 e0       	ldi	r19, 0x00	; 0
    4824:	f9 01       	movw	r30, r18
    4826:	20 81       	ld	r18, Z
    4828:	22 60       	ori	r18, 0x02	; 2
    482a:	fc 01       	movw	r30, r24
    482c:	20 83       	st	Z, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    482e:	81 e8       	ldi	r24, 0x81	; 129
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	21 e8       	ldi	r18, 0x81	; 129
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	f9 01       	movw	r30, r18
    4838:	20 81       	ld	r18, Z
    483a:	21 60       	ori	r18, 0x01	; 1
    483c:	fc 01       	movw	r30, r24
    483e:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4840:	80 e8       	ldi	r24, 0x80	; 128
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	20 e8       	ldi	r18, 0x80	; 128
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	f9 01       	movw	r30, r18
    484a:	20 81       	ld	r18, Z
    484c:	21 60       	ori	r18, 0x01	; 1
    484e:	fc 01       	movw	r30, r24
    4850:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4852:	81 eb       	ldi	r24, 0xB1	; 177
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	21 eb       	ldi	r18, 0xB1	; 177
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	f9 01       	movw	r30, r18
    485c:	20 81       	ld	r18, Z
    485e:	24 60       	ori	r18, 0x04	; 4
    4860:	fc 01       	movw	r30, r24
    4862:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4864:	80 eb       	ldi	r24, 0xB0	; 176
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	20 eb       	ldi	r18, 0xB0	; 176
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	f9 01       	movw	r30, r18
    486e:	20 81       	ld	r18, Z
    4870:	21 60       	ori	r18, 0x01	; 1
    4872:	fc 01       	movw	r30, r24
    4874:	20 83       	st	Z, r18
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4876:	81 e9       	ldi	r24, 0x91	; 145
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	21 e9       	ldi	r18, 0x91	; 145
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	f9 01       	movw	r30, r18
    4880:	20 81       	ld	r18, Z
    4882:	22 60       	ori	r18, 0x02	; 2
    4884:	fc 01       	movw	r30, r24
    4886:	20 83       	st	Z, r18
	sbi(TCCR3B, CS30);
    4888:	81 e9       	ldi	r24, 0x91	; 145
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	21 e9       	ldi	r18, 0x91	; 145
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	f9 01       	movw	r30, r18
    4892:	20 81       	ld	r18, Z
    4894:	21 60       	ori	r18, 0x01	; 1
    4896:	fc 01       	movw	r30, r24
    4898:	20 83       	st	Z, r18
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    489a:	80 e9       	ldi	r24, 0x90	; 144
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	20 e9       	ldi	r18, 0x90	; 144
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	f9 01       	movw	r30, r18
    48a4:	20 81       	ld	r18, Z
    48a6:	21 60       	ori	r18, 0x01	; 1
    48a8:	fc 01       	movw	r30, r24
    48aa:	20 83       	st	Z, r18
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    48ac:	81 ea       	ldi	r24, 0xA1	; 161
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	21 ea       	ldi	r18, 0xA1	; 161
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	f9 01       	movw	r30, r18
    48b6:	20 81       	ld	r18, Z
    48b8:	22 60       	ori	r18, 0x02	; 2
    48ba:	fc 01       	movw	r30, r24
    48bc:	20 83       	st	Z, r18
	sbi(TCCR4B, CS40);
    48be:	81 ea       	ldi	r24, 0xA1	; 161
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	21 ea       	ldi	r18, 0xA1	; 161
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	f9 01       	movw	r30, r18
    48c8:	20 81       	ld	r18, Z
    48ca:	21 60       	ori	r18, 0x01	; 1
    48cc:	fc 01       	movw	r30, r24
    48ce:	20 83       	st	Z, r18
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    48d0:	80 ea       	ldi	r24, 0xA0	; 160
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	20 ea       	ldi	r18, 0xA0	; 160
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	f9 01       	movw	r30, r18
    48da:	20 81       	ld	r18, Z
    48dc:	21 60       	ori	r18, 0x01	; 1
    48de:	fc 01       	movw	r30, r24
    48e0:	20 83       	st	Z, r18
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    48e2:	81 e2       	ldi	r24, 0x21	; 33
    48e4:	91 e0       	ldi	r25, 0x01	; 1
    48e6:	21 e2       	ldi	r18, 0x21	; 33
    48e8:	31 e0       	ldi	r19, 0x01	; 1
    48ea:	f9 01       	movw	r30, r18
    48ec:	20 81       	ld	r18, Z
    48ee:	22 60       	ori	r18, 0x02	; 2
    48f0:	fc 01       	movw	r30, r24
    48f2:	20 83       	st	Z, r18
	sbi(TCCR5B, CS50);
    48f4:	81 e2       	ldi	r24, 0x21	; 33
    48f6:	91 e0       	ldi	r25, 0x01	; 1
    48f8:	21 e2       	ldi	r18, 0x21	; 33
    48fa:	31 e0       	ldi	r19, 0x01	; 1
    48fc:	f9 01       	movw	r30, r18
    48fe:	20 81       	ld	r18, Z
    4900:	21 60       	ori	r18, 0x01	; 1
    4902:	fc 01       	movw	r30, r24
    4904:	20 83       	st	Z, r18
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    4906:	80 e2       	ldi	r24, 0x20	; 32
    4908:	91 e0       	ldi	r25, 0x01	; 1
    490a:	20 e2       	ldi	r18, 0x20	; 32
    490c:	31 e0       	ldi	r19, 0x01	; 1
    490e:	f9 01       	movw	r30, r18
    4910:	20 81       	ld	r18, Z
    4912:	21 60       	ori	r18, 0x01	; 1
    4914:	fc 01       	movw	r30, r24
    4916:	20 83       	st	Z, r18
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4918:	8a e7       	ldi	r24, 0x7A	; 122
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	2a e7       	ldi	r18, 0x7A	; 122
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	f9 01       	movw	r30, r18
    4922:	20 81       	ld	r18, Z
    4924:	24 60       	ori	r18, 0x04	; 4
    4926:	fc 01       	movw	r30, r24
    4928:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS1);
    492a:	8a e7       	ldi	r24, 0x7A	; 122
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	2a e7       	ldi	r18, 0x7A	; 122
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	f9 01       	movw	r30, r18
    4934:	20 81       	ld	r18, Z
    4936:	22 60       	ori	r18, 0x02	; 2
    4938:	fc 01       	movw	r30, r24
    493a:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS0);
    493c:	8a e7       	ldi	r24, 0x7A	; 122
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	2a e7       	ldi	r18, 0x7A	; 122
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	f9 01       	movw	r30, r18
    4946:	20 81       	ld	r18, Z
    4948:	21 60       	ori	r18, 0x01	; 1
    494a:	fc 01       	movw	r30, r24
    494c:	20 83       	st	Z, r18
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    494e:	8a e7       	ldi	r24, 0x7A	; 122
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	2a e7       	ldi	r18, 0x7A	; 122
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	f9 01       	movw	r30, r18
    4958:	20 81       	ld	r18, Z
    495a:	20 68       	ori	r18, 0x80	; 128
    495c:	fc 01       	movw	r30, r24
    495e:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4960:	81 ec       	ldi	r24, 0xC1	; 193
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	fc 01       	movw	r30, r24
    4966:	10 82       	st	Z, r1
#endif
}
    4968:	00 00       	nop
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	08 95       	ret

00004970 <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	1f 92       	push	r1
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    497c:	89 81       	ldd	r24, Y+1	; 0x01
    497e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <analog_reference>
}
    4982:	00 00       	nop
    4984:	0f 90       	pop	r0
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	08 95       	ret

0000498c <analogRead>:

int analogRead(uint8_t pin)
{
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	00 d0       	rcall	.+0      	; 0x4992 <analogRead+0x6>
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	8b 83       	std	Y+3, r24	; 0x03
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    4998:	8b 81       	ldd	r24, Y+3	; 0x03
    499a:	86 33       	cpi	r24, 0x36	; 54
    499c:	18 f0       	brcs	.+6      	; 0x49a4 <analogRead+0x18>
    499e:	8b 81       	ldd	r24, Y+3	; 0x03
    49a0:	86 53       	subi	r24, 0x36	; 54
    49a2:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    49a4:	8b e7       	ldi	r24, 0x7B	; 123
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	2b e7       	ldi	r18, 0x7B	; 123
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	f9 01       	movw	r30, r18
    49ae:	20 81       	ld	r18, Z
    49b0:	42 2f       	mov	r20, r18
    49b2:	47 7f       	andi	r20, 0xF7	; 247
    49b4:	2b 81       	ldd	r18, Y+3	; 0x03
    49b6:	26 95       	lsr	r18
    49b8:	26 95       	lsr	r18
    49ba:	26 95       	lsr	r18
    49bc:	22 2f       	mov	r18, r18
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	21 70       	andi	r18, 0x01	; 1
    49c2:	33 27       	eor	r19, r19
    49c4:	22 0f       	add	r18, r18
    49c6:	33 1f       	adc	r19, r19
    49c8:	22 0f       	add	r18, r18
    49ca:	33 1f       	adc	r19, r19
    49cc:	22 0f       	add	r18, r18
    49ce:	33 1f       	adc	r19, r19
    49d0:	24 2b       	or	r18, r20
    49d2:	fc 01       	movw	r30, r24
    49d4:	20 83       	st	Z, r18
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    49d6:	8c e7       	ldi	r24, 0x7C	; 124
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <analog_reference>
    49de:	22 2f       	mov	r18, r18
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	00 24       	eor	r0, r0
    49e4:	36 95       	lsr	r19
    49e6:	27 95       	ror	r18
    49e8:	07 94       	ror	r0
    49ea:	36 95       	lsr	r19
    49ec:	27 95       	ror	r18
    49ee:	07 94       	ror	r0
    49f0:	32 2f       	mov	r19, r18
    49f2:	20 2d       	mov	r18, r0
    49f4:	32 2f       	mov	r19, r18
    49f6:	2b 81       	ldd	r18, Y+3	; 0x03
    49f8:	27 70       	andi	r18, 0x07	; 7
    49fa:	23 2b       	or	r18, r19
    49fc:	fc 01       	movw	r30, r24
    49fe:	20 83       	st	Z, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4a00:	8a e7       	ldi	r24, 0x7A	; 122
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	2a e7       	ldi	r18, 0x7A	; 122
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	f9 01       	movw	r30, r18
    4a0a:	20 81       	ld	r18, Z
    4a0c:	20 64       	ori	r18, 0x40	; 64
    4a0e:	fc 01       	movw	r30, r24
    4a10:	20 83       	st	Z, r18

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4a12:	00 00       	nop
    4a14:	8a e7       	ldi	r24, 0x7A	; 122
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	fc 01       	movw	r30, r24
    4a1a:	80 81       	ld	r24, Z
    4a1c:	88 2f       	mov	r24, r24
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	80 74       	andi	r24, 0x40	; 64
    4a22:	99 27       	eor	r25, r25
    4a24:	89 2b       	or	r24, r25
    4a26:	b1 f7       	brne	.-20     	; 0x4a14 <analogRead+0x88>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4a28:	88 e7       	ldi	r24, 0x78	; 120
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	fc 01       	movw	r30, r24
    4a2e:	80 81       	ld	r24, Z
    4a30:	89 83       	std	Y+1, r24	; 0x01
	high = ADCH;
    4a32:	89 e7       	ldi	r24, 0x79	; 121
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	fc 01       	movw	r30, r24
    4a38:	80 81       	ld	r24, Z
    4a3a:	8a 83       	std	Y+2, r24	; 0x02
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3e:	88 2f       	mov	r24, r24
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	38 2f       	mov	r19, r24
    4a44:	22 27       	eor	r18, r18
    4a46:	89 81       	ldd	r24, Y+1	; 0x01
    4a48:	88 2f       	mov	r24, r24
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	82 2b       	or	r24, r18
    4a4e:	93 2b       	or	r25, r19
}
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
    4a54:	0f 90       	pop	r0
    4a56:	df 91       	pop	r29
    4a58:	cf 91       	pop	r28
    4a5a:	08 95       	ret

00004a5c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    4a60:	00 d0       	rcall	.+0      	; 0x4a62 <analogWrite+0x6>
    4a62:	00 d0       	rcall	.+0      	; 0x4a64 <analogWrite+0x8>
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	8c 83       	std	Y+4, r24	; 0x04
    4a6a:	7e 83       	std	Y+6, r23	; 0x06
    4a6c:	6d 83       	std	Y+5, r22	; 0x05
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    4a6e:	61 e0       	ldi	r22, 0x01	; 1
    4a70:	8c 81       	ldd	r24, Y+4	; 0x04
    4a72:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <pinMode>
	if (val == 0)
    4a76:	8d 81       	ldd	r24, Y+5	; 0x05
    4a78:	9e 81       	ldd	r25, Y+6	; 0x06
    4a7a:	89 2b       	or	r24, r25
    4a7c:	29 f4       	brne	.+10     	; 0x4a88 <analogWrite+0x2c>
	{
		digitalWrite(pin, LOW);
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	8c 81       	ldd	r24, Y+4	; 0x04
    4a82:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4a86:	4e c1       	rjmp	.+668    	; 0x4d24 <analogWrite+0x2c8>
	pinMode(pin, OUTPUT);
	if (val == 0)
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    4a88:	8d 81       	ldd	r24, Y+5	; 0x05
    4a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a8e:	91 05       	cpc	r25, r1
    4a90:	29 f4       	brne	.+10     	; 0x4a9c <analogWrite+0x40>
	{
		digitalWrite(pin, HIGH);
    4a92:	61 e0       	ldi	r22, 0x01	; 1
    4a94:	8c 81       	ldd	r24, Y+4	; 0x04
    4a96:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4a9a:	44 c1       	rjmp	.+648    	; 0x4d24 <analogWrite+0x2c8>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    4a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a9e:	88 2f       	mov	r24, r24
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	88 51       	subi	r24, 0x18	; 24
    4aa4:	9c 4f       	sbci	r25, 0xFC	; 252
    4aa6:	9a 83       	std	Y+2, r25	; 0x02
    4aa8:	89 83       	std	Y+1, r24	; 0x01
    4aaa:	89 81       	ldd	r24, Y+1	; 0x01
    4aac:	9a 81       	ldd	r25, Y+2	; 0x02
    4aae:	fc 01       	movw	r30, r24
    4ab0:	84 91       	lpm	r24, Z
    4ab2:	8b 83       	std	Y+3, r24	; 0x03
    4ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab6:	88 2f       	mov	r24, r24
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	09 2e       	mov	r0, r25
    4abc:	00 0c       	add	r0, r0
    4abe:	aa 0b       	sbc	r26, r26
    4ac0:	bb 0b       	sbc	r27, r27
    4ac2:	41 e0       	ldi	r20, 0x01	; 1
    4ac4:	50 e0       	ldi	r21, 0x00	; 0
    4ac6:	21 e1       	ldi	r18, 0x11	; 17
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	84 1b       	sub	r24, r20
    4acc:	95 0b       	sbc	r25, r21
    4ace:	28 17       	cp	r18, r24
    4ad0:	39 07       	cpc	r19, r25
    4ad2:	08 f4       	brcc	.+2      	; 0x4ad6 <analogWrite+0x7a>
    4ad4:	18 c1       	rjmp	.+560    	; 0x4d06 <analogWrite+0x2aa>
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	88 27       	eor	r24, r24
    4ada:	ee 57       	subi	r30, 0x7E	; 126
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	8f 4f       	sbci	r24, 0xFF	; 255
    4ae0:	0c 94 45 43 	jmp	0x868a	; 0x868a <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    4ae4:	84 e4       	ldi	r24, 0x44	; 68
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	24 e4       	ldi	r18, 0x44	; 68
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	f9 01       	movw	r30, r18
    4aee:	20 81       	ld	r18, Z
    4af0:	20 68       	ori	r18, 0x80	; 128
    4af2:	fc 01       	movw	r30, r24
    4af4:	20 83       	st	Z, r18
				OCR0A = val; // set pwm duty
    4af6:	87 e4       	ldi	r24, 0x47	; 71
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	2d 81       	ldd	r18, Y+5	; 0x05
    4afc:	fc 01       	movw	r30, r24
    4afe:	20 83       	st	Z, r18
				break;
    4b00:	11 c1       	rjmp	.+546    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    4b02:	84 e4       	ldi	r24, 0x44	; 68
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	24 e4       	ldi	r18, 0x44	; 68
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	f9 01       	movw	r30, r18
    4b0c:	20 81       	ld	r18, Z
    4b0e:	20 62       	ori	r18, 0x20	; 32
    4b10:	fc 01       	movw	r30, r24
    4b12:	20 83       	st	Z, r18
				OCR0B = val; // set pwm duty
    4b14:	88 e4       	ldi	r24, 0x48	; 72
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	2d 81       	ldd	r18, Y+5	; 0x05
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	20 83       	st	Z, r18
				break;
    4b1e:	02 c1       	rjmp	.+516    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    4b20:	80 e8       	ldi	r24, 0x80	; 128
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	20 e8       	ldi	r18, 0x80	; 128
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	f9 01       	movw	r30, r18
    4b2a:	20 81       	ld	r18, Z
    4b2c:	20 68       	ori	r18, 0x80	; 128
    4b2e:	fc 01       	movw	r30, r24
    4b30:	20 83       	st	Z, r18
				OCR1A = val; // set pwm duty
    4b32:	88 e8       	ldi	r24, 0x88	; 136
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	2d 81       	ldd	r18, Y+5	; 0x05
    4b38:	3e 81       	ldd	r19, Y+6	; 0x06
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	31 83       	std	Z+1, r19	; 0x01
    4b3e:	20 83       	st	Z, r18
				break;
    4b40:	f1 c0       	rjmp	.+482    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    4b42:	80 e8       	ldi	r24, 0x80	; 128
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	20 e8       	ldi	r18, 0x80	; 128
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	f9 01       	movw	r30, r18
    4b4c:	20 81       	ld	r18, Z
    4b4e:	20 62       	ori	r18, 0x20	; 32
    4b50:	fc 01       	movw	r30, r24
    4b52:	20 83       	st	Z, r18
				OCR1B = val; // set pwm duty
    4b54:	8a e8       	ldi	r24, 0x8A	; 138
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	2d 81       	ldd	r18, Y+5	; 0x05
    4b5a:	3e 81       	ldd	r19, Y+6	; 0x06
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	31 83       	std	Z+1, r19	; 0x01
    4b60:	20 83       	st	Z, r18
				break;
    4b62:	e0 c0       	rjmp	.+448    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    4b64:	80 e8       	ldi	r24, 0x80	; 128
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	20 e8       	ldi	r18, 0x80	; 128
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	f9 01       	movw	r30, r18
    4b6e:	20 81       	ld	r18, Z
    4b70:	28 60       	ori	r18, 0x08	; 8
    4b72:	fc 01       	movw	r30, r24
    4b74:	20 83       	st	Z, r18
				OCR1C = val; // set pwm duty
    4b76:	8c e8       	ldi	r24, 0x8C	; 140
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	2d 81       	ldd	r18, Y+5	; 0x05
    4b7c:	3e 81       	ldd	r19, Y+6	; 0x06
    4b7e:	fc 01       	movw	r30, r24
    4b80:	31 83       	std	Z+1, r19	; 0x01
    4b82:	20 83       	st	Z, r18
				break;
    4b84:	cf c0       	rjmp	.+414    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    4b86:	80 eb       	ldi	r24, 0xB0	; 176
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	20 eb       	ldi	r18, 0xB0	; 176
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	f9 01       	movw	r30, r18
    4b90:	20 81       	ld	r18, Z
    4b92:	20 68       	ori	r18, 0x80	; 128
    4b94:	fc 01       	movw	r30, r24
    4b96:	20 83       	st	Z, r18
				OCR2A = val; // set pwm duty
    4b98:	83 eb       	ldi	r24, 0xB3	; 179
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	20 83       	st	Z, r18
				break;
    4ba2:	c0 c0       	rjmp	.+384    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    4ba4:	80 eb       	ldi	r24, 0xB0	; 176
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	20 eb       	ldi	r18, 0xB0	; 176
    4baa:	30 e0       	ldi	r19, 0x00	; 0
    4bac:	f9 01       	movw	r30, r18
    4bae:	20 81       	ld	r18, Z
    4bb0:	20 62       	ori	r18, 0x20	; 32
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	20 83       	st	Z, r18
				OCR2B = val; // set pwm duty
    4bb6:	84 eb       	ldi	r24, 0xB4	; 180
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	2d 81       	ldd	r18, Y+5	; 0x05
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	20 83       	st	Z, r18
				break;
    4bc0:	b1 c0       	rjmp	.+354    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    4bc2:	80 e9       	ldi	r24, 0x90	; 144
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	20 e9       	ldi	r18, 0x90	; 144
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	f9 01       	movw	r30, r18
    4bcc:	20 81       	ld	r18, Z
    4bce:	20 68       	ori	r18, 0x80	; 128
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	20 83       	st	Z, r18
				OCR3A = val; // set pwm duty
    4bd4:	88 e9       	ldi	r24, 0x98	; 152
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	2d 81       	ldd	r18, Y+5	; 0x05
    4bda:	3e 81       	ldd	r19, Y+6	; 0x06
    4bdc:	fc 01       	movw	r30, r24
    4bde:	31 83       	std	Z+1, r19	; 0x01
    4be0:	20 83       	st	Z, r18
				break;
    4be2:	a0 c0       	rjmp	.+320    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    4be4:	80 e9       	ldi	r24, 0x90	; 144
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	20 e9       	ldi	r18, 0x90	; 144
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	f9 01       	movw	r30, r18
    4bee:	20 81       	ld	r18, Z
    4bf0:	20 62       	ori	r18, 0x20	; 32
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	20 83       	st	Z, r18
				OCR3B = val; // set pwm duty
    4bf6:	8a e9       	ldi	r24, 0x9A	; 154
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	2d 81       	ldd	r18, Y+5	; 0x05
    4bfc:	3e 81       	ldd	r19, Y+6	; 0x06
    4bfe:	fc 01       	movw	r30, r24
    4c00:	31 83       	std	Z+1, r19	; 0x01
    4c02:	20 83       	st	Z, r18
				break;
    4c04:	8f c0       	rjmp	.+286    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    4c06:	80 e9       	ldi	r24, 0x90	; 144
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	20 e9       	ldi	r18, 0x90	; 144
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	f9 01       	movw	r30, r18
    4c10:	20 81       	ld	r18, Z
    4c12:	28 60       	ori	r18, 0x08	; 8
    4c14:	fc 01       	movw	r30, r24
    4c16:	20 83       	st	Z, r18
				OCR3C = val; // set pwm duty
    4c18:	8c e9       	ldi	r24, 0x9C	; 156
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    4c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    4c20:	fc 01       	movw	r30, r24
    4c22:	31 83       	std	Z+1, r19	; 0x01
    4c24:	20 83       	st	Z, r18
				break;
    4c26:	7e c0       	rjmp	.+252    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    4c28:	80 ea       	ldi	r24, 0xA0	; 160
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	20 ea       	ldi	r18, 0xA0	; 160
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	f9 01       	movw	r30, r18
    4c32:	20 81       	ld	r18, Z
    4c34:	20 68       	ori	r18, 0x80	; 128
    4c36:	fc 01       	movw	r30, r24
    4c38:	20 83       	st	Z, r18
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    4c3a:	80 ea       	ldi	r24, 0xA0	; 160
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	20 ea       	ldi	r18, 0xA0	; 160
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	f9 01       	movw	r30, r18
    4c44:	20 81       	ld	r18, Z
    4c46:	2f 7b       	andi	r18, 0xBF	; 191
    4c48:	fc 01       	movw	r30, r24
    4c4a:	20 83       	st	Z, r18
				#endif
				OCR4A = val;	// set pwm duty
    4c4c:	88 ea       	ldi	r24, 0xA8	; 168
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	2d 81       	ldd	r18, Y+5	; 0x05
    4c52:	3e 81       	ldd	r19, Y+6	; 0x06
    4c54:	fc 01       	movw	r30, r24
    4c56:	31 83       	std	Z+1, r19	; 0x01
    4c58:	20 83       	st	Z, r18
				break;
    4c5a:	64 c0       	rjmp	.+200    	; 0x4d24 <analogWrite+0x2c8>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    4c5c:	80 ea       	ldi	r24, 0xA0	; 160
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	20 ea       	ldi	r18, 0xA0	; 160
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	f9 01       	movw	r30, r18
    4c66:	20 81       	ld	r18, Z
    4c68:	20 62       	ori	r18, 0x20	; 32
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	20 83       	st	Z, r18
				OCR4B = val; // set pwm duty
    4c6e:	8a ea       	ldi	r24, 0xAA	; 170
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	2d 81       	ldd	r18, Y+5	; 0x05
    4c74:	3e 81       	ldd	r19, Y+6	; 0x06
    4c76:	fc 01       	movw	r30, r24
    4c78:	31 83       	std	Z+1, r19	; 0x01
    4c7a:	20 83       	st	Z, r18
				break;
    4c7c:	53 c0       	rjmp	.+166    	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    4c7e:	80 ea       	ldi	r24, 0xA0	; 160
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	20 ea       	ldi	r18, 0xA0	; 160
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	f9 01       	movw	r30, r18
    4c88:	20 81       	ld	r18, Z
    4c8a:	28 60       	ori	r18, 0x08	; 8
    4c8c:	fc 01       	movw	r30, r24
    4c8e:	20 83       	st	Z, r18
				OCR4C = val; // set pwm duty
    4c90:	8c ea       	ldi	r24, 0xAC	; 172
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	2d 81       	ldd	r18, Y+5	; 0x05
    4c96:	3e 81       	ldd	r19, Y+6	; 0x06
    4c98:	fc 01       	movw	r30, r24
    4c9a:	31 83       	std	Z+1, r19	; 0x01
    4c9c:	20 83       	st	Z, r18
				break;
    4c9e:	42 c0       	rjmp	.+132    	; 0x4d24 <analogWrite+0x2c8>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    4ca0:	80 e2       	ldi	r24, 0x20	; 32
    4ca2:	91 e0       	ldi	r25, 0x01	; 1
    4ca4:	20 e2       	ldi	r18, 0x20	; 32
    4ca6:	31 e0       	ldi	r19, 0x01	; 1
    4ca8:	f9 01       	movw	r30, r18
    4caa:	20 81       	ld	r18, Z
    4cac:	20 68       	ori	r18, 0x80	; 128
    4cae:	fc 01       	movw	r30, r24
    4cb0:	20 83       	st	Z, r18
				OCR5A = val; // set pwm duty
    4cb2:	88 e2       	ldi	r24, 0x28	; 40
    4cb4:	91 e0       	ldi	r25, 0x01	; 1
    4cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    4cb8:	3e 81       	ldd	r19, Y+6	; 0x06
    4cba:	fc 01       	movw	r30, r24
    4cbc:	31 83       	std	Z+1, r19	; 0x01
    4cbe:	20 83       	st	Z, r18
				break;
    4cc0:	31 c0       	rjmp	.+98     	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    4cc2:	80 e2       	ldi	r24, 0x20	; 32
    4cc4:	91 e0       	ldi	r25, 0x01	; 1
    4cc6:	20 e2       	ldi	r18, 0x20	; 32
    4cc8:	31 e0       	ldi	r19, 0x01	; 1
    4cca:	f9 01       	movw	r30, r18
    4ccc:	20 81       	ld	r18, Z
    4cce:	20 62       	ori	r18, 0x20	; 32
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	20 83       	st	Z, r18
				OCR5B = val; // set pwm duty
    4cd4:	8a e2       	ldi	r24, 0x2A	; 42
    4cd6:	91 e0       	ldi	r25, 0x01	; 1
    4cd8:	2d 81       	ldd	r18, Y+5	; 0x05
    4cda:	3e 81       	ldd	r19, Y+6	; 0x06
    4cdc:	fc 01       	movw	r30, r24
    4cde:	31 83       	std	Z+1, r19	; 0x01
    4ce0:	20 83       	st	Z, r18
				break;
    4ce2:	20 c0       	rjmp	.+64     	; 0x4d24 <analogWrite+0x2c8>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    4ce4:	80 e2       	ldi	r24, 0x20	; 32
    4ce6:	91 e0       	ldi	r25, 0x01	; 1
    4ce8:	20 e2       	ldi	r18, 0x20	; 32
    4cea:	31 e0       	ldi	r19, 0x01	; 1
    4cec:	f9 01       	movw	r30, r18
    4cee:	20 81       	ld	r18, Z
    4cf0:	28 60       	ori	r18, 0x08	; 8
    4cf2:	fc 01       	movw	r30, r24
    4cf4:	20 83       	st	Z, r18
				OCR5C = val; // set pwm duty
    4cf6:	8c e2       	ldi	r24, 0x2C	; 44
    4cf8:	91 e0       	ldi	r25, 0x01	; 1
    4cfa:	2d 81       	ldd	r18, Y+5	; 0x05
    4cfc:	3e 81       	ldd	r19, Y+6	; 0x06
    4cfe:	fc 01       	movw	r30, r24
    4d00:	31 83       	std	Z+1, r19	; 0x01
    4d02:	20 83       	st	Z, r18
				break;
    4d04:	0f c0       	rjmp	.+30     	; 0x4d24 <analogWrite+0x2c8>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    4d06:	8d 81       	ldd	r24, Y+5	; 0x05
    4d08:	9e 81       	ldd	r25, Y+6	; 0x06
    4d0a:	80 38       	cpi	r24, 0x80	; 128
    4d0c:	91 05       	cpc	r25, r1
    4d0e:	2c f4       	brge	.+10     	; 0x4d1a <analogWrite+0x2be>
					digitalWrite(pin, LOW);
    4d10:	60 e0       	ldi	r22, 0x00	; 0
    4d12:	8c 81       	ldd	r24, Y+4	; 0x04
    4d14:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <analogWrite+0x2c8>
			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
    4d1a:	61 e0       	ldi	r22, 0x01	; 1
    4d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d1e:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
				}
		}
	}
}
    4d22:	00 c0       	rjmp	.+0      	; 0x4d24 <analogWrite+0x2c8>
    4d24:	00 00       	nop
    4d26:	26 96       	adiw	r28, 0x06	; 6
    4d28:	0f b6       	in	r0, 0x3f	; 63
    4d2a:	f8 94       	cli
    4d2c:	de bf       	out	0x3e, r29	; 62
    4d2e:	0f be       	out	0x3f, r0	; 63
    4d30:	cd bf       	out	0x3d, r28	; 61
    4d32:	df 91       	pop	r29
    4d34:	cf 91       	pop	r28
    4d36:	08 95       	ret

00004d38 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	69 97       	sbiw	r28, 0x19	; 25
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	cd bf       	out	0x3d, r28	; 61
    4d4c:	88 8f       	std	Y+24, r24	; 0x18
    4d4e:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
    4d50:	88 8d       	ldd	r24, Y+24	; 0x18
    4d52:	88 2f       	mov	r24, r24
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	8c 52       	subi	r24, 0x2C	; 44
    4d58:	9c 4f       	sbci	r25, 0xFC	; 252
    4d5a:	9a 83       	std	Y+2, r25	; 0x02
    4d5c:	89 83       	std	Y+1, r24	; 0x01
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	9a 81       	ldd	r25, Y+2	; 0x02
    4d62:	fc 01       	movw	r30, r24
    4d64:	84 91       	lpm	r24, Z
    4d66:	8b 83       	std	Y+3, r24	; 0x03
    4d68:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    4d6c:	88 8d       	ldd	r24, Y+24	; 0x18
    4d6e:	88 2f       	mov	r24, r24
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	80 54       	subi	r24, 0x40	; 64
    4d74:	9c 4f       	sbci	r25, 0xFC	; 252
    4d76:	9e 83       	std	Y+6, r25	; 0x06
    4d78:	8d 83       	std	Y+5, r24	; 0x05
    4d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d7e:	fc 01       	movw	r30, r24
    4d80:	84 91       	lpm	r24, Z
    4d82:	8f 83       	std	Y+7, r24	; 0x07
    4d84:	8f 81       	ldd	r24, Y+7	; 0x07
    4d86:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4d88:	88 85       	ldd	r24, Y+8	; 0x08
    4d8a:	88 23       	and	r24, r24
    4d8c:	09 f4       	brne	.+2      	; 0x4d90 <pinMode+0x58>
    4d8e:	95 c0       	rjmp	.+298    	; 0x4eba <pinMode+0x182>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4d90:	88 85       	ldd	r24, Y+8	; 0x08
    4d92:	88 2f       	mov	r24, r24
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	88 0f       	add	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	8e 55       	subi	r24, 0x5E	; 94
    4d9c:	9c 4f       	sbci	r25, 0xFC	; 252
    4d9e:	9a 87       	std	Y+10, r25	; 0x0a
    4da0:	89 87       	std	Y+9, r24	; 0x09
    4da2:	89 85       	ldd	r24, Y+9	; 0x09
    4da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da6:	fc 01       	movw	r30, r24
    4da8:	25 91       	lpm	r18, Z+
    4daa:	34 91       	lpm	r19, Z
    4dac:	cf 01       	movw	r24, r30
    4dae:	3c 87       	std	Y+12, r19	; 0x0c
    4db0:	2b 87       	std	Y+11, r18	; 0x0b
    4db2:	9a 87       	std	Y+10, r25	; 0x0a
    4db4:	89 87       	std	Y+9, r24	; 0x09
    4db6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4db8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dba:	9e 87       	std	Y+14, r25	; 0x0e
    4dbc:	8d 87       	std	Y+13, r24	; 0x0d
	out = portOutputRegister(port);
    4dbe:	88 85       	ldd	r24, Y+8	; 0x08
    4dc0:	88 2f       	mov	r24, r24
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	88 0f       	add	r24, r24
    4dc6:	99 1f       	adc	r25, r25
    4dc8:	84 55       	subi	r24, 0x54	; 84
    4dca:	9c 4f       	sbci	r25, 0xFC	; 252
    4dcc:	98 8b       	std	Y+16, r25	; 0x10
    4dce:	8f 87       	std	Y+15, r24	; 0x0f
    4dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd2:	98 89       	ldd	r25, Y+16	; 0x10
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	25 91       	lpm	r18, Z+
    4dd8:	34 91       	lpm	r19, Z
    4dda:	cf 01       	movw	r24, r30
    4ddc:	3a 8b       	std	Y+18, r19	; 0x12
    4dde:	29 8b       	std	Y+17, r18	; 0x11
    4de0:	98 8b       	std	Y+16, r25	; 0x10
    4de2:	8f 87       	std	Y+15, r24	; 0x0f
    4de4:	89 89       	ldd	r24, Y+17	; 0x11
    4de6:	9a 89       	ldd	r25, Y+18	; 0x12
    4de8:	9c 8b       	std	Y+20, r25	; 0x14
    4dea:	8b 8b       	std	Y+19, r24	; 0x13

	if (mode == INPUT) { 
    4dec:	89 8d       	ldd	r24, Y+25	; 0x19
    4dee:	88 23       	and	r24, r24
    4df0:	31 f5       	brne	.+76     	; 0x4e3e <pinMode+0x106>
		uint8_t oldSREG = SREG;
    4df2:	8f e5       	ldi	r24, 0x5F	; 95
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	fc 01       	movw	r30, r24
    4df8:	80 81       	ld	r24, Z
    4dfa:	8d 8b       	std	Y+21, r24	; 0x15
                cli();
    4dfc:	f8 94       	cli
		*reg &= ~bit;
    4dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e02:	fc 01       	movw	r30, r24
    4e04:	80 81       	ld	r24, Z
    4e06:	98 2f       	mov	r25, r24
    4e08:	8c 81       	ldd	r24, Y+4	; 0x04
    4e0a:	80 95       	com	r24
    4e0c:	89 23       	and	r24, r25
    4e0e:	28 2f       	mov	r18, r24
    4e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e14:	fc 01       	movw	r30, r24
    4e16:	20 83       	st	Z, r18
		*out &= ~bit;
    4e18:	8b 89       	ldd	r24, Y+19	; 0x13
    4e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e1c:	fc 01       	movw	r30, r24
    4e1e:	80 81       	ld	r24, Z
    4e20:	98 2f       	mov	r25, r24
    4e22:	8c 81       	ldd	r24, Y+4	; 0x04
    4e24:	80 95       	com	r24
    4e26:	89 23       	and	r24, r25
    4e28:	28 2f       	mov	r18, r24
    4e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e2e:	fc 01       	movw	r30, r24
    4e30:	20 83       	st	Z, r18
		SREG = oldSREG;
    4e32:	8f e5       	ldi	r24, 0x5F	; 95
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	2d 89       	ldd	r18, Y+21	; 0x15
    4e38:	fc 01       	movw	r30, r24
    4e3a:	20 83       	st	Z, r18
    4e3c:	3f c0       	rjmp	.+126    	; 0x4ebc <pinMode+0x184>
	} else if (mode == INPUT_PULLUP) {
    4e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    4e40:	82 30       	cpi	r24, 0x02	; 2
    4e42:	21 f5       	brne	.+72     	; 0x4e8c <pinMode+0x154>
		uint8_t oldSREG = SREG;
    4e44:	8f e5       	ldi	r24, 0x5F	; 95
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	fc 01       	movw	r30, r24
    4e4a:	80 81       	ld	r24, Z
    4e4c:	8e 8b       	std	Y+22, r24	; 0x16
                cli();
    4e4e:	f8 94       	cli
		*reg &= ~bit;
    4e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e54:	fc 01       	movw	r30, r24
    4e56:	80 81       	ld	r24, Z
    4e58:	98 2f       	mov	r25, r24
    4e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e5c:	80 95       	com	r24
    4e5e:	89 23       	and	r24, r25
    4e60:	28 2f       	mov	r18, r24
    4e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e66:	fc 01       	movw	r30, r24
    4e68:	20 83       	st	Z, r18
		*out |= bit;
    4e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e6e:	fc 01       	movw	r30, r24
    4e70:	90 81       	ld	r25, Z
    4e72:	8c 81       	ldd	r24, Y+4	; 0x04
    4e74:	29 2f       	mov	r18, r25
    4e76:	28 2b       	or	r18, r24
    4e78:	8b 89       	ldd	r24, Y+19	; 0x13
    4e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e7c:	fc 01       	movw	r30, r24
    4e7e:	20 83       	st	Z, r18
		SREG = oldSREG;
    4e80:	8f e5       	ldi	r24, 0x5F	; 95
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	2e 89       	ldd	r18, Y+22	; 0x16
    4e86:	fc 01       	movw	r30, r24
    4e88:	20 83       	st	Z, r18
    4e8a:	18 c0       	rjmp	.+48     	; 0x4ebc <pinMode+0x184>
	} else {
		uint8_t oldSREG = SREG;
    4e8c:	8f e5       	ldi	r24, 0x5F	; 95
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	fc 01       	movw	r30, r24
    4e92:	80 81       	ld	r24, Z
    4e94:	8f 8b       	std	Y+23, r24	; 0x17
                cli();
    4e96:	f8 94       	cli
		*reg |= bit;
    4e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e9c:	fc 01       	movw	r30, r24
    4e9e:	90 81       	ld	r25, Z
    4ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea2:	29 2f       	mov	r18, r25
    4ea4:	28 2b       	or	r18, r24
    4ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eaa:	fc 01       	movw	r30, r24
    4eac:	20 83       	st	Z, r18
		SREG = oldSREG;
    4eae:	8f e5       	ldi	r24, 0x5F	; 95
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	2f 89       	ldd	r18, Y+23	; 0x17
    4eb4:	fc 01       	movw	r30, r24
    4eb6:	20 83       	st	Z, r18
    4eb8:	01 c0       	rjmp	.+2      	; 0x4ebc <pinMode+0x184>
{
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4eba:	00 00       	nop
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    4ebc:	69 96       	adiw	r28, 0x19	; 25
    4ebe:	0f b6       	in	r0, 0x3f	; 63
    4ec0:	f8 94       	cli
    4ec2:	de bf       	out	0x3e, r29	; 62
    4ec4:	0f be       	out	0x3f, r0	; 63
    4ec6:	cd bf       	out	0x3d, r28	; 61
    4ec8:	df 91       	pop	r29
    4eca:	cf 91       	pop	r28
    4ecc:	08 95       	ret

00004ece <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	1f 92       	push	r1
    4ed4:	cd b7       	in	r28, 0x3d	; 61
    4ed6:	de b7       	in	r29, 0x3e	; 62
    4ed8:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    4eda:	89 81       	ldd	r24, Y+1	; 0x01
    4edc:	88 2f       	mov	r24, r24
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	09 2e       	mov	r0, r25
    4ee2:	00 0c       	add	r0, r0
    4ee4:	aa 0b       	sbc	r26, r26
    4ee6:	bb 0b       	sbc	r27, r27
    4ee8:	41 e0       	ldi	r20, 0x01	; 1
    4eea:	50 e0       	ldi	r21, 0x00	; 0
    4eec:	21 e1       	ldi	r18, 0x11	; 17
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	84 1b       	sub	r24, r20
    4ef2:	95 0b       	sbc	r25, r21
    4ef4:	28 17       	cp	r18, r24
    4ef6:	39 07       	cpc	r19, r25
    4ef8:	08 f4       	brcc	.+2      	; 0x4efc <turnOffPWM+0x2e>
    4efa:	a7 c0       	rjmp	.+334    	; 0x504a <turnOffPWM+0x17c>
    4efc:	fc 01       	movw	r30, r24
    4efe:	88 27       	eor	r24, r24
    4f00:	ec 56       	subi	r30, 0x6C	; 108
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	8f 4f       	sbci	r24, 0xFF	; 255
    4f06:	0c 94 45 43 	jmp	0x868a	; 0x868a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4f0a:	80 e8       	ldi	r24, 0x80	; 128
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	20 e8       	ldi	r18, 0x80	; 128
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	f9 01       	movw	r30, r18
    4f14:	20 81       	ld	r18, Z
    4f16:	2f 77       	andi	r18, 0x7F	; 127
    4f18:	fc 01       	movw	r30, r24
    4f1a:	20 83       	st	Z, r18
    4f1c:	96 c0       	rjmp	.+300    	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4f1e:	80 e8       	ldi	r24, 0x80	; 128
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	20 e8       	ldi	r18, 0x80	; 128
    4f24:	30 e0       	ldi	r19, 0x00	; 0
    4f26:	f9 01       	movw	r30, r18
    4f28:	20 81       	ld	r18, Z
    4f2a:	2f 7d       	andi	r18, 0xDF	; 223
    4f2c:	fc 01       	movw	r30, r24
    4f2e:	20 83       	st	Z, r18
    4f30:	8c c0       	rjmp	.+280    	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    4f32:	80 e8       	ldi	r24, 0x80	; 128
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	20 e8       	ldi	r18, 0x80	; 128
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	f9 01       	movw	r30, r18
    4f3c:	20 81       	ld	r18, Z
    4f3e:	27 7f       	andi	r18, 0xF7	; 247
    4f40:	fc 01       	movw	r30, r24
    4f42:	20 83       	st	Z, r18
    4f44:	82 c0       	rjmp	.+260    	; 0x504a <turnOffPWM+0x17c>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4f46:	84 e4       	ldi	r24, 0x44	; 68
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	24 e4       	ldi	r18, 0x44	; 68
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	f9 01       	movw	r30, r18
    4f50:	20 81       	ld	r18, Z
    4f52:	2f 77       	andi	r18, 0x7F	; 127
    4f54:	fc 01       	movw	r30, r24
    4f56:	20 83       	st	Z, r18
    4f58:	78 c0       	rjmp	.+240    	; 0x504a <turnOffPWM+0x17c>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4f5a:	84 e4       	ldi	r24, 0x44	; 68
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	24 e4       	ldi	r18, 0x44	; 68
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	f9 01       	movw	r30, r18
    4f64:	20 81       	ld	r18, Z
    4f66:	2f 7d       	andi	r18, 0xDF	; 223
    4f68:	fc 01       	movw	r30, r24
    4f6a:	20 83       	st	Z, r18
    4f6c:	6e c0       	rjmp	.+220    	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4f6e:	80 eb       	ldi	r24, 0xB0	; 176
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	20 eb       	ldi	r18, 0xB0	; 176
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	f9 01       	movw	r30, r18
    4f78:	20 81       	ld	r18, Z
    4f7a:	2f 77       	andi	r18, 0x7F	; 127
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	20 83       	st	Z, r18
    4f80:	64 c0       	rjmp	.+200    	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4f82:	80 eb       	ldi	r24, 0xB0	; 176
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	20 eb       	ldi	r18, 0xB0	; 176
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	f9 01       	movw	r30, r18
    4f8c:	20 81       	ld	r18, Z
    4f8e:	2f 7d       	andi	r18, 0xDF	; 223
    4f90:	fc 01       	movw	r30, r24
    4f92:	20 83       	st	Z, r18
    4f94:	5a c0       	rjmp	.+180    	; 0x504a <turnOffPWM+0x17c>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    4f96:	80 e9       	ldi	r24, 0x90	; 144
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	20 e9       	ldi	r18, 0x90	; 144
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	f9 01       	movw	r30, r18
    4fa0:	20 81       	ld	r18, Z
    4fa2:	2f 77       	andi	r18, 0x7F	; 127
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	20 83       	st	Z, r18
    4fa8:	50 c0       	rjmp	.+160    	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    4faa:	80 e9       	ldi	r24, 0x90	; 144
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	20 e9       	ldi	r18, 0x90	; 144
    4fb0:	30 e0       	ldi	r19, 0x00	; 0
    4fb2:	f9 01       	movw	r30, r18
    4fb4:	20 81       	ld	r18, Z
    4fb6:	2f 7d       	andi	r18, 0xDF	; 223
    4fb8:	fc 01       	movw	r30, r24
    4fba:	20 83       	st	Z, r18
    4fbc:	46 c0       	rjmp	.+140    	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    4fbe:	80 e9       	ldi	r24, 0x90	; 144
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	20 e9       	ldi	r18, 0x90	; 144
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	f9 01       	movw	r30, r18
    4fc8:	20 81       	ld	r18, Z
    4fca:	27 7f       	andi	r18, 0xF7	; 247
    4fcc:	fc 01       	movw	r30, r24
    4fce:	20 83       	st	Z, r18
    4fd0:	3c c0       	rjmp	.+120    	; 0x504a <turnOffPWM+0x17c>
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    4fd2:	80 ea       	ldi	r24, 0xA0	; 160
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	20 ea       	ldi	r18, 0xA0	; 160
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	f9 01       	movw	r30, r18
    4fdc:	20 81       	ld	r18, Z
    4fde:	2f 77       	andi	r18, 0x7F	; 127
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	20 83       	st	Z, r18
    4fe4:	32 c0       	rjmp	.+100    	; 0x504a <turnOffPWM+0x17c>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    4fe6:	80 ea       	ldi	r24, 0xA0	; 160
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	20 ea       	ldi	r18, 0xA0	; 160
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	f9 01       	movw	r30, r18
    4ff0:	20 81       	ld	r18, Z
    4ff2:	2f 7d       	andi	r18, 0xDF	; 223
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	20 83       	st	Z, r18
    4ff8:	28 c0       	rjmp	.+80     	; 0x504a <turnOffPWM+0x17c>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    4ffa:	80 ea       	ldi	r24, 0xA0	; 160
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	20 ea       	ldi	r18, 0xA0	; 160
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	f9 01       	movw	r30, r18
    5004:	20 81       	ld	r18, Z
    5006:	27 7f       	andi	r18, 0xF7	; 247
    5008:	fc 01       	movw	r30, r24
    500a:	20 83       	st	Z, r18
    500c:	1e c0       	rjmp	.+60     	; 0x504a <turnOffPWM+0x17c>
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    500e:	80 e2       	ldi	r24, 0x20	; 32
    5010:	91 e0       	ldi	r25, 0x01	; 1
    5012:	20 e2       	ldi	r18, 0x20	; 32
    5014:	31 e0       	ldi	r19, 0x01	; 1
    5016:	f9 01       	movw	r30, r18
    5018:	20 81       	ld	r18, Z
    501a:	2f 77       	andi	r18, 0x7F	; 127
    501c:	fc 01       	movw	r30, r24
    501e:	20 83       	st	Z, r18
    5020:	14 c0       	rjmp	.+40     	; 0x504a <turnOffPWM+0x17c>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5022:	80 e2       	ldi	r24, 0x20	; 32
    5024:	91 e0       	ldi	r25, 0x01	; 1
    5026:	20 e2       	ldi	r18, 0x20	; 32
    5028:	31 e0       	ldi	r19, 0x01	; 1
    502a:	f9 01       	movw	r30, r18
    502c:	20 81       	ld	r18, Z
    502e:	2f 7d       	andi	r18, 0xDF	; 223
    5030:	fc 01       	movw	r30, r24
    5032:	20 83       	st	Z, r18
    5034:	0a c0       	rjmp	.+20     	; 0x504a <turnOffPWM+0x17c>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    5036:	80 e2       	ldi	r24, 0x20	; 32
    5038:	91 e0       	ldi	r25, 0x01	; 1
    503a:	20 e2       	ldi	r18, 0x20	; 32
    503c:	31 e0       	ldi	r19, 0x01	; 1
    503e:	f9 01       	movw	r30, r18
    5040:	20 81       	ld	r18, Z
    5042:	27 7f       	andi	r18, 0xF7	; 247
    5044:	fc 01       	movw	r30, r24
    5046:	20 83       	st	Z, r18
    5048:	00 00       	nop
		#endif
	}
}
    504a:	00 00       	nop
    504c:	0f 90       	pop	r0
    504e:	df 91       	pop	r29
    5050:	cf 91       	pop	r28
    5052:	08 95       	ret

00005054 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    5054:	cf 93       	push	r28
    5056:	df 93       	push	r29
    5058:	cd b7       	in	r28, 0x3d	; 61
    505a:	de b7       	in	r29, 0x3e	; 62
    505c:	65 97       	sbiw	r28, 0x15	; 21
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	f8 94       	cli
    5062:	de bf       	out	0x3e, r29	; 62
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	cd bf       	out	0x3d, r28	; 61
    5068:	8c 8b       	std	Y+20, r24	; 0x14
    506a:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    506c:	8c 89       	ldd	r24, Y+20	; 0x14
    506e:	88 2f       	mov	r24, r24
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	88 51       	subi	r24, 0x18	; 24
    5074:	9c 4f       	sbci	r25, 0xFC	; 252
    5076:	9a 83       	std	Y+2, r25	; 0x02
    5078:	89 83       	std	Y+1, r24	; 0x01
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	9a 81       	ldd	r25, Y+2	; 0x02
    507e:	fc 01       	movw	r30, r24
    5080:	84 91       	lpm	r24, Z
    5082:	8b 83       	std	Y+3, r24	; 0x03
    5084:	8b 81       	ldd	r24, Y+3	; 0x03
    5086:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    5088:	8c 89       	ldd	r24, Y+20	; 0x14
    508a:	88 2f       	mov	r24, r24
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	8c 52       	subi	r24, 0x2C	; 44
    5090:	9c 4f       	sbci	r25, 0xFC	; 252
    5092:	9e 83       	std	Y+6, r25	; 0x06
    5094:	8d 83       	std	Y+5, r24	; 0x05
    5096:	8d 81       	ldd	r24, Y+5	; 0x05
    5098:	9e 81       	ldd	r25, Y+6	; 0x06
    509a:	fc 01       	movw	r30, r24
    509c:	84 91       	lpm	r24, Z
    509e:	8f 83       	std	Y+7, r24	; 0x07
    50a0:	8f 81       	ldd	r24, Y+7	; 0x07
    50a2:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    50a4:	8c 89       	ldd	r24, Y+20	; 0x14
    50a6:	88 2f       	mov	r24, r24
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	80 54       	subi	r24, 0x40	; 64
    50ac:	9c 4f       	sbci	r25, 0xFC	; 252
    50ae:	9a 87       	std	Y+10, r25	; 0x0a
    50b0:	89 87       	std	Y+9, r24	; 0x09
    50b2:	89 85       	ldd	r24, Y+9	; 0x09
    50b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b6:	fc 01       	movw	r30, r24
    50b8:	84 91       	lpm	r24, Z
    50ba:	8b 87       	std	Y+11, r24	; 0x0b
    50bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    50be:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    50c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    50c2:	88 23       	and	r24, r24
    50c4:	09 f4       	brne	.+2      	; 0x50c8 <digitalWrite+0x74>
    50c6:	45 c0       	rjmp	.+138    	; 0x5152 <digitalWrite+0xfe>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    50c8:	8c 81       	ldd	r24, Y+4	; 0x04
    50ca:	88 23       	and	r24, r24
    50cc:	19 f0       	breq	.+6      	; 0x50d4 <digitalWrite+0x80>
    50ce:	8c 81       	ldd	r24, Y+4	; 0x04
    50d0:	0e 94 67 27 	call	0x4ece	; 0x4ece <turnOffPWM>

	out = portOutputRegister(port);
    50d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    50d6:	88 2f       	mov	r24, r24
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	88 0f       	add	r24, r24
    50dc:	99 1f       	adc	r25, r25
    50de:	84 55       	subi	r24, 0x54	; 84
    50e0:	9c 4f       	sbci	r25, 0xFC	; 252
    50e2:	9e 87       	std	Y+14, r25	; 0x0e
    50e4:	8d 87       	std	Y+13, r24	; 0x0d
    50e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50ea:	fc 01       	movw	r30, r24
    50ec:	25 91       	lpm	r18, Z+
    50ee:	34 91       	lpm	r19, Z
    50f0:	cf 01       	movw	r24, r30
    50f2:	38 8b       	std	Y+16, r19	; 0x10
    50f4:	2f 87       	std	Y+15, r18	; 0x0f
    50f6:	9e 87       	std	Y+14, r25	; 0x0e
    50f8:	8d 87       	std	Y+13, r24	; 0x0d
    50fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    50fc:	98 89       	ldd	r25, Y+16	; 0x10
    50fe:	9a 8b       	std	Y+18, r25	; 0x12
    5100:	89 8b       	std	Y+17, r24	; 0x11

	uint8_t oldSREG = SREG;
    5102:	8f e5       	ldi	r24, 0x5F	; 95
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	fc 01       	movw	r30, r24
    5108:	80 81       	ld	r24, Z
    510a:	8b 8b       	std	Y+19, r24	; 0x13
	cli();
    510c:	f8 94       	cli

	if (val == LOW) {
    510e:	8d 89       	ldd	r24, Y+21	; 0x15
    5110:	88 23       	and	r24, r24
    5112:	71 f4       	brne	.+28     	; 0x5130 <digitalWrite+0xdc>
		*out &= ~bit;
    5114:	89 89       	ldd	r24, Y+17	; 0x11
    5116:	9a 89       	ldd	r25, Y+18	; 0x12
    5118:	fc 01       	movw	r30, r24
    511a:	80 81       	ld	r24, Z
    511c:	98 2f       	mov	r25, r24
    511e:	88 85       	ldd	r24, Y+8	; 0x08
    5120:	80 95       	com	r24
    5122:	89 23       	and	r24, r25
    5124:	28 2f       	mov	r18, r24
    5126:	89 89       	ldd	r24, Y+17	; 0x11
    5128:	9a 89       	ldd	r25, Y+18	; 0x12
    512a:	fc 01       	movw	r30, r24
    512c:	20 83       	st	Z, r18
    512e:	0b c0       	rjmp	.+22     	; 0x5146 <digitalWrite+0xf2>
	} else {
		*out |= bit;
    5130:	89 89       	ldd	r24, Y+17	; 0x11
    5132:	9a 89       	ldd	r25, Y+18	; 0x12
    5134:	fc 01       	movw	r30, r24
    5136:	90 81       	ld	r25, Z
    5138:	88 85       	ldd	r24, Y+8	; 0x08
    513a:	29 2f       	mov	r18, r25
    513c:	28 2b       	or	r18, r24
    513e:	89 89       	ldd	r24, Y+17	; 0x11
    5140:	9a 89       	ldd	r25, Y+18	; 0x12
    5142:	fc 01       	movw	r30, r24
    5144:	20 83       	st	Z, r18
	}

	SREG = oldSREG;
    5146:	8f e5       	ldi	r24, 0x5F	; 95
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	2b 89       	ldd	r18, Y+19	; 0x13
    514c:	fc 01       	movw	r30, r24
    514e:	20 83       	st	Z, r18
    5150:	01 c0       	rjmp	.+2      	; 0x5154 <digitalWrite+0x100>
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5152:	00 00       	nop
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
    5154:	65 96       	adiw	r28, 0x15	; 21
    5156:	0f b6       	in	r0, 0x3f	; 63
    5158:	f8 94       	cli
    515a:	de bf       	out	0x3e, r29	; 62
    515c:	0f be       	out	0x3f, r0	; 63
    515e:	cd bf       	out	0x3d, r28	; 61
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	08 95       	ret

00005166 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	61 97       	sbiw	r28, 0x11	; 17
    5170:	0f b6       	in	r0, 0x3f	; 63
    5172:	f8 94       	cli
    5174:	de bf       	out	0x3e, r29	; 62
    5176:	0f be       	out	0x3f, r0	; 63
    5178:	cd bf       	out	0x3d, r28	; 61
    517a:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
    517c:	89 89       	ldd	r24, Y+17	; 0x11
    517e:	88 2f       	mov	r24, r24
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	88 51       	subi	r24, 0x18	; 24
    5184:	9c 4f       	sbci	r25, 0xFC	; 252
    5186:	9a 83       	std	Y+2, r25	; 0x02
    5188:	89 83       	std	Y+1, r24	; 0x01
    518a:	89 81       	ldd	r24, Y+1	; 0x01
    518c:	9a 81       	ldd	r25, Y+2	; 0x02
    518e:	fc 01       	movw	r30, r24
    5190:	84 91       	lpm	r24, Z
    5192:	8b 83       	std	Y+3, r24	; 0x03
    5194:	8b 81       	ldd	r24, Y+3	; 0x03
    5196:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    5198:	89 89       	ldd	r24, Y+17	; 0x11
    519a:	88 2f       	mov	r24, r24
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	8c 52       	subi	r24, 0x2C	; 44
    51a0:	9c 4f       	sbci	r25, 0xFC	; 252
    51a2:	9e 83       	std	Y+6, r25	; 0x06
    51a4:	8d 83       	std	Y+5, r24	; 0x05
    51a6:	8d 81       	ldd	r24, Y+5	; 0x05
    51a8:	9e 81       	ldd	r25, Y+6	; 0x06
    51aa:	fc 01       	movw	r30, r24
    51ac:	84 91       	lpm	r24, Z
    51ae:	8f 83       	std	Y+7, r24	; 0x07
    51b0:	8f 81       	ldd	r24, Y+7	; 0x07
    51b2:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    51b4:	89 89       	ldd	r24, Y+17	; 0x11
    51b6:	88 2f       	mov	r24, r24
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	80 54       	subi	r24, 0x40	; 64
    51bc:	9c 4f       	sbci	r25, 0xFC	; 252
    51be:	9a 87       	std	Y+10, r25	; 0x0a
    51c0:	89 87       	std	Y+9, r24	; 0x09
    51c2:	89 85       	ldd	r24, Y+9	; 0x09
    51c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c6:	fc 01       	movw	r30, r24
    51c8:	84 91       	lpm	r24, Z
    51ca:	8b 87       	std	Y+11, r24	; 0x0b
    51cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ce:	8c 87       	std	Y+12, r24	; 0x0c

	if (port == NOT_A_PIN) return LOW;
    51d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    51d2:	88 23       	and	r24, r24
    51d4:	19 f4       	brne	.+6      	; 0x51dc <digitalRead+0x76>
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	26 c0       	rjmp	.+76     	; 0x5228 <digitalRead+0xc2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    51dc:	8c 81       	ldd	r24, Y+4	; 0x04
    51de:	88 23       	and	r24, r24
    51e0:	19 f0       	breq	.+6      	; 0x51e8 <digitalRead+0x82>
    51e2:	8c 81       	ldd	r24, Y+4	; 0x04
    51e4:	0e 94 67 27 	call	0x4ece	; 0x4ece <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    51e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    51ea:	88 2f       	mov	r24, r24
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	88 0f       	add	r24, r24
    51f0:	99 1f       	adc	r25, r25
    51f2:	8a 54       	subi	r24, 0x4A	; 74
    51f4:	9c 4f       	sbci	r25, 0xFC	; 252
    51f6:	9e 87       	std	Y+14, r25	; 0x0e
    51f8:	8d 87       	std	Y+13, r24	; 0x0d
    51fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    51fe:	fc 01       	movw	r30, r24
    5200:	25 91       	lpm	r18, Z+
    5202:	34 91       	lpm	r19, Z
    5204:	cf 01       	movw	r24, r30
    5206:	38 8b       	std	Y+16, r19	; 0x10
    5208:	2f 87       	std	Y+15, r18	; 0x0f
    520a:	9e 87       	std	Y+14, r25	; 0x0e
    520c:	8d 87       	std	Y+13, r24	; 0x0d
    520e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5210:	98 89       	ldd	r25, Y+16	; 0x10
    5212:	fc 01       	movw	r30, r24
    5214:	90 81       	ld	r25, Z
    5216:	88 85       	ldd	r24, Y+8	; 0x08
    5218:	89 23       	and	r24, r25
    521a:	88 23       	and	r24, r24
    521c:	19 f0       	breq	.+6      	; 0x5224 <digitalRead+0xbe>
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	02 c0       	rjmp	.+4      	; 0x5228 <digitalRead+0xc2>
	return LOW;
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
}
    5228:	61 96       	adiw	r28, 0x11	; 17
    522a:	0f b6       	in	r0, 0x3f	; 63
    522c:	f8 94       	cli
    522e:	de bf       	out	0x3e, r29	; 62
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	cd bf       	out	0x3d, r28	; 61
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	08 95       	ret

0000523a <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
    523e:	cf 93       	push	r28
    5240:	df 93       	push	r29
    5242:	cd b7       	in	r28, 0x3d	; 61
    5244:	de b7       	in	r29, 0x3e	; 62
    5246:	6b 97       	sbiw	r28, 0x1b	; 27
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	f8 94       	cli
    524c:	de bf       	out	0x3e, r29	; 62
    524e:	0f be       	out	0x3f, r0	; 63
    5250:	cd bf       	out	0x3d, r28	; 61
    5252:	8e 8b       	std	Y+22, r24	; 0x16
    5254:	6f 8b       	std	Y+23, r22	; 0x17
    5256:	28 8f       	std	Y+24, r18	; 0x18
    5258:	39 8f       	std	Y+25, r19	; 0x19
    525a:	4a 8f       	std	Y+26, r20	; 0x1a
    525c:	5b 8f       	std	Y+27, r21	; 0x1b
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    525e:	8e 89       	ldd	r24, Y+22	; 0x16
    5260:	88 2f       	mov	r24, r24
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	8c 52       	subi	r24, 0x2C	; 44
    5266:	9c 4f       	sbci	r25, 0xFC	; 252
    5268:	9a 83       	std	Y+2, r25	; 0x02
    526a:	89 83       	std	Y+1, r24	; 0x01
    526c:	89 81       	ldd	r24, Y+1	; 0x01
    526e:	9a 81       	ldd	r25, Y+2	; 0x02
    5270:	fc 01       	movw	r30, r24
    5272:	84 91       	lpm	r24, Z
    5274:	8b 83       	std	Y+3, r24	; 0x03
    5276:	8b 81       	ldd	r24, Y+3	; 0x03
    5278:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    527a:	8e 89       	ldd	r24, Y+22	; 0x16
    527c:	88 2f       	mov	r24, r24
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	80 54       	subi	r24, 0x40	; 64
    5282:	9c 4f       	sbci	r25, 0xFC	; 252
    5284:	9e 83       	std	Y+6, r25	; 0x06
    5286:	8d 83       	std	Y+5, r24	; 0x05
    5288:	8d 81       	ldd	r24, Y+5	; 0x05
    528a:	9e 81       	ldd	r25, Y+6	; 0x06
    528c:	fc 01       	movw	r30, r24
    528e:	84 91       	lpm	r24, Z
    5290:	8f 83       	std	Y+7, r24	; 0x07
    5292:	8f 81       	ldd	r24, Y+7	; 0x07
    5294:	88 87       	std	Y+8, r24	; 0x08
	uint8_t stateMask = (state ? bit : 0);
    5296:	8f 89       	ldd	r24, Y+23	; 0x17
    5298:	88 23       	and	r24, r24
    529a:	11 f0       	breq	.+4      	; 0x52a0 <pulseIn+0x66>
    529c:	8c 81       	ldd	r24, Y+4	; 0x04
    529e:	01 c0       	rjmp	.+2      	; 0x52a2 <pulseIn+0x68>
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	89 87       	std	Y+9, r24	; 0x09

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
    52a4:	88 8d       	ldd	r24, Y+24	; 0x18
    52a6:	99 8d       	ldd	r25, Y+25	; 0x19
    52a8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    52aa:	bb 8d       	ldd	r27, Y+27	; 0x1b
    52ac:	88 0f       	add	r24, r24
    52ae:	99 1f       	adc	r25, r25
    52b0:	aa 1f       	adc	r26, r26
    52b2:	bb 1f       	adc	r27, r27
    52b4:	88 0f       	add	r24, r24
    52b6:	99 1f       	adc	r25, r25
    52b8:	aa 1f       	adc	r26, r26
    52ba:	bb 1f       	adc	r27, r27
    52bc:	88 0f       	add	r24, r24
    52be:	99 1f       	adc	r25, r25
    52c0:	aa 1f       	adc	r26, r26
    52c2:	bb 1f       	adc	r27, r27
    52c4:	88 0f       	add	r24, r24
    52c6:	99 1f       	adc	r25, r25
    52c8:	aa 1f       	adc	r26, r26
    52ca:	bb 1f       	adc	r27, r27
    52cc:	68 94       	set
    52ce:	13 f8       	bld	r1, 3
    52d0:	b6 95       	lsr	r27
    52d2:	a7 95       	ror	r26
    52d4:	97 95       	ror	r25
    52d6:	87 95       	ror	r24
    52d8:	16 94       	lsr	r1
    52da:	d1 f7       	brne	.-12     	; 0x52d0 <pulseIn+0x96>
    52dc:	8a 87       	std	Y+10, r24	; 0x0a
    52de:	9b 87       	std	Y+11, r25	; 0x0b
    52e0:	ac 87       	std	Y+12, r26	; 0x0c
    52e2:	bd 87       	std	Y+13, r27	; 0x0d

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    52e4:	88 85       	ldd	r24, Y+8	; 0x08
    52e6:	88 2f       	mov	r24, r24
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	88 0f       	add	r24, r24
    52ec:	99 1f       	adc	r25, r25
    52ee:	8a 54       	subi	r24, 0x4A	; 74
    52f0:	9c 4f       	sbci	r25, 0xFC	; 252
    52f2:	9f 87       	std	Y+15, r25	; 0x0f
    52f4:	8e 87       	std	Y+14, r24	; 0x0e
    52f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    52f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    52fa:	fc 01       	movw	r30, r24
    52fc:	25 91       	lpm	r18, Z+
    52fe:	34 91       	lpm	r19, Z
    5300:	cf 01       	movw	r24, r30
    5302:	39 8b       	std	Y+17, r19	; 0x11
    5304:	28 8b       	std	Y+16, r18	; 0x10
    5306:	9f 87       	std	Y+15, r25	; 0x0f
    5308:	8e 87       	std	Y+14, r24	; 0x0e
    530a:	88 89       	ldd	r24, Y+16	; 0x10
    530c:	99 89       	ldd	r25, Y+17	; 0x11
    530e:	fc 01       	movw	r30, r24
    5310:	8a 85       	ldd	r24, Y+10	; 0x0a
    5312:	9b 85       	ldd	r25, Y+11	; 0x0b
    5314:	ac 85       	ldd	r26, Y+12	; 0x0c
    5316:	bd 85       	ldd	r27, Y+13	; 0x0d
    5318:	8c 01       	movw	r16, r24
    531a:	9d 01       	movw	r18, r26
    531c:	49 85       	ldd	r20, Y+9	; 0x09
    531e:	6c 81       	ldd	r22, Y+4	; 0x04
    5320:	cf 01       	movw	r24, r30
    5322:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <countPulseASM>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	8a 8b       	std	Y+18, r24	; 0x12
    532c:	9b 8b       	std	Y+19, r25	; 0x13
    532e:	ac 8b       	std	Y+20, r26	; 0x14
    5330:	bd 8b       	std	Y+21, r27	; 0x15

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    5332:	8a 89       	ldd	r24, Y+18	; 0x12
    5334:	9b 89       	ldd	r25, Y+19	; 0x13
    5336:	ac 89       	ldd	r26, Y+20	; 0x14
    5338:	bd 89       	ldd	r27, Y+21	; 0x15
    533a:	89 2b       	or	r24, r25
    533c:	8a 2b       	or	r24, r26
    533e:	8b 2b       	or	r24, r27
    5340:	01 f1       	breq	.+64     	; 0x5382 <pulseIn+0x148>
		return clockCyclesToMicroseconds(width * 16 + 16);
    5342:	8a 89       	ldd	r24, Y+18	; 0x12
    5344:	9b 89       	ldd	r25, Y+19	; 0x13
    5346:	ac 89       	ldd	r26, Y+20	; 0x14
    5348:	bd 89       	ldd	r27, Y+21	; 0x15
    534a:	01 96       	adiw	r24, 0x01	; 1
    534c:	a1 1d       	adc	r26, r1
    534e:	b1 1d       	adc	r27, r1
    5350:	88 0f       	add	r24, r24
    5352:	99 1f       	adc	r25, r25
    5354:	aa 1f       	adc	r26, r26
    5356:	bb 1f       	adc	r27, r27
    5358:	88 0f       	add	r24, r24
    535a:	99 1f       	adc	r25, r25
    535c:	aa 1f       	adc	r26, r26
    535e:	bb 1f       	adc	r27, r27
    5360:	88 0f       	add	r24, r24
    5362:	99 1f       	adc	r25, r25
    5364:	aa 1f       	adc	r26, r26
    5366:	bb 1f       	adc	r27, r27
    5368:	88 0f       	add	r24, r24
    536a:	99 1f       	adc	r25, r25
    536c:	aa 1f       	adc	r26, r26
    536e:	bb 1f       	adc	r27, r27
    5370:	68 94       	set
    5372:	13 f8       	bld	r1, 3
    5374:	b6 95       	lsr	r27
    5376:	a7 95       	ror	r26
    5378:	97 95       	ror	r25
    537a:	87 95       	ror	r24
    537c:	16 94       	lsr	r1
    537e:	d1 f7       	brne	.-12     	; 0x5374 <pulseIn+0x13a>
    5380:	03 c0       	rjmp	.+6      	; 0x5388 <pulseIn+0x14e>
	else
		return 0;
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	dc 01       	movw	r26, r24
}
    5388:	bc 01       	movw	r22, r24
    538a:	cd 01       	movw	r24, r26
    538c:	6b 96       	adiw	r28, 0x1b	; 27
    538e:	0f b6       	in	r0, 0x3f	; 63
    5390:	f8 94       	cli
    5392:	de bf       	out	0x3e, r29	; 62
    5394:	0f be       	out	0x3f, r0	; 63
    5396:	cd bf       	out	0x3d, r28	; 61
    5398:	df 91       	pop	r29
    539a:	cf 91       	pop	r28
    539c:	1f 91       	pop	r17
    539e:	0f 91       	pop	r16
    53a0:	08 95       	ret

000053a2 <pulseInLong>:
 *
 * ATTENTION:
 * this function relies on micros() so cannot be used in noInterrupt() context
 */
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout)
{
    53a2:	ef 92       	push	r14
    53a4:	ff 92       	push	r15
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	cf 93       	push	r28
    53ac:	df 93       	push	r29
    53ae:	cd b7       	in	r28, 0x3d	; 61
    53b0:	de b7       	in	r29, 0x3e	; 62
    53b2:	a3 97       	sbiw	r28, 0x23	; 35
    53b4:	0f b6       	in	r0, 0x3f	; 63
    53b6:	f8 94       	cli
    53b8:	de bf       	out	0x3e, r29	; 62
    53ba:	0f be       	out	0x3f, r0	; 63
    53bc:	cd bf       	out	0x3d, r28	; 61
    53be:	8e 8f       	std	Y+30, r24	; 0x1e
    53c0:	6f 8f       	std	Y+31, r22	; 0x1f
    53c2:	28 a3       	std	Y+32, r18	; 0x20
    53c4:	39 a3       	std	Y+33, r19	; 0x21
    53c6:	4a a3       	std	Y+34, r20	; 0x22
    53c8:	5b a3       	std	Y+35, r21	; 0x23
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    53ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53cc:	88 2f       	mov	r24, r24
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	8c 52       	subi	r24, 0x2C	; 44
    53d2:	9c 4f       	sbci	r25, 0xFC	; 252
    53d4:	9a 83       	std	Y+2, r25	; 0x02
    53d6:	89 83       	std	Y+1, r24	; 0x01
    53d8:	89 81       	ldd	r24, Y+1	; 0x01
    53da:	9a 81       	ldd	r25, Y+2	; 0x02
    53dc:	fc 01       	movw	r30, r24
    53de:	84 91       	lpm	r24, Z
    53e0:	8b 83       	std	Y+3, r24	; 0x03
    53e2:	8b 81       	ldd	r24, Y+3	; 0x03
    53e4:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    53e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53e8:	88 2f       	mov	r24, r24
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	80 54       	subi	r24, 0x40	; 64
    53ee:	9c 4f       	sbci	r25, 0xFC	; 252
    53f0:	9e 83       	std	Y+6, r25	; 0x06
    53f2:	8d 83       	std	Y+5, r24	; 0x05
    53f4:	8d 81       	ldd	r24, Y+5	; 0x05
    53f6:	9e 81       	ldd	r25, Y+6	; 0x06
    53f8:	fc 01       	movw	r30, r24
    53fa:	84 91       	lpm	r24, Z
    53fc:	8f 83       	std	Y+7, r24	; 0x07
    53fe:	8f 81       	ldd	r24, Y+7	; 0x07
    5400:	88 87       	std	Y+8, r24	; 0x08
	uint8_t stateMask = (state ? bit : 0);
    5402:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5404:	88 23       	and	r24, r24
    5406:	11 f0       	breq	.+4      	; 0x540c <pulseInLong+0x6a>
    5408:	8c 81       	ldd	r24, Y+4	; 0x04
    540a:	01 c0       	rjmp	.+2      	; 0x540e <pulseInLong+0x6c>
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	89 87       	std	Y+9, r24	; 0x09

	unsigned long startMicros = micros();
    5410:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	8a 87       	std	Y+10, r24	; 0x0a
    541a:	9b 87       	std	Y+11, r25	; 0x0b
    541c:	ac 87       	std	Y+12, r26	; 0x0c
    541e:	bd 87       	std	Y+13, r27	; 0x0d

	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask) {
    5420:	19 c0       	rjmp	.+50     	; 0x5454 <pulseInLong+0xb2>
		if (micros() - startMicros > timeout)
    5422:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    5426:	9b 01       	movw	r18, r22
    5428:	ac 01       	movw	r20, r24
    542a:	8a 85       	ldd	r24, Y+10	; 0x0a
    542c:	9b 85       	ldd	r25, Y+11	; 0x0b
    542e:	ac 85       	ldd	r26, Y+12	; 0x0c
    5430:	bd 85       	ldd	r27, Y+13	; 0x0d
    5432:	28 1b       	sub	r18, r24
    5434:	39 0b       	sbc	r19, r25
    5436:	4a 0b       	sbc	r20, r26
    5438:	5b 0b       	sbc	r21, r27
    543a:	88 a1       	ldd	r24, Y+32	; 0x20
    543c:	99 a1       	ldd	r25, Y+33	; 0x21
    543e:	aa a1       	ldd	r26, Y+34	; 0x22
    5440:	bb a1       	ldd	r27, Y+35	; 0x23
    5442:	82 17       	cp	r24, r18
    5444:	93 07       	cpc	r25, r19
    5446:	a4 07       	cpc	r26, r20
    5448:	b5 07       	cpc	r27, r21
    544a:	20 f4       	brcc	.+8      	; 0x5454 <pulseInLong+0xb2>
			return 0;
    544c:	80 e0       	ldi	r24, 0x00	; 0
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	dc 01       	movw	r26, r24
    5452:	a0 c0       	rjmp	.+320    	; 0x5594 <pulseInLong+0x1f2>
	uint8_t stateMask = (state ? bit : 0);

	unsigned long startMicros = micros();

	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask) {
    5454:	88 85       	ldd	r24, Y+8	; 0x08
    5456:	88 2f       	mov	r24, r24
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	88 0f       	add	r24, r24
    545c:	99 1f       	adc	r25, r25
    545e:	8a 54       	subi	r24, 0x4A	; 74
    5460:	9c 4f       	sbci	r25, 0xFC	; 252
    5462:	9f 87       	std	Y+15, r25	; 0x0f
    5464:	8e 87       	std	Y+14, r24	; 0x0e
    5466:	8e 85       	ldd	r24, Y+14	; 0x0e
    5468:	9f 85       	ldd	r25, Y+15	; 0x0f
    546a:	fc 01       	movw	r30, r24
    546c:	25 91       	lpm	r18, Z+
    546e:	34 91       	lpm	r19, Z
    5470:	cf 01       	movw	r24, r30
    5472:	39 8b       	std	Y+17, r19	; 0x11
    5474:	28 8b       	std	Y+16, r18	; 0x10
    5476:	9f 87       	std	Y+15, r25	; 0x0f
    5478:	8e 87       	std	Y+14, r24	; 0x0e
    547a:	88 89       	ldd	r24, Y+16	; 0x10
    547c:	99 89       	ldd	r25, Y+17	; 0x11
    547e:	fc 01       	movw	r30, r24
    5480:	90 81       	ld	r25, Z
    5482:	8c 81       	ldd	r24, Y+4	; 0x04
    5484:	98 23       	and	r25, r24
    5486:	89 85       	ldd	r24, Y+9	; 0x09
    5488:	98 17       	cp	r25, r24
    548a:	59 f2       	breq	.-106    	; 0x5422 <pulseInLong+0x80>
		if (micros() - startMicros > timeout)
			return 0;
	}

	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask) {
    548c:	19 c0       	rjmp	.+50     	; 0x54c0 <pulseInLong+0x11e>
		if (micros() - startMicros > timeout)
    548e:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    5492:	9b 01       	movw	r18, r22
    5494:	ac 01       	movw	r20, r24
    5496:	8a 85       	ldd	r24, Y+10	; 0x0a
    5498:	9b 85       	ldd	r25, Y+11	; 0x0b
    549a:	ac 85       	ldd	r26, Y+12	; 0x0c
    549c:	bd 85       	ldd	r27, Y+13	; 0x0d
    549e:	28 1b       	sub	r18, r24
    54a0:	39 0b       	sbc	r19, r25
    54a2:	4a 0b       	sbc	r20, r26
    54a4:	5b 0b       	sbc	r21, r27
    54a6:	88 a1       	ldd	r24, Y+32	; 0x20
    54a8:	99 a1       	ldd	r25, Y+33	; 0x21
    54aa:	aa a1       	ldd	r26, Y+34	; 0x22
    54ac:	bb a1       	ldd	r27, Y+35	; 0x23
    54ae:	82 17       	cp	r24, r18
    54b0:	93 07       	cpc	r25, r19
    54b2:	a4 07       	cpc	r26, r20
    54b4:	b5 07       	cpc	r27, r21
    54b6:	20 f4       	brcc	.+8      	; 0x54c0 <pulseInLong+0x11e>
			return 0;
    54b8:	80 e0       	ldi	r24, 0x00	; 0
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	dc 01       	movw	r26, r24
    54be:	6a c0       	rjmp	.+212    	; 0x5594 <pulseInLong+0x1f2>
		if (micros() - startMicros > timeout)
			return 0;
	}

	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask) {
    54c0:	88 85       	ldd	r24, Y+8	; 0x08
    54c2:	88 2f       	mov	r24, r24
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	88 0f       	add	r24, r24
    54c8:	99 1f       	adc	r25, r25
    54ca:	8a 54       	subi	r24, 0x4A	; 74
    54cc:	9c 4f       	sbci	r25, 0xFC	; 252
    54ce:	9b 8b       	std	Y+19, r25	; 0x13
    54d0:	8a 8b       	std	Y+18, r24	; 0x12
    54d2:	8a 89       	ldd	r24, Y+18	; 0x12
    54d4:	9b 89       	ldd	r25, Y+19	; 0x13
    54d6:	fc 01       	movw	r30, r24
    54d8:	25 91       	lpm	r18, Z+
    54da:	34 91       	lpm	r19, Z
    54dc:	cf 01       	movw	r24, r30
    54de:	3d 8b       	std	Y+21, r19	; 0x15
    54e0:	2c 8b       	std	Y+20, r18	; 0x14
    54e2:	9b 8b       	std	Y+19, r25	; 0x13
    54e4:	8a 8b       	std	Y+18, r24	; 0x12
    54e6:	8c 89       	ldd	r24, Y+20	; 0x14
    54e8:	9d 89       	ldd	r25, Y+21	; 0x15
    54ea:	fc 01       	movw	r30, r24
    54ec:	90 81       	ld	r25, Z
    54ee:	8c 81       	ldd	r24, Y+4	; 0x04
    54f0:	98 23       	and	r25, r24
    54f2:	89 85       	ldd	r24, Y+9	; 0x09
    54f4:	98 17       	cp	r25, r24
    54f6:	59 f6       	brne	.-106    	; 0x548e <pulseInLong+0xec>
		if (micros() - startMicros > timeout)
			return 0;
	}

	unsigned long start = micros();
    54f8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    54fc:	dc 01       	movw	r26, r24
    54fe:	cb 01       	movw	r24, r22
    5500:	8e 8b       	std	Y+22, r24	; 0x16
    5502:	9f 8b       	std	Y+23, r25	; 0x17
    5504:	a8 8f       	std	Y+24, r26	; 0x18
    5506:	b9 8f       	std	Y+25, r27	; 0x19
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    5508:	19 c0       	rjmp	.+50     	; 0x553c <pulseInLong+0x19a>
		if (micros() - startMicros > timeout)
    550a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    550e:	9b 01       	movw	r18, r22
    5510:	ac 01       	movw	r20, r24
    5512:	8a 85       	ldd	r24, Y+10	; 0x0a
    5514:	9b 85       	ldd	r25, Y+11	; 0x0b
    5516:	ac 85       	ldd	r26, Y+12	; 0x0c
    5518:	bd 85       	ldd	r27, Y+13	; 0x0d
    551a:	28 1b       	sub	r18, r24
    551c:	39 0b       	sbc	r19, r25
    551e:	4a 0b       	sbc	r20, r26
    5520:	5b 0b       	sbc	r21, r27
    5522:	88 a1       	ldd	r24, Y+32	; 0x20
    5524:	99 a1       	ldd	r25, Y+33	; 0x21
    5526:	aa a1       	ldd	r26, Y+34	; 0x22
    5528:	bb a1       	ldd	r27, Y+35	; 0x23
    552a:	82 17       	cp	r24, r18
    552c:	93 07       	cpc	r25, r19
    552e:	a4 07       	cpc	r26, r20
    5530:	b5 07       	cpc	r27, r21
    5532:	20 f4       	brcc	.+8      	; 0x553c <pulseInLong+0x19a>
			return 0;
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	dc 01       	movw	r26, r24
    553a:	2c c0       	rjmp	.+88     	; 0x5594 <pulseInLong+0x1f2>
			return 0;
	}

	unsigned long start = micros();
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    553c:	88 85       	ldd	r24, Y+8	; 0x08
    553e:	88 2f       	mov	r24, r24
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	88 0f       	add	r24, r24
    5544:	99 1f       	adc	r25, r25
    5546:	8a 54       	subi	r24, 0x4A	; 74
    5548:	9c 4f       	sbci	r25, 0xFC	; 252
    554a:	9b 8f       	std	Y+27, r25	; 0x1b
    554c:	8a 8f       	std	Y+26, r24	; 0x1a
    554e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5550:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5552:	fc 01       	movw	r30, r24
    5554:	25 91       	lpm	r18, Z+
    5556:	34 91       	lpm	r19, Z
    5558:	cf 01       	movw	r24, r30
    555a:	3d 8f       	std	Y+29, r19	; 0x1d
    555c:	2c 8f       	std	Y+28, r18	; 0x1c
    555e:	9b 8f       	std	Y+27, r25	; 0x1b
    5560:	8a 8f       	std	Y+26, r24	; 0x1a
    5562:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5564:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5566:	fc 01       	movw	r30, r24
    5568:	90 81       	ld	r25, Z
    556a:	8c 81       	ldd	r24, Y+4	; 0x04
    556c:	98 23       	and	r25, r24
    556e:	89 85       	ldd	r24, Y+9	; 0x09
    5570:	98 17       	cp	r25, r24
    5572:	59 f2       	breq	.-106    	; 0x550a <pulseInLong+0x168>
		if (micros() - startMicros > timeout)
			return 0;
	}
	return micros() - start;
    5574:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <micros>
    5578:	9b 01       	movw	r18, r22
    557a:	ac 01       	movw	r20, r24
    557c:	8e 89       	ldd	r24, Y+22	; 0x16
    557e:	9f 89       	ldd	r25, Y+23	; 0x17
    5580:	a8 8d       	ldd	r26, Y+24	; 0x18
    5582:	b9 8d       	ldd	r27, Y+25	; 0x19
    5584:	79 01       	movw	r14, r18
    5586:	8a 01       	movw	r16, r20
    5588:	e8 1a       	sub	r14, r24
    558a:	f9 0a       	sbc	r15, r25
    558c:	0a 0b       	sbc	r16, r26
    558e:	1b 0b       	sbc	r17, r27
    5590:	d8 01       	movw	r26, r16
    5592:	c7 01       	movw	r24, r14
}
    5594:	bc 01       	movw	r22, r24
    5596:	cd 01       	movw	r24, r26
    5598:	a3 96       	adiw	r28, 0x23	; 35
    559a:	0f b6       	in	r0, 0x3f	; 63
    559c:	f8 94       	cli
    559e:	de bf       	out	0x3e, r29	; 62
    55a0:	0f be       	out	0x3f, r0	; 63
    55a2:	cd bf       	out	0x3d, r28	; 61
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	ff 90       	pop	r15
    55ae:	ef 90       	pop	r14
    55b0:	08 95       	ret

000055b2 <countPulseASM>:
unsigned long countPulseASM(volatile uint8_t *port, uint8_t bit, uint8_t stateMask, unsigned long maxloops)
 {
    55b2:	0f 93       	push	r16
    55b4:	1f 93       	push	r17
    55b6:	cf 93       	push	r28
    55b8:	df 93       	push	r29
    55ba:	cd b7       	in	r28, 0x3d	; 61
    55bc:	de b7       	in	r29, 0x3e	; 62
    55be:	2c 97       	sbiw	r28, 0x0c	; 12
    55c0:	0f b6       	in	r0, 0x3f	; 63
    55c2:	f8 94       	cli
    55c4:	de bf       	out	0x3e, r29	; 62
    55c6:	0f be       	out	0x3f, r0	; 63
    55c8:	cd bf       	out	0x3d, r28	; 61
    55ca:	9e 83       	std	Y+6, r25	; 0x06
    55cc:	8d 83       	std	Y+5, r24	; 0x05
    55ce:	6f 83       	std	Y+7, r22	; 0x07
    55d0:	48 87       	std	Y+8, r20	; 0x08
    55d2:	09 87       	std	Y+9, r16	; 0x09
    55d4:	1a 87       	std	Y+10, r17	; 0x0a
    55d6:	2b 87       	std	Y+11, r18	; 0x0b
    55d8:	3c 87       	std	Y+12, r19	; 0x0c
     unsigned long width = 0;
    55da:	19 82       	std	Y+1, r1	; 0x01
    55dc:	1a 82       	std	Y+2, r1	; 0x02
    55de:	1b 82       	std	Y+3, r1	; 0x03
    55e0:	1c 82       	std	Y+4, r1	; 0x04
     // wait for any previous pulse to end
     while ((*port & bit) == stateMask)
    55e2:	17 c0       	rjmp	.+46     	; 0x5612 <countPulseASM+0x60>
         if (--maxloops == 0)
    55e4:	89 85       	ldd	r24, Y+9	; 0x09
    55e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e8:	ab 85       	ldd	r26, Y+11	; 0x0b
    55ea:	bc 85       	ldd	r27, Y+12	; 0x0c
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	a1 09       	sbc	r26, r1
    55f0:	b1 09       	sbc	r27, r1
    55f2:	89 87       	std	Y+9, r24	; 0x09
    55f4:	9a 87       	std	Y+10, r25	; 0x0a
    55f6:	ab 87       	std	Y+11, r26	; 0x0b
    55f8:	bc 87       	std	Y+12, r27	; 0x0c
    55fa:	89 85       	ldd	r24, Y+9	; 0x09
    55fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    5600:	bc 85       	ldd	r27, Y+12	; 0x0c
    5602:	89 2b       	or	r24, r25
    5604:	8a 2b       	or	r24, r26
    5606:	8b 2b       	or	r24, r27
    5608:	21 f4       	brne	.+8      	; 0x5612 <countPulseASM+0x60>
             return 0;
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	dc 01       	movw	r26, r24
    5610:	54 c0       	rjmp	.+168    	; 0x56ba <countPulseASM+0x108>
}
unsigned long countPulseASM(volatile uint8_t *port, uint8_t bit, uint8_t stateMask, unsigned long maxloops)
 {
     unsigned long width = 0;
     // wait for any previous pulse to end
     while ((*port & bit) == stateMask)
    5612:	8d 81       	ldd	r24, Y+5	; 0x05
    5614:	9e 81       	ldd	r25, Y+6	; 0x06
    5616:	fc 01       	movw	r30, r24
    5618:	90 81       	ld	r25, Z
    561a:	8f 81       	ldd	r24, Y+7	; 0x07
    561c:	98 23       	and	r25, r24
    561e:	88 85       	ldd	r24, Y+8	; 0x08
    5620:	98 17       	cp	r25, r24
    5622:	01 f3       	breq	.-64     	; 0x55e4 <countPulseASM+0x32>
         if (--maxloops == 0)
             return 0;

     // wait for the pulse to start
     while ((*port & bit) != stateMask)
    5624:	17 c0       	rjmp	.+46     	; 0x5654 <countPulseASM+0xa2>
         if (--maxloops == 0)
    5626:	89 85       	ldd	r24, Y+9	; 0x09
    5628:	9a 85       	ldd	r25, Y+10	; 0x0a
    562a:	ab 85       	ldd	r26, Y+11	; 0x0b
    562c:	bc 85       	ldd	r27, Y+12	; 0x0c
    562e:	01 97       	sbiw	r24, 0x01	; 1
    5630:	a1 09       	sbc	r26, r1
    5632:	b1 09       	sbc	r27, r1
    5634:	89 87       	std	Y+9, r24	; 0x09
    5636:	9a 87       	std	Y+10, r25	; 0x0a
    5638:	ab 87       	std	Y+11, r26	; 0x0b
    563a:	bc 87       	std	Y+12, r27	; 0x0c
    563c:	89 85       	ldd	r24, Y+9	; 0x09
    563e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5640:	ab 85       	ldd	r26, Y+11	; 0x0b
    5642:	bc 85       	ldd	r27, Y+12	; 0x0c
    5644:	89 2b       	or	r24, r25
    5646:	8a 2b       	or	r24, r26
    5648:	8b 2b       	or	r24, r27
    564a:	21 f4       	brne	.+8      	; 0x5654 <countPulseASM+0xa2>
             return 0;
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	dc 01       	movw	r26, r24
    5652:	33 c0       	rjmp	.+102    	; 0x56ba <countPulseASM+0x108>
     while ((*port & bit) == stateMask)
         if (--maxloops == 0)
             return 0;

     // wait for the pulse to start
     while ((*port & bit) != stateMask)
    5654:	8d 81       	ldd	r24, Y+5	; 0x05
    5656:	9e 81       	ldd	r25, Y+6	; 0x06
    5658:	fc 01       	movw	r30, r24
    565a:	90 81       	ld	r25, Z
    565c:	8f 81       	ldd	r24, Y+7	; 0x07
    565e:	98 23       	and	r25, r24
    5660:	88 85       	ldd	r24, Y+8	; 0x08
    5662:	98 17       	cp	r25, r24
    5664:	01 f7       	brne	.-64     	; 0x5626 <countPulseASM+0x74>
         if (--maxloops == 0)
             return 0;

      // wait for the pulse to stop
      while ((*port & bit) == stateMask) {
    5666:	1c c0       	rjmp	.+56     	; 0x56a0 <countPulseASM+0xee>
          if (++width == maxloops)
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	9a 81       	ldd	r25, Y+2	; 0x02
    566c:	ab 81       	ldd	r26, Y+3	; 0x03
    566e:	bc 81       	ldd	r27, Y+4	; 0x04
    5670:	01 96       	adiw	r24, 0x01	; 1
    5672:	a1 1d       	adc	r26, r1
    5674:	b1 1d       	adc	r27, r1
    5676:	89 83       	std	Y+1, r24	; 0x01
    5678:	9a 83       	std	Y+2, r25	; 0x02
    567a:	ab 83       	std	Y+3, r26	; 0x03
    567c:	bc 83       	std	Y+4, r27	; 0x04
    567e:	29 81       	ldd	r18, Y+1	; 0x01
    5680:	3a 81       	ldd	r19, Y+2	; 0x02
    5682:	4b 81       	ldd	r20, Y+3	; 0x03
    5684:	5c 81       	ldd	r21, Y+4	; 0x04
    5686:	89 85       	ldd	r24, Y+9	; 0x09
    5688:	9a 85       	ldd	r25, Y+10	; 0x0a
    568a:	ab 85       	ldd	r26, Y+11	; 0x0b
    568c:	bc 85       	ldd	r27, Y+12	; 0x0c
    568e:	28 17       	cp	r18, r24
    5690:	39 07       	cpc	r19, r25
    5692:	4a 07       	cpc	r20, r26
    5694:	5b 07       	cpc	r21, r27
    5696:	21 f4       	brne	.+8      	; 0x56a0 <countPulseASM+0xee>
              return 0;
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	dc 01       	movw	r26, r24
    569e:	0d c0       	rjmp	.+26     	; 0x56ba <countPulseASM+0x108>
     while ((*port & bit) != stateMask)
         if (--maxloops == 0)
             return 0;

      // wait for the pulse to stop
      while ((*port & bit) == stateMask) {
    56a0:	8d 81       	ldd	r24, Y+5	; 0x05
    56a2:	9e 81       	ldd	r25, Y+6	; 0x06
    56a4:	fc 01       	movw	r30, r24
    56a6:	90 81       	ld	r25, Z
    56a8:	8f 81       	ldd	r24, Y+7	; 0x07
    56aa:	98 23       	and	r25, r24
    56ac:	88 85       	ldd	r24, Y+8	; 0x08
    56ae:	98 17       	cp	r25, r24
    56b0:	d9 f2       	breq	.-74     	; 0x5668 <countPulseASM+0xb6>
          if (++width == maxloops)
              return 0;
      }
      return width;
    56b2:	89 81       	ldd	r24, Y+1	; 0x01
    56b4:	9a 81       	ldd	r25, Y+2	; 0x02
    56b6:	ab 81       	ldd	r26, Y+3	; 0x03
    56b8:	bc 81       	ldd	r27, Y+4	; 0x04
 }
    56ba:	bc 01       	movw	r22, r24
    56bc:	cd 01       	movw	r24, r26
    56be:	2c 96       	adiw	r28, 0x0c	; 12
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	f8 94       	cli
    56c4:	de bf       	out	0x3e, r29	; 62
    56c6:	0f be       	out	0x3f, r0	; 63
    56c8:	cd bf       	out	0x3d, r28	; 61
    56ca:	df 91       	pop	r29
    56cc:	cf 91       	pop	r28
    56ce:	1f 91       	pop	r17
    56d0:	0f 91       	pop	r16
    56d2:	08 95       	ret

000056d4 <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	00 d0       	rcall	.+0      	; 0x56da <shiftIn+0x6>
    56da:	1f 92       	push	r1
    56dc:	1f 92       	push	r1
    56de:	cd b7       	in	r28, 0x3d	; 61
    56e0:	de b7       	in	r29, 0x3e	; 62
    56e2:	8b 83       	std	Y+3, r24	; 0x03
    56e4:	6c 83       	std	Y+4, r22	; 0x04
    56e6:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
    56e8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    56ea:	1a 82       	std	Y+2, r1	; 0x02
    56ec:	39 c0       	rjmp	.+114    	; 0x5760 <shiftIn+0x8c>
		digitalWrite(clockPin, HIGH);
    56ee:	61 e0       	ldi	r22, 0x01	; 1
    56f0:	8c 81       	ldd	r24, Y+4	; 0x04
    56f2:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
		if (bitOrder == LSBFIRST)
    56f6:	8d 81       	ldd	r24, Y+5	; 0x05
    56f8:	88 23       	and	r24, r24
    56fa:	99 f4       	brne	.+38     	; 0x5722 <shiftIn+0x4e>
			value |= digitalRead(dataPin) << i;
    56fc:	8b 81       	ldd	r24, Y+3	; 0x03
    56fe:	0e 94 b3 28 	call	0x5166	; 0x5166 <digitalRead>
    5702:	9c 01       	movw	r18, r24
    5704:	8a 81       	ldd	r24, Y+2	; 0x02
    5706:	88 2f       	mov	r24, r24
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	a9 01       	movw	r20, r18
    570c:	02 c0       	rjmp	.+4      	; 0x5712 <shiftIn+0x3e>
    570e:	44 0f       	add	r20, r20
    5710:	55 1f       	adc	r21, r21
    5712:	8a 95       	dec	r24
    5714:	e2 f7       	brpl	.-8      	; 0x570e <shiftIn+0x3a>
    5716:	ca 01       	movw	r24, r20
    5718:	98 2f       	mov	r25, r24
    571a:	89 81       	ldd	r24, Y+1	; 0x01
    571c:	89 2b       	or	r24, r25
    571e:	89 83       	std	Y+1, r24	; 0x01
    5720:	18 c0       	rjmp	.+48     	; 0x5752 <shiftIn+0x7e>
		else
			value |= digitalRead(dataPin) << (7 - i);
    5722:	8b 81       	ldd	r24, Y+3	; 0x03
    5724:	0e 94 b3 28 	call	0x5166	; 0x5166 <digitalRead>
    5728:	ac 01       	movw	r20, r24
    572a:	8a 81       	ldd	r24, Y+2	; 0x02
    572c:	88 2f       	mov	r24, r24
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	27 e0       	ldi	r18, 0x07	; 7
    5732:	30 e0       	ldi	r19, 0x00	; 0
    5734:	b9 01       	movw	r22, r18
    5736:	68 1b       	sub	r22, r24
    5738:	79 0b       	sbc	r23, r25
    573a:	cb 01       	movw	r24, r22
    573c:	9a 01       	movw	r18, r20
    573e:	02 c0       	rjmp	.+4      	; 0x5744 <shiftIn+0x70>
    5740:	22 0f       	add	r18, r18
    5742:	33 1f       	adc	r19, r19
    5744:	8a 95       	dec	r24
    5746:	e2 f7       	brpl	.-8      	; 0x5740 <shiftIn+0x6c>
    5748:	c9 01       	movw	r24, r18
    574a:	98 2f       	mov	r25, r24
    574c:	89 81       	ldd	r24, Y+1	; 0x01
    574e:	89 2b       	or	r24, r25
    5750:	89 83       	std	Y+1, r24	; 0x01
		digitalWrite(clockPin, LOW);
    5752:	60 e0       	ldi	r22, 0x00	; 0
    5754:	8c 81       	ldd	r24, Y+4	; 0x04
    5756:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    575a:	8a 81       	ldd	r24, Y+2	; 0x02
    575c:	8f 5f       	subi	r24, 0xFF	; 255
    575e:	8a 83       	std	Y+2, r24	; 0x02
    5760:	8a 81       	ldd	r24, Y+2	; 0x02
    5762:	88 30       	cpi	r24, 0x08	; 8
    5764:	20 f2       	brcs	.-120    	; 0x56ee <shiftIn+0x1a>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
    5766:	89 81       	ldd	r24, Y+1	; 0x01
}
    5768:	0f 90       	pop	r0
    576a:	0f 90       	pop	r0
    576c:	0f 90       	pop	r0
    576e:	0f 90       	pop	r0
    5770:	0f 90       	pop	r0
    5772:	df 91       	pop	r29
    5774:	cf 91       	pop	r28
    5776:	08 95       	ret

00005778 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    5778:	cf 93       	push	r28
    577a:	df 93       	push	r29
    577c:	00 d0       	rcall	.+0      	; 0x577e <shiftOut+0x6>
    577e:	1f 92       	push	r1
    5780:	1f 92       	push	r1
    5782:	cd b7       	in	r28, 0x3d	; 61
    5784:	de b7       	in	r29, 0x3e	; 62
    5786:	8a 83       	std	Y+2, r24	; 0x02
    5788:	6b 83       	std	Y+3, r22	; 0x03
    578a:	4c 83       	std	Y+4, r20	; 0x04
    578c:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    578e:	19 82       	std	Y+1, r1	; 0x01
    5790:	41 c0       	rjmp	.+130    	; 0x5814 <shiftOut+0x9c>
		if (bitOrder == LSBFIRST)
    5792:	8c 81       	ldd	r24, Y+4	; 0x04
    5794:	88 23       	and	r24, r24
    5796:	b9 f4       	brne	.+46     	; 0x57c6 <shiftOut+0x4e>
			digitalWrite(dataPin, !!(val & (1 << i)));
    5798:	8d 81       	ldd	r24, Y+5	; 0x05
    579a:	88 2f       	mov	r24, r24
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	29 81       	ldd	r18, Y+1	; 0x01
    57a0:	22 2f       	mov	r18, r18
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	02 c0       	rjmp	.+4      	; 0x57aa <shiftOut+0x32>
    57a6:	95 95       	asr	r25
    57a8:	87 95       	ror	r24
    57aa:	2a 95       	dec	r18
    57ac:	e2 f7       	brpl	.-8      	; 0x57a6 <shiftOut+0x2e>
    57ae:	81 70       	andi	r24, 0x01	; 1
    57b0:	99 27       	eor	r25, r25
    57b2:	21 e0       	ldi	r18, 0x01	; 1
    57b4:	89 2b       	or	r24, r25
    57b6:	09 f4       	brne	.+2      	; 0x57ba <shiftOut+0x42>
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	82 2f       	mov	r24, r18
    57bc:	68 2f       	mov	r22, r24
    57be:	8a 81       	ldd	r24, Y+2	; 0x02
    57c0:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
    57c4:	1c c0       	rjmp	.+56     	; 0x57fe <shiftOut+0x86>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    57c6:	8d 81       	ldd	r24, Y+5	; 0x05
    57c8:	88 2f       	mov	r24, r24
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	29 81       	ldd	r18, Y+1	; 0x01
    57ce:	22 2f       	mov	r18, r18
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	47 e0       	ldi	r20, 0x07	; 7
    57d4:	50 e0       	ldi	r21, 0x00	; 0
    57d6:	ba 01       	movw	r22, r20
    57d8:	62 1b       	sub	r22, r18
    57da:	73 0b       	sbc	r23, r19
    57dc:	9b 01       	movw	r18, r22
    57de:	02 c0       	rjmp	.+4      	; 0x57e4 <shiftOut+0x6c>
    57e0:	95 95       	asr	r25
    57e2:	87 95       	ror	r24
    57e4:	2a 95       	dec	r18
    57e6:	e2 f7       	brpl	.-8      	; 0x57e0 <shiftOut+0x68>
    57e8:	81 70       	andi	r24, 0x01	; 1
    57ea:	99 27       	eor	r25, r25
    57ec:	21 e0       	ldi	r18, 0x01	; 1
    57ee:	89 2b       	or	r24, r25
    57f0:	09 f4       	brne	.+2      	; 0x57f4 <shiftOut+0x7c>
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	82 2f       	mov	r24, r18
    57f6:	68 2f       	mov	r22, r24
    57f8:	8a 81       	ldd	r24, Y+2	; 0x02
    57fa:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    57fe:	61 e0       	ldi	r22, 0x01	; 1
    5800:	8b 81       	ldd	r24, Y+3	; 0x03
    5802:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    5806:	60 e0       	ldi	r22, 0x00	; 0
    5808:	8b 81       	ldd	r24, Y+3	; 0x03
    580a:	0e 94 2a 28 	call	0x5054	; 0x5054 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    580e:	89 81       	ldd	r24, Y+1	; 0x01
    5810:	8f 5f       	subi	r24, 0xFF	; 255
    5812:	89 83       	std	Y+1, r24	; 0x01
    5814:	89 81       	ldd	r24, Y+1	; 0x01
    5816:	88 30       	cpi	r24, 0x08	; 8
    5818:	08 f4       	brcc	.+2      	; 0x581c <shiftOut+0xa4>
    581a:	bb cf       	rjmp	.-138    	; 0x5792 <shiftOut+0x1a>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    581c:	00 00       	nop
    581e:	0f 90       	pop	r0
    5820:	0f 90       	pop	r0
    5822:	0f 90       	pop	r0
    5824:	0f 90       	pop	r0
    5826:	0f 90       	pop	r0
    5828:	df 91       	pop	r29
    582a:	cf 91       	pop	r28
    582c:	08 95       	ret

0000582e <_Z10randomSeedm>:
extern "C" {
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	00 d0       	rcall	.+0      	; 0x5834 <_Z10randomSeedm+0x6>
    5834:	1f 92       	push	r1
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62
    583a:	69 83       	std	Y+1, r22	; 0x01
    583c:	7a 83       	std	Y+2, r23	; 0x02
    583e:	8b 83       	std	Y+3, r24	; 0x03
    5840:	9c 83       	std	Y+4, r25	; 0x04
  if (seed != 0) {
    5842:	89 81       	ldd	r24, Y+1	; 0x01
    5844:	9a 81       	ldd	r25, Y+2	; 0x02
    5846:	ab 81       	ldd	r26, Y+3	; 0x03
    5848:	bc 81       	ldd	r27, Y+4	; 0x04
    584a:	89 2b       	or	r24, r25
    584c:	8a 2b       	or	r24, r26
    584e:	8b 2b       	or	r24, r27
    5850:	41 f0       	breq	.+16     	; 0x5862 <_Z10randomSeedm+0x34>
    srandom(seed);
    5852:	89 81       	ldd	r24, Y+1	; 0x01
    5854:	9a 81       	ldd	r25, Y+2	; 0x02
    5856:	ab 81       	ldd	r26, Y+3	; 0x03
    5858:	bc 81       	ldd	r27, Y+4	; 0x04
    585a:	bc 01       	movw	r22, r24
    585c:	cd 01       	movw	r24, r26
    585e:	0e 94 7d 47 	call	0x8efa	; 0x8efa <srandom>
  }
}
    5862:	00 00       	nop
    5864:	0f 90       	pop	r0
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	df 91       	pop	r29
    586e:	cf 91       	pop	r28
    5870:	08 95       	ret

00005872 <_Z6randoml>:

long random(long howbig)
{
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	00 d0       	rcall	.+0      	; 0x5878 <_Z6randoml+0x6>
    5878:	1f 92       	push	r1
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	69 83       	std	Y+1, r22	; 0x01
    5880:	7a 83       	std	Y+2, r23	; 0x02
    5882:	8b 83       	std	Y+3, r24	; 0x03
    5884:	9c 83       	std	Y+4, r25	; 0x04
  if (howbig == 0) {
    5886:	89 81       	ldd	r24, Y+1	; 0x01
    5888:	9a 81       	ldd	r25, Y+2	; 0x02
    588a:	ab 81       	ldd	r26, Y+3	; 0x03
    588c:	bc 81       	ldd	r27, Y+4	; 0x04
    588e:	89 2b       	or	r24, r25
    5890:	8a 2b       	or	r24, r26
    5892:	8b 2b       	or	r24, r27
    5894:	21 f4       	brne	.+8      	; 0x589e <_Z6randoml+0x2c>
    return 0;
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	dc 01       	movw	r26, r24
    589c:	0e c0       	rjmp	.+28     	; 0x58ba <_Z6randoml+0x48>
  }
  return random() % howbig;
    589e:	0e 94 2f 47 	call	0x8e5e	; 0x8e5e <random>
    58a2:	dc 01       	movw	r26, r24
    58a4:	cb 01       	movw	r24, r22
    58a6:	29 81       	ldd	r18, Y+1	; 0x01
    58a8:	3a 81       	ldd	r19, Y+2	; 0x02
    58aa:	4b 81       	ldd	r20, Y+3	; 0x03
    58ac:	5c 81       	ldd	r21, Y+4	; 0x04
    58ae:	bc 01       	movw	r22, r24
    58b0:	cd 01       	movw	r24, r26
    58b2:	0e 94 26 43 	call	0x864c	; 0x864c <__divmodsi4>
    58b6:	dc 01       	movw	r26, r24
    58b8:	cb 01       	movw	r24, r22
}
    58ba:	bc 01       	movw	r22, r24
    58bc:	cd 01       	movw	r24, r26
    58be:	0f 90       	pop	r0
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	0f 90       	pop	r0
    58c6:	df 91       	pop	r29
    58c8:	cf 91       	pop	r28
    58ca:	08 95       	ret

000058cc <_Z6randomll>:

long random(long howsmall, long howbig)
{
    58cc:	ef 92       	push	r14
    58ce:	ff 92       	push	r15
    58d0:	0f 93       	push	r16
    58d2:	1f 93       	push	r17
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	cd b7       	in	r28, 0x3d	; 61
    58da:	de b7       	in	r29, 0x3e	; 62
    58dc:	2c 97       	sbiw	r28, 0x0c	; 12
    58de:	0f b6       	in	r0, 0x3f	; 63
    58e0:	f8 94       	cli
    58e2:	de bf       	out	0x3e, r29	; 62
    58e4:	0f be       	out	0x3f, r0	; 63
    58e6:	cd bf       	out	0x3d, r28	; 61
    58e8:	6d 83       	std	Y+5, r22	; 0x05
    58ea:	7e 83       	std	Y+6, r23	; 0x06
    58ec:	8f 83       	std	Y+7, r24	; 0x07
    58ee:	98 87       	std	Y+8, r25	; 0x08
    58f0:	29 87       	std	Y+9, r18	; 0x09
    58f2:	3a 87       	std	Y+10, r19	; 0x0a
    58f4:	4b 87       	std	Y+11, r20	; 0x0b
    58f6:	5c 87       	std	Y+12, r21	; 0x0c
  if (howsmall >= howbig) {
    58f8:	2d 81       	ldd	r18, Y+5	; 0x05
    58fa:	3e 81       	ldd	r19, Y+6	; 0x06
    58fc:	4f 81       	ldd	r20, Y+7	; 0x07
    58fe:	58 85       	ldd	r21, Y+8	; 0x08
    5900:	89 85       	ldd	r24, Y+9	; 0x09
    5902:	9a 85       	ldd	r25, Y+10	; 0x0a
    5904:	ab 85       	ldd	r26, Y+11	; 0x0b
    5906:	bc 85       	ldd	r27, Y+12	; 0x0c
    5908:	28 17       	cp	r18, r24
    590a:	39 07       	cpc	r19, r25
    590c:	4a 07       	cpc	r20, r26
    590e:	5b 07       	cpc	r21, r27
    5910:	2c f0       	brlt	.+10     	; 0x591c <_Z6randomll+0x50>
    return howsmall;
    5912:	8d 81       	ldd	r24, Y+5	; 0x05
    5914:	9e 81       	ldd	r25, Y+6	; 0x06
    5916:	af 81       	ldd	r26, Y+7	; 0x07
    5918:	b8 85       	ldd	r27, Y+8	; 0x08
    591a:	26 c0       	rjmp	.+76     	; 0x5968 <_Z6randomll+0x9c>
  }
  long diff = howbig - howsmall;
    591c:	29 85       	ldd	r18, Y+9	; 0x09
    591e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5920:	4b 85       	ldd	r20, Y+11	; 0x0b
    5922:	5c 85       	ldd	r21, Y+12	; 0x0c
    5924:	8d 81       	ldd	r24, Y+5	; 0x05
    5926:	9e 81       	ldd	r25, Y+6	; 0x06
    5928:	af 81       	ldd	r26, Y+7	; 0x07
    592a:	b8 85       	ldd	r27, Y+8	; 0x08
    592c:	79 01       	movw	r14, r18
    592e:	8a 01       	movw	r16, r20
    5930:	e8 1a       	sub	r14, r24
    5932:	f9 0a       	sbc	r15, r25
    5934:	0a 0b       	sbc	r16, r26
    5936:	1b 0b       	sbc	r17, r27
    5938:	d8 01       	movw	r26, r16
    593a:	c7 01       	movw	r24, r14
    593c:	89 83       	std	Y+1, r24	; 0x01
    593e:	9a 83       	std	Y+2, r25	; 0x02
    5940:	ab 83       	std	Y+3, r26	; 0x03
    5942:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
    5944:	89 81       	ldd	r24, Y+1	; 0x01
    5946:	9a 81       	ldd	r25, Y+2	; 0x02
    5948:	ab 81       	ldd	r26, Y+3	; 0x03
    594a:	bc 81       	ldd	r27, Y+4	; 0x04
    594c:	bc 01       	movw	r22, r24
    594e:	cd 01       	movw	r24, r26
    5950:	0e 94 39 2c 	call	0x5872	; 0x5872 <_Z6randoml>
    5954:	9b 01       	movw	r18, r22
    5956:	ac 01       	movw	r20, r24
    5958:	8d 81       	ldd	r24, Y+5	; 0x05
    595a:	9e 81       	ldd	r25, Y+6	; 0x06
    595c:	af 81       	ldd	r26, Y+7	; 0x07
    595e:	b8 85       	ldd	r27, Y+8	; 0x08
    5960:	82 0f       	add	r24, r18
    5962:	93 1f       	adc	r25, r19
    5964:	a4 1f       	adc	r26, r20
    5966:	b5 1f       	adc	r27, r21
}
    5968:	bc 01       	movw	r22, r24
    596a:	cd 01       	movw	r24, r26
    596c:	2c 96       	adiw	r28, 0x0c	; 12
    596e:	0f b6       	in	r0, 0x3f	; 63
    5970:	f8 94       	cli
    5972:	de bf       	out	0x3e, r29	; 62
    5974:	0f be       	out	0x3f, r0	; 63
    5976:	cd bf       	out	0x3d, r28	; 61
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	ff 90       	pop	r15
    5982:	ef 90       	pop	r14
    5984:	08 95       	ret

00005986 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5986:	af 92       	push	r10
    5988:	bf 92       	push	r11
    598a:	cf 92       	push	r12
    598c:	df 92       	push	r13
    598e:	ef 92       	push	r14
    5990:	ff 92       	push	r15
    5992:	0f 93       	push	r16
    5994:	1f 93       	push	r17
    5996:	cf 93       	push	r28
    5998:	df 93       	push	r29
    599a:	cd b7       	in	r28, 0x3d	; 61
    599c:	de b7       	in	r29, 0x3e	; 62
    599e:	60 97       	sbiw	r28, 0x10	; 16
    59a0:	0f b6       	in	r0, 0x3f	; 63
    59a2:	f8 94       	cli
    59a4:	de bf       	out	0x3e, r29	; 62
    59a6:	0f be       	out	0x3f, r0	; 63
    59a8:	cd bf       	out	0x3d, r28	; 61
    59aa:	69 83       	std	Y+1, r22	; 0x01
    59ac:	7a 83       	std	Y+2, r23	; 0x02
    59ae:	8b 83       	std	Y+3, r24	; 0x03
    59b0:	9c 83       	std	Y+4, r25	; 0x04
    59b2:	2d 83       	std	Y+5, r18	; 0x05
    59b4:	3e 83       	std	Y+6, r19	; 0x06
    59b6:	4f 83       	std	Y+7, r20	; 0x07
    59b8:	58 87       	std	Y+8, r21	; 0x08
    59ba:	e9 86       	std	Y+9, r14	; 0x09
    59bc:	fa 86       	std	Y+10, r15	; 0x0a
    59be:	0b 87       	std	Y+11, r16	; 0x0b
    59c0:	1c 87       	std	Y+12, r17	; 0x0c
    59c2:	ad 86       	std	Y+13, r10	; 0x0d
    59c4:	be 86       	std	Y+14, r11	; 0x0e
    59c6:	cf 86       	std	Y+15, r12	; 0x0f
    59c8:	d8 8a       	std	Y+16, r13	; 0x10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    59ca:	29 81       	ldd	r18, Y+1	; 0x01
    59cc:	3a 81       	ldd	r19, Y+2	; 0x02
    59ce:	4b 81       	ldd	r20, Y+3	; 0x03
    59d0:	5c 81       	ldd	r21, Y+4	; 0x04
    59d2:	8d 81       	ldd	r24, Y+5	; 0x05
    59d4:	9e 81       	ldd	r25, Y+6	; 0x06
    59d6:	af 81       	ldd	r26, Y+7	; 0x07
    59d8:	b8 85       	ldd	r27, Y+8	; 0x08
    59da:	79 01       	movw	r14, r18
    59dc:	8a 01       	movw	r16, r20
    59de:	e8 1a       	sub	r14, r24
    59e0:	f9 0a       	sbc	r15, r25
    59e2:	0a 0b       	sbc	r16, r26
    59e4:	1b 0b       	sbc	r17, r27
    59e6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    59e8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    59ea:	48 a1       	ldd	r20, Y+32	; 0x20
    59ec:	59 a1       	ldd	r21, Y+33	; 0x21
    59ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    59f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    59f2:	af 85       	ldd	r26, Y+15	; 0x0f
    59f4:	b8 89       	ldd	r27, Y+16	; 0x10
    59f6:	59 01       	movw	r10, r18
    59f8:	6a 01       	movw	r12, r20
    59fa:	a8 1a       	sub	r10, r24
    59fc:	b9 0a       	sbc	r11, r25
    59fe:	ca 0a       	sbc	r12, r26
    5a00:	db 0a       	sbc	r13, r27
    5a02:	d6 01       	movw	r26, r12
    5a04:	c5 01       	movw	r24, r10
    5a06:	a8 01       	movw	r20, r16
    5a08:	97 01       	movw	r18, r14
    5a0a:	bc 01       	movw	r22, r24
    5a0c:	cd 01       	movw	r24, r26
    5a0e:	0e 94 f4 42 	call	0x85e8	; 0x85e8 <__mulsi3>
    5a12:	7b 01       	movw	r14, r22
    5a14:	8c 01       	movw	r16, r24
    5a16:	29 85       	ldd	r18, Y+9	; 0x09
    5a18:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a1a:	4b 85       	ldd	r20, Y+11	; 0x0b
    5a1c:	5c 85       	ldd	r21, Y+12	; 0x0c
    5a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a20:	9e 81       	ldd	r25, Y+6	; 0x06
    5a22:	af 81       	ldd	r26, Y+7	; 0x07
    5a24:	b8 85       	ldd	r27, Y+8	; 0x08
    5a26:	28 1b       	sub	r18, r24
    5a28:	39 0b       	sbc	r19, r25
    5a2a:	4a 0b       	sbc	r20, r26
    5a2c:	5b 0b       	sbc	r21, r27
    5a2e:	c8 01       	movw	r24, r16
    5a30:	b7 01       	movw	r22, r14
    5a32:	0e 94 26 43 	call	0x864c	; 0x864c <__divmodsi4>
    5a36:	da 01       	movw	r26, r20
    5a38:	c9 01       	movw	r24, r18
    5a3a:	9c 01       	movw	r18, r24
    5a3c:	ad 01       	movw	r20, r26
    5a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a42:	af 85       	ldd	r26, Y+15	; 0x0f
    5a44:	b8 89       	ldd	r27, Y+16	; 0x10
    5a46:	82 0f       	add	r24, r18
    5a48:	93 1f       	adc	r25, r19
    5a4a:	a4 1f       	adc	r26, r20
    5a4c:	b5 1f       	adc	r27, r21
}
    5a4e:	bc 01       	movw	r22, r24
    5a50:	cd 01       	movw	r24, r26
    5a52:	60 96       	adiw	r28, 0x10	; 16
    5a54:	0f b6       	in	r0, 0x3f	; 63
    5a56:	f8 94       	cli
    5a58:	de bf       	out	0x3e, r29	; 62
    5a5a:	0f be       	out	0x3f, r0	; 63
    5a5c:	cd bf       	out	0x3d, r28	; 61
    5a5e:	df 91       	pop	r29
    5a60:	cf 91       	pop	r28
    5a62:	1f 91       	pop	r17
    5a64:	0f 91       	pop	r16
    5a66:	ff 90       	pop	r15
    5a68:	ef 90       	pop	r14
    5a6a:	df 90       	pop	r13
    5a6c:	cf 90       	pop	r12
    5a6e:	bf 90       	pop	r11
    5a70:	af 90       	pop	r10
    5a72:	08 95       	ret

00005a74 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    5a74:	cf 93       	push	r28
    5a76:	df 93       	push	r29
    5a78:	1f 92       	push	r1
    5a7a:	1f 92       	push	r1
    5a7c:	cd b7       	in	r28, 0x3d	; 61
    5a7e:	de b7       	in	r29, 0x3e	; 62
    5a80:	9a 83       	std	Y+2, r25	; 0x02
    5a82:	89 83       	std	Y+1, r24	; 0x01
    5a84:	89 81       	ldd	r24, Y+1	; 0x01
    5a86:	9a 81       	ldd	r25, Y+2	; 0x02
    5a88:	0f 90       	pop	r0
    5a8a:	0f 90       	pop	r0
    5a8c:	df 91       	pop	r29
    5a8e:	cf 91       	pop	r28
    5a90:	08 95       	ret

00005a92 <_Z8makeWordhh>:
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
    5a92:	cf 93       	push	r28
    5a94:	df 93       	push	r29
    5a96:	1f 92       	push	r1
    5a98:	1f 92       	push	r1
    5a9a:	cd b7       	in	r28, 0x3d	; 61
    5a9c:	de b7       	in	r29, 0x3e	; 62
    5a9e:	89 83       	std	Y+1, r24	; 0x01
    5aa0:	6a 83       	std	Y+2, r22	; 0x02
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	88 2f       	mov	r24, r24
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	38 2f       	mov	r19, r24
    5aaa:	22 27       	eor	r18, r18
    5aac:	8a 81       	ldd	r24, Y+2	; 0x02
    5aae:	88 2f       	mov	r24, r24
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	82 2b       	or	r24, r18
    5ab4:	93 2b       	or	r25, r19
    5ab6:	0f 90       	pop	r0
    5ab8:	0f 90       	pop	r0
    5aba:	df 91       	pop	r29
    5abc:	cf 91       	pop	r28
    5abe:	08 95       	ret

00005ac0 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    5ac0:	cf 93       	push	r28
    5ac2:	df 93       	push	r29
    5ac4:	00 d0       	rcall	.+0      	; 0x5ac6 <_ZN6StringC1EPKc+0x6>
    5ac6:	1f 92       	push	r1
    5ac8:	cd b7       	in	r28, 0x3d	; 61
    5aca:	de b7       	in	r29, 0x3e	; 62
    5acc:	9a 83       	std	Y+2, r25	; 0x02
    5ace:	89 83       	std	Y+1, r24	; 0x01
    5ad0:	7c 83       	std	Y+4, r23	; 0x04
    5ad2:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad8:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	if (cstr) copy(cstr, strlen(cstr));
    5adc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ade:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae0:	89 2b       	or	r24, r25
    5ae2:	61 f0       	breq	.+24     	; 0x5afc <_ZN6StringC1EPKc+0x3c>
    5ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae8:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    5aec:	ac 01       	movw	r20, r24
    5aee:	2b 81       	ldd	r18, Y+3	; 0x03
    5af0:	3c 81       	ldd	r19, Y+4	; 0x04
    5af2:	89 81       	ldd	r24, Y+1	; 0x01
    5af4:	9a 81       	ldd	r25, Y+2	; 0x02
    5af6:	b9 01       	movw	r22, r18
    5af8:	0e 94 10 30 	call	0x6020	; 0x6020 <_ZN6String4copyEPKcj>
}
    5afc:	00 00       	nop
    5afe:	0f 90       	pop	r0
    5b00:	0f 90       	pop	r0
    5b02:	0f 90       	pop	r0
    5b04:	0f 90       	pop	r0
    5b06:	df 91       	pop	r29
    5b08:	cf 91       	pop	r28
    5b0a:	08 95       	ret

00005b0c <_ZN6StringC1ERKS_>:

String::String(const String &value)
    5b0c:	cf 93       	push	r28
    5b0e:	df 93       	push	r29
    5b10:	00 d0       	rcall	.+0      	; 0x5b12 <_ZN6StringC1ERKS_+0x6>
    5b12:	1f 92       	push	r1
    5b14:	cd b7       	in	r28, 0x3d	; 61
    5b16:	de b7       	in	r29, 0x3e	; 62
    5b18:	9a 83       	std	Y+2, r25	; 0x02
    5b1a:	89 83       	std	Y+1, r24	; 0x01
    5b1c:	7c 83       	std	Y+4, r23	; 0x04
    5b1e:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    5b20:	89 81       	ldd	r24, Y+1	; 0x01
    5b22:	9a 81       	ldd	r25, Y+2	; 0x02
    5b24:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	*this = value;
    5b28:	2b 81       	ldd	r18, Y+3	; 0x03
    5b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    5b2c:	89 81       	ldd	r24, Y+1	; 0x01
    5b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b30:	b9 01       	movw	r22, r18
    5b32:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN6StringaSERKS_>
}
    5b36:	00 00       	nop
    5b38:	0f 90       	pop	r0
    5b3a:	0f 90       	pop	r0
    5b3c:	0f 90       	pop	r0
    5b3e:	0f 90       	pop	r0
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	08 95       	ret

00005b46 <_ZN6StringC1EPK19__FlashStringHelper>:

String::String(const __FlashStringHelper *pstr)
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	00 d0       	rcall	.+0      	; 0x5b4c <_ZN6StringC1EPK19__FlashStringHelper+0x6>
    5b4c:	1f 92       	push	r1
    5b4e:	cd b7       	in	r28, 0x3d	; 61
    5b50:	de b7       	in	r29, 0x3e	; 62
    5b52:	9a 83       	std	Y+2, r25	; 0x02
    5b54:	89 83       	std	Y+1, r24	; 0x01
    5b56:	7c 83       	std	Y+4, r23	; 0x04
    5b58:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    5b5a:	89 81       	ldd	r24, Y+1	; 0x01
    5b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b5e:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	*this = pstr;
    5b62:	2b 81       	ldd	r18, Y+3	; 0x03
    5b64:	3c 81       	ldd	r19, Y+4	; 0x04
    5b66:	89 81       	ldd	r24, Y+1	; 0x01
    5b68:	9a 81       	ldd	r25, Y+2	; 0x02
    5b6a:	b9 01       	movw	r22, r18
    5b6c:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <_ZN6StringaSEPK19__FlashStringHelper>
}
    5b70:	00 00       	nop
    5b72:	0f 90       	pop	r0
    5b74:	0f 90       	pop	r0
    5b76:	0f 90       	pop	r0
    5b78:	0f 90       	pop	r0
    5b7a:	df 91       	pop	r29
    5b7c:	cf 91       	pop	r28
    5b7e:	08 95       	ret

00005b80 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    5b80:	cf 93       	push	r28
    5b82:	df 93       	push	r29
    5b84:	00 d0       	rcall	.+0      	; 0x5b86 <_ZN6StringC1Ec+0x6>
    5b86:	1f 92       	push	r1
    5b88:	1f 92       	push	r1
    5b8a:	cd b7       	in	r28, 0x3d	; 61
    5b8c:	de b7       	in	r29, 0x3e	; 62
    5b8e:	9c 83       	std	Y+4, r25	; 0x04
    5b90:	8b 83       	std	Y+3, r24	; 0x03
    5b92:	6d 83       	std	Y+5, r22	; 0x05
{
	init();
    5b94:	8b 81       	ldd	r24, Y+3	; 0x03
    5b96:	9c 81       	ldd	r25, Y+4	; 0x04
    5b98:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[2];
	buf[0] = c;
    5b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b9e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    5ba0:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    5ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ba6:	9e 01       	movw	r18, r28
    5ba8:	2f 5f       	subi	r18, 0xFF	; 255
    5baa:	3f 4f       	sbci	r19, 0xFF	; 255
    5bac:	b9 01       	movw	r22, r18
    5bae:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5bb2:	00 00       	nop
    5bb4:	0f 90       	pop	r0
    5bb6:	0f 90       	pop	r0
    5bb8:	0f 90       	pop	r0
    5bba:	0f 90       	pop	r0
    5bbc:	0f 90       	pop	r0
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	08 95       	ret

00005bc4 <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
    5bc4:	cf 93       	push	r28
    5bc6:	df 93       	push	r29
    5bc8:	cd b7       	in	r28, 0x3d	; 61
    5bca:	de b7       	in	r29, 0x3e	; 62
    5bcc:	2d 97       	sbiw	r28, 0x0d	; 13
    5bce:	0f b6       	in	r0, 0x3f	; 63
    5bd0:	f8 94       	cli
    5bd2:	de bf       	out	0x3e, r29	; 62
    5bd4:	0f be       	out	0x3f, r0	; 63
    5bd6:	cd bf       	out	0x3d, r28	; 61
    5bd8:	9b 87       	std	Y+11, r25	; 0x0b
    5bda:	8a 87       	std	Y+10, r24	; 0x0a
    5bdc:	6c 87       	std	Y+12, r22	; 0x0c
    5bde:	4d 87       	std	Y+13, r20	; 0x0d
{
	init();
    5be0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5be2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5be4:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    5be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bea:	28 2f       	mov	r18, r24
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	8c 85       	ldd	r24, Y+12	; 0x0c
    5bf0:	88 2f       	mov	r24, r24
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	a9 01       	movw	r20, r18
    5bf6:	9e 01       	movw	r18, r28
    5bf8:	2f 5f       	subi	r18, 0xFF	; 255
    5bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5bfc:	b9 01       	movw	r22, r18
    5bfe:	0e 94 c4 49 	call	0x9388	; 0x9388 <utoa>
	*this = buf;
    5c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c06:	9e 01       	movw	r18, r28
    5c08:	2f 5f       	subi	r18, 0xFF	; 255
    5c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0c:	b9 01       	movw	r22, r18
    5c0e:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5c12:	00 00       	nop
    5c14:	2d 96       	adiw	r28, 0x0d	; 13
    5c16:	0f b6       	in	r0, 0x3f	; 63
    5c18:	f8 94       	cli
    5c1a:	de bf       	out	0x3e, r29	; 62
    5c1c:	0f be       	out	0x3f, r0	; 63
    5c1e:	cd bf       	out	0x3d, r28	; 61
    5c20:	df 91       	pop	r29
    5c22:	cf 91       	pop	r28
    5c24:	08 95       	ret

00005c26 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    5c26:	cf 93       	push	r28
    5c28:	df 93       	push	r29
    5c2a:	cd b7       	in	r28, 0x3d	; 61
    5c2c:	de b7       	in	r29, 0x3e	; 62
    5c2e:	67 97       	sbiw	r28, 0x17	; 23
    5c30:	0f b6       	in	r0, 0x3f	; 63
    5c32:	f8 94       	cli
    5c34:	de bf       	out	0x3e, r29	; 62
    5c36:	0f be       	out	0x3f, r0	; 63
    5c38:	cd bf       	out	0x3d, r28	; 61
    5c3a:	9c 8b       	std	Y+20, r25	; 0x14
    5c3c:	8b 8b       	std	Y+19, r24	; 0x13
    5c3e:	7e 8b       	std	Y+22, r23	; 0x16
    5c40:	6d 8b       	std	Y+21, r22	; 0x15
    5c42:	4f 8b       	std	Y+23, r20	; 0x17
{
	init();
    5c44:	8b 89       	ldd	r24, Y+19	; 0x13
    5c46:	9c 89       	ldd	r25, Y+20	; 0x14
    5c48:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    5c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c4e:	28 2f       	mov	r18, r24
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	8d 89       	ldd	r24, Y+21	; 0x15
    5c54:	9e 89       	ldd	r25, Y+22	; 0x16
    5c56:	a9 01       	movw	r20, r18
    5c58:	9e 01       	movw	r18, r28
    5c5a:	2f 5f       	subi	r18, 0xFF	; 255
    5c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5e:	b9 01       	movw	r22, r18
    5c60:	0e 94 52 49 	call	0x92a4	; 0x92a4 <itoa>
	*this = buf;
    5c64:	8b 89       	ldd	r24, Y+19	; 0x13
    5c66:	9c 89       	ldd	r25, Y+20	; 0x14
    5c68:	9e 01       	movw	r18, r28
    5c6a:	2f 5f       	subi	r18, 0xFF	; 255
    5c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c6e:	b9 01       	movw	r22, r18
    5c70:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5c74:	00 00       	nop
    5c76:	67 96       	adiw	r28, 0x17	; 23
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	de bf       	out	0x3e, r29	; 62
    5c7e:	0f be       	out	0x3f, r0	; 63
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	df 91       	pop	r29
    5c84:	cf 91       	pop	r28
    5c86:	08 95       	ret

00005c88 <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
    5c88:	cf 93       	push	r28
    5c8a:	df 93       	push	r29
    5c8c:	cd b7       	in	r28, 0x3d	; 61
    5c8e:	de b7       	in	r29, 0x3e	; 62
    5c90:	66 97       	sbiw	r28, 0x16	; 22
    5c92:	0f b6       	in	r0, 0x3f	; 63
    5c94:	f8 94       	cli
    5c96:	de bf       	out	0x3e, r29	; 62
    5c98:	0f be       	out	0x3f, r0	; 63
    5c9a:	cd bf       	out	0x3d, r28	; 61
    5c9c:	9b 8b       	std	Y+19, r25	; 0x13
    5c9e:	8a 8b       	std	Y+18, r24	; 0x12
    5ca0:	7d 8b       	std	Y+21, r23	; 0x15
    5ca2:	6c 8b       	std	Y+20, r22	; 0x14
    5ca4:	4e 8b       	std	Y+22, r20	; 0x16
{
	init();
    5ca6:	8a 89       	ldd	r24, Y+18	; 0x12
    5ca8:	9b 89       	ldd	r25, Y+19	; 0x13
    5caa:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
    5cae:	8e 89       	ldd	r24, Y+22	; 0x16
    5cb0:	28 2f       	mov	r18, r24
    5cb2:	30 e0       	ldi	r19, 0x00	; 0
    5cb4:	8c 89       	ldd	r24, Y+20	; 0x14
    5cb6:	9d 89       	ldd	r25, Y+21	; 0x15
    5cb8:	a9 01       	movw	r20, r18
    5cba:	9e 01       	movw	r18, r28
    5cbc:	2f 5f       	subi	r18, 0xFF	; 255
    5cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5cc0:	b9 01       	movw	r22, r18
    5cc2:	0e 94 c4 49 	call	0x9388	; 0x9388 <utoa>
	*this = buf;
    5cc6:	8a 89       	ldd	r24, Y+18	; 0x12
    5cc8:	9b 89       	ldd	r25, Y+19	; 0x13
    5cca:	9e 01       	movw	r18, r28
    5ccc:	2f 5f       	subi	r18, 0xFF	; 255
    5cce:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd0:	b9 01       	movw	r22, r18
    5cd2:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5cd6:	00 00       	nop
    5cd8:	66 96       	adiw	r28, 0x16	; 22
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	f8 94       	cli
    5cde:	de bf       	out	0x3e, r29	; 62
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	cd bf       	out	0x3d, r28	; 61
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	08 95       	ret

00005cea <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    5cea:	cf 93       	push	r28
    5cec:	df 93       	push	r29
    5cee:	cd b7       	in	r28, 0x3d	; 61
    5cf0:	de b7       	in	r29, 0x3e	; 62
    5cf2:	a9 97       	sbiw	r28, 0x29	; 41
    5cf4:	0f b6       	in	r0, 0x3f	; 63
    5cf6:	f8 94       	cli
    5cf8:	de bf       	out	0x3e, r29	; 62
    5cfa:	0f be       	out	0x3f, r0	; 63
    5cfc:	cd bf       	out	0x3d, r28	; 61
    5cfe:	9c a3       	std	Y+36, r25	; 0x24
    5d00:	8b a3       	std	Y+35, r24	; 0x23
    5d02:	4d a3       	std	Y+37, r20	; 0x25
    5d04:	5e a3       	std	Y+38, r21	; 0x26
    5d06:	6f a3       	std	Y+39, r22	; 0x27
    5d08:	78 a7       	std	Y+40, r23	; 0x28
    5d0a:	29 a7       	std	Y+41, r18	; 0x29
{
	init();
    5d0c:	8b a1       	ldd	r24, Y+35	; 0x23
    5d0e:	9c a1       	ldd	r25, Y+36	; 0x24
    5d10:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
    5d14:	89 a5       	ldd	r24, Y+41	; 0x29
    5d16:	28 2f       	mov	r18, r24
    5d18:	30 e0       	ldi	r19, 0x00	; 0
    5d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    5d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    5d1e:	af a1       	ldd	r26, Y+39	; 0x27
    5d20:	b8 a5       	ldd	r27, Y+40	; 0x28
    5d22:	ae 01       	movw	r20, r28
    5d24:	4f 5f       	subi	r20, 0xFF	; 255
    5d26:	5f 4f       	sbci	r21, 0xFF	; 255
    5d28:	bc 01       	movw	r22, r24
    5d2a:	cd 01       	movw	r24, r26
    5d2c:	0e 94 68 49 	call	0x92d0	; 0x92d0 <ltoa>
	*this = buf;
    5d30:	8b a1       	ldd	r24, Y+35	; 0x23
    5d32:	9c a1       	ldd	r25, Y+36	; 0x24
    5d34:	9e 01       	movw	r18, r28
    5d36:	2f 5f       	subi	r18, 0xFF	; 255
    5d38:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3a:	b9 01       	movw	r22, r18
    5d3c:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5d40:	00 00       	nop
    5d42:	a9 96       	adiw	r28, 0x29	; 41
    5d44:	0f b6       	in	r0, 0x3f	; 63
    5d46:	f8 94       	cli
    5d48:	de bf       	out	0x3e, r29	; 62
    5d4a:	0f be       	out	0x3f, r0	; 63
    5d4c:	cd bf       	out	0x3d, r28	; 61
    5d4e:	df 91       	pop	r29
    5d50:	cf 91       	pop	r28
    5d52:	08 95       	ret

00005d54 <_ZN6StringC1Emh>:

String::String(unsigned long value, unsigned char base)
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	cd b7       	in	r28, 0x3d	; 61
    5d5a:	de b7       	in	r29, 0x3e	; 62
    5d5c:	a8 97       	sbiw	r28, 0x28	; 40
    5d5e:	0f b6       	in	r0, 0x3f	; 63
    5d60:	f8 94       	cli
    5d62:	de bf       	out	0x3e, r29	; 62
    5d64:	0f be       	out	0x3f, r0	; 63
    5d66:	cd bf       	out	0x3d, r28	; 61
    5d68:	9b a3       	std	Y+35, r25	; 0x23
    5d6a:	8a a3       	std	Y+34, r24	; 0x22
    5d6c:	4c a3       	std	Y+36, r20	; 0x24
    5d6e:	5d a3       	std	Y+37, r21	; 0x25
    5d70:	6e a3       	std	Y+38, r22	; 0x26
    5d72:	7f a3       	std	Y+39, r23	; 0x27
    5d74:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    5d76:	8a a1       	ldd	r24, Y+34	; 0x22
    5d78:	9b a1       	ldd	r25, Y+35	; 0x23
    5d7a:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
    5d7e:	88 a5       	ldd	r24, Y+40	; 0x28
    5d80:	28 2f       	mov	r18, r24
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	8c a1       	ldd	r24, Y+36	; 0x24
    5d86:	9d a1       	ldd	r25, Y+37	; 0x25
    5d88:	ae a1       	ldd	r26, Y+38	; 0x26
    5d8a:	bf a1       	ldd	r27, Y+39	; 0x27
    5d8c:	ae 01       	movw	r20, r28
    5d8e:	4f 5f       	subi	r20, 0xFF	; 255
    5d90:	5f 4f       	sbci	r21, 0xFF	; 255
    5d92:	bc 01       	movw	r22, r24
    5d94:	cd 01       	movw	r24, r26
    5d96:	0e 94 97 49 	call	0x932e	; 0x932e <ultoa>
	*this = buf;
    5d9a:	8a a1       	ldd	r24, Y+34	; 0x22
    5d9c:	9b a1       	ldd	r25, Y+35	; 0x23
    5d9e:	9e 01       	movw	r18, r28
    5da0:	2f 5f       	subi	r18, 0xFF	; 255
    5da2:	3f 4f       	sbci	r19, 0xFF	; 255
    5da4:	b9 01       	movw	r22, r18
    5da6:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5daa:	00 00       	nop
    5dac:	a8 96       	adiw	r28, 0x28	; 40
    5dae:	0f b6       	in	r0, 0x3f	; 63
    5db0:	f8 94       	cli
    5db2:	de bf       	out	0x3e, r29	; 62
    5db4:	0f be       	out	0x3f, r0	; 63
    5db6:	cd bf       	out	0x3d, r28	; 61
    5db8:	df 91       	pop	r29
    5dba:	cf 91       	pop	r28
    5dbc:	08 95       	ret

00005dbe <_ZN6StringC1Efh>:

String::String(float value, unsigned char decimalPlaces)
    5dbe:	0f 93       	push	r16
    5dc0:	1f 93       	push	r17
    5dc2:	cf 93       	push	r28
    5dc4:	df 93       	push	r29
    5dc6:	cd b7       	in	r28, 0x3d	; 61
    5dc8:	de b7       	in	r29, 0x3e	; 62
    5dca:	a8 97       	sbiw	r28, 0x28	; 40
    5dcc:	0f b6       	in	r0, 0x3f	; 63
    5dce:	f8 94       	cli
    5dd0:	de bf       	out	0x3e, r29	; 62
    5dd2:	0f be       	out	0x3f, r0	; 63
    5dd4:	cd bf       	out	0x3d, r28	; 61
    5dd6:	9b a3       	std	Y+35, r25	; 0x23
    5dd8:	8a a3       	std	Y+34, r24	; 0x22
    5dda:	4c a3       	std	Y+36, r20	; 0x24
    5ddc:	5d a3       	std	Y+37, r21	; 0x25
    5dde:	6e a3       	std	Y+38, r22	; 0x26
    5de0:	7f a3       	std	Y+39, r23	; 0x27
    5de2:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    5de4:	8a a1       	ldd	r24, Y+34	; 0x22
    5de6:	9b a1       	ldd	r25, Y+35	; 0x23
    5de8:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    5dec:	88 a5       	ldd	r24, Y+40	; 0x28
    5dee:	8e 5f       	subi	r24, 0xFE	; 254
    5df0:	48 2f       	mov	r20, r24
    5df2:	8c a1       	ldd	r24, Y+36	; 0x24
    5df4:	9d a1       	ldd	r25, Y+37	; 0x25
    5df6:	ae a1       	ldd	r26, Y+38	; 0x26
    5df8:	bf a1       	ldd	r27, Y+39	; 0x27
    5dfa:	9e 01       	movw	r18, r28
    5dfc:	2f 5f       	subi	r18, 0xFF	; 255
    5dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    5e00:	89 01       	movw	r16, r18
    5e02:	28 a5       	ldd	r18, Y+40	; 0x28
    5e04:	bc 01       	movw	r22, r24
    5e06:	cd 01       	movw	r24, r26
    5e08:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <dtostrf>
    5e0c:	9c 01       	movw	r18, r24
    5e0e:	8a a1       	ldd	r24, Y+34	; 0x22
    5e10:	9b a1       	ldd	r25, Y+35	; 0x23
    5e12:	b9 01       	movw	r22, r18
    5e14:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5e18:	00 00       	nop
    5e1a:	a8 96       	adiw	r28, 0x28	; 40
    5e1c:	0f b6       	in	r0, 0x3f	; 63
    5e1e:	f8 94       	cli
    5e20:	de bf       	out	0x3e, r29	; 62
    5e22:	0f be       	out	0x3f, r0	; 63
    5e24:	cd bf       	out	0x3d, r28	; 61
    5e26:	df 91       	pop	r29
    5e28:	cf 91       	pop	r28
    5e2a:	1f 91       	pop	r17
    5e2c:	0f 91       	pop	r16
    5e2e:	08 95       	ret

00005e30 <_ZN6StringC1Edh>:

String::String(double value, unsigned char decimalPlaces)
    5e30:	0f 93       	push	r16
    5e32:	1f 93       	push	r17
    5e34:	cf 93       	push	r28
    5e36:	df 93       	push	r29
    5e38:	cd b7       	in	r28, 0x3d	; 61
    5e3a:	de b7       	in	r29, 0x3e	; 62
    5e3c:	a8 97       	sbiw	r28, 0x28	; 40
    5e3e:	0f b6       	in	r0, 0x3f	; 63
    5e40:	f8 94       	cli
    5e42:	de bf       	out	0x3e, r29	; 62
    5e44:	0f be       	out	0x3f, r0	; 63
    5e46:	cd bf       	out	0x3d, r28	; 61
    5e48:	9b a3       	std	Y+35, r25	; 0x23
    5e4a:	8a a3       	std	Y+34, r24	; 0x22
    5e4c:	4c a3       	std	Y+36, r20	; 0x24
    5e4e:	5d a3       	std	Y+37, r21	; 0x25
    5e50:	6e a3       	std	Y+38, r22	; 0x26
    5e52:	7f a3       	std	Y+39, r23	; 0x27
    5e54:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    5e56:	8a a1       	ldd	r24, Y+34	; 0x22
    5e58:	9b a1       	ldd	r25, Y+35	; 0x23
    5e5a:	0e 94 b5 42 	call	0x856a	; 0x856a <_ZN6String4initEv>
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    5e5e:	88 a5       	ldd	r24, Y+40	; 0x28
    5e60:	8e 5f       	subi	r24, 0xFE	; 254
    5e62:	48 2f       	mov	r20, r24
    5e64:	8c a1       	ldd	r24, Y+36	; 0x24
    5e66:	9d a1       	ldd	r25, Y+37	; 0x25
    5e68:	ae a1       	ldd	r26, Y+38	; 0x26
    5e6a:	bf a1       	ldd	r27, Y+39	; 0x27
    5e6c:	9e 01       	movw	r18, r28
    5e6e:	2f 5f       	subi	r18, 0xFF	; 255
    5e70:	3f 4f       	sbci	r19, 0xFF	; 255
    5e72:	89 01       	movw	r16, r18
    5e74:	28 a5       	ldd	r18, Y+40	; 0x28
    5e76:	bc 01       	movw	r22, r24
    5e78:	cd 01       	movw	r24, r26
    5e7a:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <dtostrf>
    5e7e:	9c 01       	movw	r18, r24
    5e80:	8a a1       	ldd	r24, Y+34	; 0x22
    5e82:	9b a1       	ldd	r25, Y+35	; 0x23
    5e84:	b9 01       	movw	r22, r18
    5e86:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
}
    5e8a:	00 00       	nop
    5e8c:	a8 96       	adiw	r28, 0x28	; 40
    5e8e:	0f b6       	in	r0, 0x3f	; 63
    5e90:	f8 94       	cli
    5e92:	de bf       	out	0x3e, r29	; 62
    5e94:	0f be       	out	0x3f, r0	; 63
    5e96:	cd bf       	out	0x3d, r28	; 61
    5e98:	df 91       	pop	r29
    5e9a:	cf 91       	pop	r28
    5e9c:	1f 91       	pop	r17
    5e9e:	0f 91       	pop	r16
    5ea0:	08 95       	ret

00005ea2 <_ZN6StringD1Ev>:

String::~String()
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	1f 92       	push	r1
    5ea8:	1f 92       	push	r1
    5eaa:	cd b7       	in	r28, 0x3d	; 61
    5eac:	de b7       	in	r29, 0x3e	; 62
    5eae:	9a 83       	std	Y+2, r25	; 0x02
    5eb0:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
    5eb2:	89 81       	ldd	r24, Y+1	; 0x01
    5eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	80 81       	ld	r24, Z
    5eba:	91 81       	ldd	r25, Z+1	; 0x01
    5ebc:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <free>
}
    5ec0:	00 00       	nop
    5ec2:	0f 90       	pop	r0
    5ec4:	0f 90       	pop	r0
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	08 95       	ret

00005ecc <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	1f 92       	push	r1
    5ed2:	1f 92       	push	r1
    5ed4:	cd b7       	in	r28, 0x3d	; 61
    5ed6:	de b7       	in	r29, 0x3e	; 62
    5ed8:	9a 83       	std	Y+2, r25	; 0x02
    5eda:	89 83       	std	Y+1, r24	; 0x01
	if (buffer) free(buffer);
    5edc:	89 81       	ldd	r24, Y+1	; 0x01
    5ede:	9a 81       	ldd	r25, Y+2	; 0x02
    5ee0:	fc 01       	movw	r30, r24
    5ee2:	80 81       	ld	r24, Z
    5ee4:	91 81       	ldd	r25, Z+1	; 0x01
    5ee6:	89 2b       	or	r24, r25
    5ee8:	39 f0       	breq	.+14     	; 0x5ef8 <_ZN6String10invalidateEv+0x2c>
    5eea:	89 81       	ldd	r24, Y+1	; 0x01
    5eec:	9a 81       	ldd	r25, Y+2	; 0x02
    5eee:	fc 01       	movw	r30, r24
    5ef0:	80 81       	ld	r24, Z
    5ef2:	91 81       	ldd	r25, Z+1	; 0x01
    5ef4:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <free>
	buffer = NULL;
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	9a 81       	ldd	r25, Y+2	; 0x02
    5efc:	fc 01       	movw	r30, r24
    5efe:	11 82       	std	Z+1, r1	; 0x01
    5f00:	10 82       	st	Z, r1
	capacity = len = 0;
    5f02:	89 81       	ldd	r24, Y+1	; 0x01
    5f04:	9a 81       	ldd	r25, Y+2	; 0x02
    5f06:	fc 01       	movw	r30, r24
    5f08:	15 82       	std	Z+5, r1	; 0x05
    5f0a:	14 82       	std	Z+4, r1	; 0x04
    5f0c:	89 81       	ldd	r24, Y+1	; 0x01
    5f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f10:	fc 01       	movw	r30, r24
    5f12:	24 81       	ldd	r18, Z+4	; 0x04
    5f14:	35 81       	ldd	r19, Z+5	; 0x05
    5f16:	89 81       	ldd	r24, Y+1	; 0x01
    5f18:	9a 81       	ldd	r25, Y+2	; 0x02
    5f1a:	fc 01       	movw	r30, r24
    5f1c:	33 83       	std	Z+3, r19	; 0x03
    5f1e:	22 83       	std	Z+2, r18	; 0x02
}
    5f20:	00 00       	nop
    5f22:	0f 90       	pop	r0
    5f24:	0f 90       	pop	r0
    5f26:	df 91       	pop	r29
    5f28:	cf 91       	pop	r28
    5f2a:	08 95       	ret

00005f2c <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size)
{
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	00 d0       	rcall	.+0      	; 0x5f32 <_ZN6String7reserveEj+0x6>
    5f32:	1f 92       	push	r1
    5f34:	cd b7       	in	r28, 0x3d	; 61
    5f36:	de b7       	in	r29, 0x3e	; 62
    5f38:	9a 83       	std	Y+2, r25	; 0x02
    5f3a:	89 83       	std	Y+1, r24	; 0x01
    5f3c:	7c 83       	std	Y+4, r23	; 0x04
    5f3e:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer && capacity >= size) return 1;
    5f40:	89 81       	ldd	r24, Y+1	; 0x01
    5f42:	9a 81       	ldd	r25, Y+2	; 0x02
    5f44:	fc 01       	movw	r30, r24
    5f46:	80 81       	ld	r24, Z
    5f48:	91 81       	ldd	r25, Z+1	; 0x01
    5f4a:	89 2b       	or	r24, r25
    5f4c:	61 f0       	breq	.+24     	; 0x5f66 <_ZN6String7reserveEj+0x3a>
    5f4e:	89 81       	ldd	r24, Y+1	; 0x01
    5f50:	9a 81       	ldd	r25, Y+2	; 0x02
    5f52:	fc 01       	movw	r30, r24
    5f54:	22 81       	ldd	r18, Z+2	; 0x02
    5f56:	33 81       	ldd	r19, Z+3	; 0x03
    5f58:	8b 81       	ldd	r24, Y+3	; 0x03
    5f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5f5c:	28 17       	cp	r18, r24
    5f5e:	39 07       	cpc	r19, r25
    5f60:	10 f0       	brcs	.+4      	; 0x5f66 <_ZN6String7reserveEj+0x3a>
    5f62:	81 e0       	ldi	r24, 0x01	; 1
    5f64:	1f c0       	rjmp	.+62     	; 0x5fa4 <_ZN6String7reserveEj+0x78>
	if (changeBuffer(size)) {
    5f66:	2b 81       	ldd	r18, Y+3	; 0x03
    5f68:	3c 81       	ldd	r19, Y+4	; 0x04
    5f6a:	89 81       	ldd	r24, Y+1	; 0x01
    5f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f6e:	b9 01       	movw	r22, r18
    5f70:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <_ZN6String12changeBufferEj>
    5f74:	98 2f       	mov	r25, r24
    5f76:	81 e0       	ldi	r24, 0x01	; 1
    5f78:	99 23       	and	r25, r25
    5f7a:	09 f4       	brne	.+2      	; 0x5f7e <_ZN6String7reserveEj+0x52>
    5f7c:	80 e0       	ldi	r24, 0x00	; 0
    5f7e:	88 23       	and	r24, r24
    5f80:	81 f0       	breq	.+32     	; 0x5fa2 <_ZN6String7reserveEj+0x76>
		if (len == 0) buffer[0] = 0;
    5f82:	89 81       	ldd	r24, Y+1	; 0x01
    5f84:	9a 81       	ldd	r25, Y+2	; 0x02
    5f86:	fc 01       	movw	r30, r24
    5f88:	84 81       	ldd	r24, Z+4	; 0x04
    5f8a:	95 81       	ldd	r25, Z+5	; 0x05
    5f8c:	89 2b       	or	r24, r25
    5f8e:	39 f4       	brne	.+14     	; 0x5f9e <_ZN6String7reserveEj+0x72>
    5f90:	89 81       	ldd	r24, Y+1	; 0x01
    5f92:	9a 81       	ldd	r25, Y+2	; 0x02
    5f94:	fc 01       	movw	r30, r24
    5f96:	80 81       	ld	r24, Z
    5f98:	91 81       	ldd	r25, Z+1	; 0x01
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	10 82       	st	Z, r1
		return 1;
    5f9e:	81 e0       	ldi	r24, 0x01	; 1
    5fa0:	01 c0       	rjmp	.+2      	; 0x5fa4 <_ZN6String7reserveEj+0x78>
	}
	return 0;
    5fa2:	80 e0       	ldi	r24, 0x00	; 0
}
    5fa4:	0f 90       	pop	r0
    5fa6:	0f 90       	pop	r0
    5fa8:	0f 90       	pop	r0
    5faa:	0f 90       	pop	r0
    5fac:	df 91       	pop	r29
    5fae:	cf 91       	pop	r28
    5fb0:	08 95       	ret

00005fb2 <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    5fb2:	cf 93       	push	r28
    5fb4:	df 93       	push	r29
    5fb6:	00 d0       	rcall	.+0      	; 0x5fb8 <_ZN6String12changeBufferEj+0x6>
    5fb8:	00 d0       	rcall	.+0      	; 0x5fba <_ZN6String12changeBufferEj+0x8>
    5fba:	cd b7       	in	r28, 0x3d	; 61
    5fbc:	de b7       	in	r29, 0x3e	; 62
    5fbe:	9c 83       	std	Y+4, r25	; 0x04
    5fc0:	8b 83       	std	Y+3, r24	; 0x03
    5fc2:	7e 83       	std	Y+6, r23	; 0x06
    5fc4:	6d 83       	std	Y+5, r22	; 0x05
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    5fca:	9c 01       	movw	r18, r24
    5fcc:	2f 5f       	subi	r18, 0xFF	; 255
    5fce:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    5fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    5fd4:	fc 01       	movw	r30, r24
    5fd6:	80 81       	ld	r24, Z
    5fd8:	91 81       	ldd	r25, Z+1	; 0x01
    5fda:	b9 01       	movw	r22, r18
    5fdc:	0e 94 86 47 	call	0x8f0c	; 0x8f0c <realloc>
    5fe0:	9a 83       	std	Y+2, r25	; 0x02
    5fe2:	89 83       	std	Y+1, r24	; 0x01
	if (newbuffer) {
    5fe4:	89 81       	ldd	r24, Y+1	; 0x01
    5fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe8:	89 2b       	or	r24, r25
    5fea:	81 f0       	breq	.+32     	; 0x600c <_ZN6String12changeBufferEj+0x5a>
		buffer = newbuffer;
    5fec:	8b 81       	ldd	r24, Y+3	; 0x03
    5fee:	9c 81       	ldd	r25, Y+4	; 0x04
    5ff0:	29 81       	ldd	r18, Y+1	; 0x01
    5ff2:	3a 81       	ldd	r19, Y+2	; 0x02
    5ff4:	fc 01       	movw	r30, r24
    5ff6:	31 83       	std	Z+1, r19	; 0x01
    5ff8:	20 83       	st	Z, r18
		capacity = maxStrLen;
    5ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    5ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    6000:	3e 81       	ldd	r19, Y+6	; 0x06
    6002:	fc 01       	movw	r30, r24
    6004:	33 83       	std	Z+3, r19	; 0x03
    6006:	22 83       	std	Z+2, r18	; 0x02
		return 1;
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	01 c0       	rjmp	.+2      	; 0x600e <_ZN6String12changeBufferEj+0x5c>
	}
	return 0;
    600c:	80 e0       	ldi	r24, 0x00	; 0
}
    600e:	26 96       	adiw	r28, 0x06	; 6
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	f8 94       	cli
    6014:	de bf       	out	0x3e, r29	; 62
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	cd bf       	out	0x3d, r28	; 61
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	08 95       	ret

00006020 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	00 d0       	rcall	.+0      	; 0x6026 <_ZN6String4copyEPKcj+0x6>
    6026:	00 d0       	rcall	.+0      	; 0x6028 <_ZN6String4copyEPKcj+0x8>
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	9a 83       	std	Y+2, r25	; 0x02
    602e:	89 83       	std	Y+1, r24	; 0x01
    6030:	7c 83       	std	Y+4, r23	; 0x04
    6032:	6b 83       	std	Y+3, r22	; 0x03
    6034:	5e 83       	std	Y+6, r21	; 0x06
    6036:	4d 83       	std	Y+5, r20	; 0x05
	if (!reserve(length)) {
    6038:	2d 81       	ldd	r18, Y+5	; 0x05
    603a:	3e 81       	ldd	r19, Y+6	; 0x06
    603c:	89 81       	ldd	r24, Y+1	; 0x01
    603e:	9a 81       	ldd	r25, Y+2	; 0x02
    6040:	b9 01       	movw	r22, r18
    6042:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <_ZN6String7reserveEj>
    6046:	98 2f       	mov	r25, r24
    6048:	81 e0       	ldi	r24, 0x01	; 1
    604a:	99 23       	and	r25, r25
    604c:	09 f0       	breq	.+2      	; 0x6050 <_ZN6String4copyEPKcj+0x30>
    604e:	80 e0       	ldi	r24, 0x00	; 0
    6050:	88 23       	and	r24, r24
    6052:	39 f0       	breq	.+14     	; 0x6062 <_ZN6String4copyEPKcj+0x42>
		invalidate();
    6054:	89 81       	ldd	r24, Y+1	; 0x01
    6056:	9a 81       	ldd	r25, Y+2	; 0x02
    6058:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
		return *this;
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	9a 81       	ldd	r25, Y+2	; 0x02
    6060:	13 c0       	rjmp	.+38     	; 0x6088 <_ZN6String4copyEPKcj+0x68>
	}
	len = length;
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	9a 81       	ldd	r25, Y+2	; 0x02
    6066:	2d 81       	ldd	r18, Y+5	; 0x05
    6068:	3e 81       	ldd	r19, Y+6	; 0x06
    606a:	fc 01       	movw	r30, r24
    606c:	35 83       	std	Z+5, r19	; 0x05
    606e:	24 83       	std	Z+4, r18	; 0x04
	strcpy(buffer, cstr);
    6070:	89 81       	ldd	r24, Y+1	; 0x01
    6072:	9a 81       	ldd	r25, Y+2	; 0x02
    6074:	fc 01       	movw	r30, r24
    6076:	80 81       	ld	r24, Z
    6078:	91 81       	ldd	r25, Z+1	; 0x01
    607a:	2b 81       	ldd	r18, Y+3	; 0x03
    607c:	3c 81       	ldd	r19, Y+4	; 0x04
    607e:	b9 01       	movw	r22, r18
    6080:	0e 94 00 49 	call	0x9200	; 0x9200 <strcpy>
	return *this;
    6084:	89 81       	ldd	r24, Y+1	; 0x01
    6086:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6088:	26 96       	adiw	r28, 0x06	; 6
    608a:	0f b6       	in	r0, 0x3f	; 63
    608c:	f8 94       	cli
    608e:	de bf       	out	0x3e, r29	; 62
    6090:	0f be       	out	0x3f, r0	; 63
    6092:	cd bf       	out	0x3d, r28	; 61
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	08 95       	ret

0000609a <_ZN6String4copyEPK19__FlashStringHelperj>:

String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
{
    609a:	cf 93       	push	r28
    609c:	df 93       	push	r29
    609e:	00 d0       	rcall	.+0      	; 0x60a0 <_ZN6String4copyEPK19__FlashStringHelperj+0x6>
    60a0:	00 d0       	rcall	.+0      	; 0x60a2 <_ZN6String4copyEPK19__FlashStringHelperj+0x8>
    60a2:	cd b7       	in	r28, 0x3d	; 61
    60a4:	de b7       	in	r29, 0x3e	; 62
    60a6:	9a 83       	std	Y+2, r25	; 0x02
    60a8:	89 83       	std	Y+1, r24	; 0x01
    60aa:	7c 83       	std	Y+4, r23	; 0x04
    60ac:	6b 83       	std	Y+3, r22	; 0x03
    60ae:	5e 83       	std	Y+6, r21	; 0x06
    60b0:	4d 83       	std	Y+5, r20	; 0x05
	if (!reserve(length)) {
    60b2:	2d 81       	ldd	r18, Y+5	; 0x05
    60b4:	3e 81       	ldd	r19, Y+6	; 0x06
    60b6:	89 81       	ldd	r24, Y+1	; 0x01
    60b8:	9a 81       	ldd	r25, Y+2	; 0x02
    60ba:	b9 01       	movw	r22, r18
    60bc:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <_ZN6String7reserveEj>
    60c0:	98 2f       	mov	r25, r24
    60c2:	81 e0       	ldi	r24, 0x01	; 1
    60c4:	99 23       	and	r25, r25
    60c6:	09 f0       	breq	.+2      	; 0x60ca <_ZN6String4copyEPK19__FlashStringHelperj+0x30>
    60c8:	80 e0       	ldi	r24, 0x00	; 0
    60ca:	88 23       	and	r24, r24
    60cc:	39 f0       	breq	.+14     	; 0x60dc <_ZN6String4copyEPK19__FlashStringHelperj+0x42>
		invalidate();
    60ce:	89 81       	ldd	r24, Y+1	; 0x01
    60d0:	9a 81       	ldd	r25, Y+2	; 0x02
    60d2:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
		return *this;
    60d6:	89 81       	ldd	r24, Y+1	; 0x01
    60d8:	9a 81       	ldd	r25, Y+2	; 0x02
    60da:	13 c0       	rjmp	.+38     	; 0x6102 <_ZN6String4copyEPK19__FlashStringHelperj+0x68>
	}
	len = length;
    60dc:	89 81       	ldd	r24, Y+1	; 0x01
    60de:	9a 81       	ldd	r25, Y+2	; 0x02
    60e0:	2d 81       	ldd	r18, Y+5	; 0x05
    60e2:	3e 81       	ldd	r19, Y+6	; 0x06
    60e4:	fc 01       	movw	r30, r24
    60e6:	35 83       	std	Z+5, r19	; 0x05
    60e8:	24 83       	std	Z+4, r18	; 0x04
	strcpy_P(buffer, (PGM_P)pstr);
    60ea:	89 81       	ldd	r24, Y+1	; 0x01
    60ec:	9a 81       	ldd	r25, Y+2	; 0x02
    60ee:	fc 01       	movw	r30, r24
    60f0:	80 81       	ld	r24, Z
    60f2:	91 81       	ldd	r25, Z+1	; 0x01
    60f4:	2b 81       	ldd	r18, Y+3	; 0x03
    60f6:	3c 81       	ldd	r19, Y+4	; 0x04
    60f8:	b9 01       	movw	r22, r18
    60fa:	0e 94 b4 48 	call	0x9168	; 0x9168 <strcpy_P>
	return *this;
    60fe:	89 81       	ldd	r24, Y+1	; 0x01
    6100:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6102:	26 96       	adiw	r28, 0x06	; 6
    6104:	0f b6       	in	r0, 0x3f	; 63
    6106:	f8 94       	cli
    6108:	de bf       	out	0x3e, r29	; 62
    610a:	0f be       	out	0x3f, r0	; 63
    610c:	cd bf       	out	0x3d, r28	; 61
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	08 95       	ret

00006114 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	00 d0       	rcall	.+0      	; 0x611a <_ZN6StringaSERKS_+0x6>
    611a:	1f 92       	push	r1
    611c:	cd b7       	in	r28, 0x3d	; 61
    611e:	de b7       	in	r29, 0x3e	; 62
    6120:	9a 83       	std	Y+2, r25	; 0x02
    6122:	89 83       	std	Y+1, r24	; 0x01
    6124:	7c 83       	std	Y+4, r23	; 0x04
    6126:	6b 83       	std	Y+3, r22	; 0x03
	if (this == &rhs) return *this;
    6128:	29 81       	ldd	r18, Y+1	; 0x01
    612a:	3a 81       	ldd	r19, Y+2	; 0x02
    612c:	8b 81       	ldd	r24, Y+3	; 0x03
    612e:	9c 81       	ldd	r25, Y+4	; 0x04
    6130:	28 17       	cp	r18, r24
    6132:	39 07       	cpc	r19, r25
    6134:	19 f4       	brne	.+6      	; 0x613c <_ZN6StringaSERKS_+0x28>
    6136:	89 81       	ldd	r24, Y+1	; 0x01
    6138:	9a 81       	ldd	r25, Y+2	; 0x02
    613a:	1d c0       	rjmp	.+58     	; 0x6176 <_ZN6StringaSERKS_+0x62>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    613c:	8b 81       	ldd	r24, Y+3	; 0x03
    613e:	9c 81       	ldd	r25, Y+4	; 0x04
    6140:	fc 01       	movw	r30, r24
    6142:	80 81       	ld	r24, Z
    6144:	91 81       	ldd	r25, Z+1	; 0x01
    6146:	89 2b       	or	r24, r25
    6148:	81 f0       	breq	.+32     	; 0x616a <_ZN6StringaSERKS_+0x56>
    614a:	8b 81       	ldd	r24, Y+3	; 0x03
    614c:	9c 81       	ldd	r25, Y+4	; 0x04
    614e:	fc 01       	movw	r30, r24
    6150:	44 81       	ldd	r20, Z+4	; 0x04
    6152:	55 81       	ldd	r21, Z+5	; 0x05
    6154:	8b 81       	ldd	r24, Y+3	; 0x03
    6156:	9c 81       	ldd	r25, Y+4	; 0x04
    6158:	fc 01       	movw	r30, r24
    615a:	20 81       	ld	r18, Z
    615c:	31 81       	ldd	r19, Z+1	; 0x01
    615e:	89 81       	ldd	r24, Y+1	; 0x01
    6160:	9a 81       	ldd	r25, Y+2	; 0x02
    6162:	b9 01       	movw	r22, r18
    6164:	0e 94 10 30 	call	0x6020	; 0x6020 <_ZN6String4copyEPKcj>
    6168:	04 c0       	rjmp	.+8      	; 0x6172 <_ZN6StringaSERKS_+0x5e>
	else invalidate();
    616a:	89 81       	ldd	r24, Y+1	; 0x01
    616c:	9a 81       	ldd	r25, Y+2	; 0x02
    616e:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	
	return *this;
    6172:	89 81       	ldd	r24, Y+1	; 0x01
    6174:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6176:	0f 90       	pop	r0
    6178:	0f 90       	pop	r0
    617a:	0f 90       	pop	r0
    617c:	0f 90       	pop	r0
    617e:	df 91       	pop	r29
    6180:	cf 91       	pop	r28
    6182:	08 95       	ret

00006184 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    6184:	cf 93       	push	r28
    6186:	df 93       	push	r29
    6188:	00 d0       	rcall	.+0      	; 0x618a <_ZN6StringaSEPKc+0x6>
    618a:	1f 92       	push	r1
    618c:	cd b7       	in	r28, 0x3d	; 61
    618e:	de b7       	in	r29, 0x3e	; 62
    6190:	9a 83       	std	Y+2, r25	; 0x02
    6192:	89 83       	std	Y+1, r24	; 0x01
    6194:	7c 83       	std	Y+4, r23	; 0x04
    6196:	6b 83       	std	Y+3, r22	; 0x03
	if (cstr) copy(cstr, strlen(cstr));
    6198:	8b 81       	ldd	r24, Y+3	; 0x03
    619a:	9c 81       	ldd	r25, Y+4	; 0x04
    619c:	89 2b       	or	r24, r25
    619e:	69 f0       	breq	.+26     	; 0x61ba <_ZN6StringaSEPKc+0x36>
    61a0:	8b 81       	ldd	r24, Y+3	; 0x03
    61a2:	9c 81       	ldd	r25, Y+4	; 0x04
    61a4:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    61a8:	ac 01       	movw	r20, r24
    61aa:	2b 81       	ldd	r18, Y+3	; 0x03
    61ac:	3c 81       	ldd	r19, Y+4	; 0x04
    61ae:	89 81       	ldd	r24, Y+1	; 0x01
    61b0:	9a 81       	ldd	r25, Y+2	; 0x02
    61b2:	b9 01       	movw	r22, r18
    61b4:	0e 94 10 30 	call	0x6020	; 0x6020 <_ZN6String4copyEPKcj>
    61b8:	04 c0       	rjmp	.+8      	; 0x61c2 <_ZN6StringaSEPKc+0x3e>
	else invalidate();
    61ba:	89 81       	ldd	r24, Y+1	; 0x01
    61bc:	9a 81       	ldd	r25, Y+2	; 0x02
    61be:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	
	return *this;
    61c2:	89 81       	ldd	r24, Y+1	; 0x01
    61c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    61c6:	0f 90       	pop	r0
    61c8:	0f 90       	pop	r0
    61ca:	0f 90       	pop	r0
    61cc:	0f 90       	pop	r0
    61ce:	df 91       	pop	r29
    61d0:	cf 91       	pop	r28
    61d2:	08 95       	ret

000061d4 <_ZN6StringaSEPK19__FlashStringHelper>:

String & String::operator = (const __FlashStringHelper *pstr)
{
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
    61d8:	00 d0       	rcall	.+0      	; 0x61da <_ZN6StringaSEPK19__FlashStringHelper+0x6>
    61da:	00 d0       	rcall	.+0      	; 0x61dc <_ZN6StringaSEPK19__FlashStringHelper+0x8>
    61dc:	cd b7       	in	r28, 0x3d	; 61
    61de:	de b7       	in	r29, 0x3e	; 62
    61e0:	9c 83       	std	Y+4, r25	; 0x04
    61e2:	8b 83       	std	Y+3, r24	; 0x03
    61e4:	7e 83       	std	Y+6, r23	; 0x06
    61e6:	6d 83       	std	Y+5, r22	; 0x05
	if (pstr) copy(pstr, strlen_P((PGM_P)pstr));
    61e8:	8d 81       	ldd	r24, Y+5	; 0x05
    61ea:	9e 81       	ldd	r25, Y+6	; 0x06
    61ec:	89 2b       	or	r24, r25
    61ee:	89 f0       	breq	.+34     	; 0x6212 <_ZN6StringaSEPK19__FlashStringHelper+0x3e>
    61f0:	8d 81       	ldd	r24, Y+5	; 0x05
    61f2:	9e 81       	ldd	r25, Y+6	; 0x06
    61f4:	9a 83       	std	Y+2, r25	; 0x02
    61f6:	89 83       	std	Y+1, r24	; 0x01
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    61f8:	89 81       	ldd	r24, Y+1	; 0x01
    61fa:	9a 81       	ldd	r25, Y+2	; 0x02
    61fc:	0e 94 bb 48 	call	0x9176	; 0x9176 <__strlen_P>
    6200:	ac 01       	movw	r20, r24
    6202:	2d 81       	ldd	r18, Y+5	; 0x05
    6204:	3e 81       	ldd	r19, Y+6	; 0x06
    6206:	8b 81       	ldd	r24, Y+3	; 0x03
    6208:	9c 81       	ldd	r25, Y+4	; 0x04
    620a:	b9 01       	movw	r22, r18
    620c:	0e 94 4d 30 	call	0x609a	; 0x609a <_ZN6String4copyEPK19__FlashStringHelperj>
    6210:	04 c0       	rjmp	.+8      	; 0x621a <_ZN6StringaSEPK19__FlashStringHelper+0x46>
	else invalidate();
    6212:	8b 81       	ldd	r24, Y+3	; 0x03
    6214:	9c 81       	ldd	r25, Y+4	; 0x04
    6216:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>

	return *this;
    621a:	8b 81       	ldd	r24, Y+3	; 0x03
    621c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    621e:	26 96       	adiw	r28, 0x06	; 6
    6220:	0f b6       	in	r0, 0x3f	; 63
    6222:	f8 94       	cli
    6224:	de bf       	out	0x3e, r29	; 62
    6226:	0f be       	out	0x3f, r0	; 63
    6228:	cd bf       	out	0x3d, r28	; 61
    622a:	df 91       	pop	r29
    622c:	cf 91       	pop	r28
    622e:	08 95       	ret

00006230 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    6230:	cf 93       	push	r28
    6232:	df 93       	push	r29
    6234:	00 d0       	rcall	.+0      	; 0x6236 <_ZN6String6concatERKS_+0x6>
    6236:	1f 92       	push	r1
    6238:	cd b7       	in	r28, 0x3d	; 61
    623a:	de b7       	in	r29, 0x3e	; 62
    623c:	9a 83       	std	Y+2, r25	; 0x02
    623e:	89 83       	std	Y+1, r24	; 0x01
    6240:	7c 83       	std	Y+4, r23	; 0x04
    6242:	6b 83       	std	Y+3, r22	; 0x03
	return concat(s.buffer, s.len);
    6244:	8b 81       	ldd	r24, Y+3	; 0x03
    6246:	9c 81       	ldd	r25, Y+4	; 0x04
    6248:	fc 01       	movw	r30, r24
    624a:	44 81       	ldd	r20, Z+4	; 0x04
    624c:	55 81       	ldd	r21, Z+5	; 0x05
    624e:	8b 81       	ldd	r24, Y+3	; 0x03
    6250:	9c 81       	ldd	r25, Y+4	; 0x04
    6252:	fc 01       	movw	r30, r24
    6254:	20 81       	ld	r18, Z
    6256:	31 81       	ldd	r19, Z+1	; 0x01
    6258:	89 81       	ldd	r24, Y+1	; 0x01
    625a:	9a 81       	ldd	r25, Y+2	; 0x02
    625c:	b9 01       	movw	r22, r18
    625e:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    6262:	0f 90       	pop	r0
    6264:	0f 90       	pop	r0
    6266:	0f 90       	pop	r0
    6268:	0f 90       	pop	r0
    626a:	df 91       	pop	r29
    626c:	cf 91       	pop	r28
    626e:	08 95       	ret

00006270 <_ZN6String6concatEPKcj>:

unsigned char String::concat(const char *cstr, unsigned int length)
{
    6270:	cf 93       	push	r28
    6272:	df 93       	push	r29
    6274:	cd b7       	in	r28, 0x3d	; 61
    6276:	de b7       	in	r29, 0x3e	; 62
    6278:	28 97       	sbiw	r28, 0x08	; 8
    627a:	0f b6       	in	r0, 0x3f	; 63
    627c:	f8 94       	cli
    627e:	de bf       	out	0x3e, r29	; 62
    6280:	0f be       	out	0x3f, r0	; 63
    6282:	cd bf       	out	0x3d, r28	; 61
    6284:	9c 83       	std	Y+4, r25	; 0x04
    6286:	8b 83       	std	Y+3, r24	; 0x03
    6288:	7e 83       	std	Y+6, r23	; 0x06
    628a:	6d 83       	std	Y+5, r22	; 0x05
    628c:	58 87       	std	Y+8, r21	; 0x08
    628e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int newlen = len + length;
    6290:	8b 81       	ldd	r24, Y+3	; 0x03
    6292:	9c 81       	ldd	r25, Y+4	; 0x04
    6294:	fc 01       	movw	r30, r24
    6296:	24 81       	ldd	r18, Z+4	; 0x04
    6298:	35 81       	ldd	r19, Z+5	; 0x05
    629a:	8f 81       	ldd	r24, Y+7	; 0x07
    629c:	98 85       	ldd	r25, Y+8	; 0x08
    629e:	82 0f       	add	r24, r18
    62a0:	93 1f       	adc	r25, r19
    62a2:	9a 83       	std	Y+2, r25	; 0x02
    62a4:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr) return 0;
    62a6:	8d 81       	ldd	r24, Y+5	; 0x05
    62a8:	9e 81       	ldd	r25, Y+6	; 0x06
    62aa:	89 2b       	or	r24, r25
    62ac:	11 f4       	brne	.+4      	; 0x62b2 <_ZN6String6concatEPKcj+0x42>
    62ae:	80 e0       	ldi	r24, 0x00	; 0
    62b0:	2f c0       	rjmp	.+94     	; 0x6310 <_ZN6String6concatEPKcj+0xa0>
	if (length == 0) return 1;
    62b2:	8f 81       	ldd	r24, Y+7	; 0x07
    62b4:	98 85       	ldd	r25, Y+8	; 0x08
    62b6:	89 2b       	or	r24, r25
    62b8:	11 f4       	brne	.+4      	; 0x62be <_ZN6String6concatEPKcj+0x4e>
    62ba:	81 e0       	ldi	r24, 0x01	; 1
    62bc:	29 c0       	rjmp	.+82     	; 0x6310 <_ZN6String6concatEPKcj+0xa0>
	if (!reserve(newlen)) return 0;
    62be:	29 81       	ldd	r18, Y+1	; 0x01
    62c0:	3a 81       	ldd	r19, Y+2	; 0x02
    62c2:	8b 81       	ldd	r24, Y+3	; 0x03
    62c4:	9c 81       	ldd	r25, Y+4	; 0x04
    62c6:	b9 01       	movw	r22, r18
    62c8:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <_ZN6String7reserveEj>
    62cc:	98 2f       	mov	r25, r24
    62ce:	81 e0       	ldi	r24, 0x01	; 1
    62d0:	99 23       	and	r25, r25
    62d2:	09 f0       	breq	.+2      	; 0x62d6 <_ZN6String6concatEPKcj+0x66>
    62d4:	80 e0       	ldi	r24, 0x00	; 0
    62d6:	88 23       	and	r24, r24
    62d8:	11 f0       	breq	.+4      	; 0x62de <_ZN6String6concatEPKcj+0x6e>
    62da:	80 e0       	ldi	r24, 0x00	; 0
    62dc:	19 c0       	rjmp	.+50     	; 0x6310 <_ZN6String6concatEPKcj+0xa0>
	strcpy(buffer + len, cstr);
    62de:	8b 81       	ldd	r24, Y+3	; 0x03
    62e0:	9c 81       	ldd	r25, Y+4	; 0x04
    62e2:	fc 01       	movw	r30, r24
    62e4:	20 81       	ld	r18, Z
    62e6:	31 81       	ldd	r19, Z+1	; 0x01
    62e8:	8b 81       	ldd	r24, Y+3	; 0x03
    62ea:	9c 81       	ldd	r25, Y+4	; 0x04
    62ec:	fc 01       	movw	r30, r24
    62ee:	84 81       	ldd	r24, Z+4	; 0x04
    62f0:	95 81       	ldd	r25, Z+5	; 0x05
    62f2:	82 0f       	add	r24, r18
    62f4:	93 1f       	adc	r25, r19
    62f6:	2d 81       	ldd	r18, Y+5	; 0x05
    62f8:	3e 81       	ldd	r19, Y+6	; 0x06
    62fa:	b9 01       	movw	r22, r18
    62fc:	0e 94 00 49 	call	0x9200	; 0x9200 <strcpy>
	len = newlen;
    6300:	8b 81       	ldd	r24, Y+3	; 0x03
    6302:	9c 81       	ldd	r25, Y+4	; 0x04
    6304:	29 81       	ldd	r18, Y+1	; 0x01
    6306:	3a 81       	ldd	r19, Y+2	; 0x02
    6308:	fc 01       	movw	r30, r24
    630a:	35 83       	std	Z+5, r19	; 0x05
    630c:	24 83       	std	Z+4, r18	; 0x04
	return 1;
    630e:	81 e0       	ldi	r24, 0x01	; 1
}
    6310:	28 96       	adiw	r28, 0x08	; 8
    6312:	0f b6       	in	r0, 0x3f	; 63
    6314:	f8 94       	cli
    6316:	de bf       	out	0x3e, r29	; 62
    6318:	0f be       	out	0x3f, r0	; 63
    631a:	cd bf       	out	0x3d, r28	; 61
    631c:	df 91       	pop	r29
    631e:	cf 91       	pop	r28
    6320:	08 95       	ret

00006322 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
    6322:	cf 93       	push	r28
    6324:	df 93       	push	r29
    6326:	00 d0       	rcall	.+0      	; 0x6328 <_ZN6String6concatEPKc+0x6>
    6328:	1f 92       	push	r1
    632a:	cd b7       	in	r28, 0x3d	; 61
    632c:	de b7       	in	r29, 0x3e	; 62
    632e:	9a 83       	std	Y+2, r25	; 0x02
    6330:	89 83       	std	Y+1, r24	; 0x01
    6332:	7c 83       	std	Y+4, r23	; 0x04
    6334:	6b 83       	std	Y+3, r22	; 0x03
	if (!cstr) return 0;
    6336:	8b 81       	ldd	r24, Y+3	; 0x03
    6338:	9c 81       	ldd	r25, Y+4	; 0x04
    633a:	89 2b       	or	r24, r25
    633c:	11 f4       	brne	.+4      	; 0x6342 <_ZN6String6concatEPKc+0x20>
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	0c c0       	rjmp	.+24     	; 0x635a <_ZN6String6concatEPKc+0x38>
	return concat(cstr, strlen(cstr));
    6342:	8b 81       	ldd	r24, Y+3	; 0x03
    6344:	9c 81       	ldd	r25, Y+4	; 0x04
    6346:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    634a:	ac 01       	movw	r20, r24
    634c:	2b 81       	ldd	r18, Y+3	; 0x03
    634e:	3c 81       	ldd	r19, Y+4	; 0x04
    6350:	89 81       	ldd	r24, Y+1	; 0x01
    6352:	9a 81       	ldd	r25, Y+2	; 0x02
    6354:	b9 01       	movw	r22, r18
    6356:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    635a:	0f 90       	pop	r0
    635c:	0f 90       	pop	r0
    635e:	0f 90       	pop	r0
    6360:	0f 90       	pop	r0
    6362:	df 91       	pop	r29
    6364:	cf 91       	pop	r28
    6366:	08 95       	ret

00006368 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    6368:	cf 93       	push	r28
    636a:	df 93       	push	r29
    636c:	00 d0       	rcall	.+0      	; 0x636e <_ZN6String6concatEc+0x6>
    636e:	1f 92       	push	r1
    6370:	1f 92       	push	r1
    6372:	cd b7       	in	r28, 0x3d	; 61
    6374:	de b7       	in	r29, 0x3e	; 62
    6376:	9c 83       	std	Y+4, r25	; 0x04
    6378:	8b 83       	std	Y+3, r24	; 0x03
    637a:	6d 83       	std	Y+5, r22	; 0x05
	char buf[2];
	buf[0] = c;
    637c:	8d 81       	ldd	r24, Y+5	; 0x05
    637e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    6380:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    6382:	8b 81       	ldd	r24, Y+3	; 0x03
    6384:	9c 81       	ldd	r25, Y+4	; 0x04
    6386:	41 e0       	ldi	r20, 0x01	; 1
    6388:	50 e0       	ldi	r21, 0x00	; 0
    638a:	9e 01       	movw	r18, r28
    638c:	2f 5f       	subi	r18, 0xFF	; 255
    638e:	3f 4f       	sbci	r19, 0xFF	; 255
    6390:	b9 01       	movw	r22, r18
    6392:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    6396:	0f 90       	pop	r0
    6398:	0f 90       	pop	r0
    639a:	0f 90       	pop	r0
    639c:	0f 90       	pop	r0
    639e:	0f 90       	pop	r0
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	08 95       	ret

000063a6 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
    63aa:	cd b7       	in	r28, 0x3d	; 61
    63ac:	de b7       	in	r29, 0x3e	; 62
    63ae:	27 97       	sbiw	r28, 0x07	; 7
    63b0:	0f b6       	in	r0, 0x3f	; 63
    63b2:	f8 94       	cli
    63b4:	de bf       	out	0x3e, r29	; 62
    63b6:	0f be       	out	0x3f, r0	; 63
    63b8:	cd bf       	out	0x3d, r28	; 61
    63ba:	9e 83       	std	Y+6, r25	; 0x06
    63bc:	8d 83       	std	Y+5, r24	; 0x05
    63be:	6f 83       	std	Y+7, r22	; 0x07
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
    63c0:	8f 81       	ldd	r24, Y+7	; 0x07
    63c2:	88 2f       	mov	r24, r24
    63c4:	90 e0       	ldi	r25, 0x00	; 0
    63c6:	4a e0       	ldi	r20, 0x0A	; 10
    63c8:	50 e0       	ldi	r21, 0x00	; 0
    63ca:	9e 01       	movw	r18, r28
    63cc:	2f 5f       	subi	r18, 0xFF	; 255
    63ce:	3f 4f       	sbci	r19, 0xFF	; 255
    63d0:	b9 01       	movw	r22, r18
    63d2:	0e 94 52 49 	call	0x92a4	; 0x92a4 <itoa>
	return concat(buf, strlen(buf));
    63d6:	ce 01       	movw	r24, r28
    63d8:	01 96       	adiw	r24, 0x01	; 1
    63da:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    63de:	9c 01       	movw	r18, r24
    63e0:	8d 81       	ldd	r24, Y+5	; 0x05
    63e2:	9e 81       	ldd	r25, Y+6	; 0x06
    63e4:	a9 01       	movw	r20, r18
    63e6:	9e 01       	movw	r18, r28
    63e8:	2f 5f       	subi	r18, 0xFF	; 255
    63ea:	3f 4f       	sbci	r19, 0xFF	; 255
    63ec:	b9 01       	movw	r22, r18
    63ee:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    63f2:	27 96       	adiw	r28, 0x07	; 7
    63f4:	0f b6       	in	r0, 0x3f	; 63
    63f6:	f8 94       	cli
    63f8:	de bf       	out	0x3e, r29	; 62
    63fa:	0f be       	out	0x3f, r0	; 63
    63fc:	cd bf       	out	0x3d, r28	; 61
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	08 95       	ret

00006404 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    6404:	cf 93       	push	r28
    6406:	df 93       	push	r29
    6408:	cd b7       	in	r28, 0x3d	; 61
    640a:	de b7       	in	r29, 0x3e	; 62
    640c:	2c 97       	sbiw	r28, 0x0c	; 12
    640e:	0f b6       	in	r0, 0x3f	; 63
    6410:	f8 94       	cli
    6412:	de bf       	out	0x3e, r29	; 62
    6414:	0f be       	out	0x3f, r0	; 63
    6416:	cd bf       	out	0x3d, r28	; 61
    6418:	9a 87       	std	Y+10, r25	; 0x0a
    641a:	89 87       	std	Y+9, r24	; 0x09
    641c:	7c 87       	std	Y+12, r23	; 0x0c
    641e:	6b 87       	std	Y+11, r22	; 0x0b
	char buf[2 + 3 * sizeof(int)];
	itoa(num, buf, 10);
    6420:	8b 85       	ldd	r24, Y+11	; 0x0b
    6422:	9c 85       	ldd	r25, Y+12	; 0x0c
    6424:	4a e0       	ldi	r20, 0x0A	; 10
    6426:	50 e0       	ldi	r21, 0x00	; 0
    6428:	9e 01       	movw	r18, r28
    642a:	2f 5f       	subi	r18, 0xFF	; 255
    642c:	3f 4f       	sbci	r19, 0xFF	; 255
    642e:	b9 01       	movw	r22, r18
    6430:	0e 94 52 49 	call	0x92a4	; 0x92a4 <itoa>
	return concat(buf, strlen(buf));
    6434:	ce 01       	movw	r24, r28
    6436:	01 96       	adiw	r24, 0x01	; 1
    6438:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    643c:	9c 01       	movw	r18, r24
    643e:	89 85       	ldd	r24, Y+9	; 0x09
    6440:	9a 85       	ldd	r25, Y+10	; 0x0a
    6442:	a9 01       	movw	r20, r18
    6444:	9e 01       	movw	r18, r28
    6446:	2f 5f       	subi	r18, 0xFF	; 255
    6448:	3f 4f       	sbci	r19, 0xFF	; 255
    644a:	b9 01       	movw	r22, r18
    644c:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    6450:	2c 96       	adiw	r28, 0x0c	; 12
    6452:	0f b6       	in	r0, 0x3f	; 63
    6454:	f8 94       	cli
    6456:	de bf       	out	0x3e, r29	; 62
    6458:	0f be       	out	0x3f, r0	; 63
    645a:	cd bf       	out	0x3d, r28	; 61
    645c:	df 91       	pop	r29
    645e:	cf 91       	pop	r28
    6460:	08 95       	ret

00006462 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    6462:	cf 93       	push	r28
    6464:	df 93       	push	r29
    6466:	cd b7       	in	r28, 0x3d	; 61
    6468:	de b7       	in	r29, 0x3e	; 62
    646a:	2b 97       	sbiw	r28, 0x0b	; 11
    646c:	0f b6       	in	r0, 0x3f	; 63
    646e:	f8 94       	cli
    6470:	de bf       	out	0x3e, r29	; 62
    6472:	0f be       	out	0x3f, r0	; 63
    6474:	cd bf       	out	0x3d, r28	; 61
    6476:	99 87       	std	Y+9, r25	; 0x09
    6478:	88 87       	std	Y+8, r24	; 0x08
    647a:	7b 87       	std	Y+11, r23	; 0x0b
    647c:	6a 87       	std	Y+10, r22	; 0x0a
	char buf[1 + 3 * sizeof(unsigned int)];
	utoa(num, buf, 10);
    647e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6480:	9b 85       	ldd	r25, Y+11	; 0x0b
    6482:	4a e0       	ldi	r20, 0x0A	; 10
    6484:	50 e0       	ldi	r21, 0x00	; 0
    6486:	9e 01       	movw	r18, r28
    6488:	2f 5f       	subi	r18, 0xFF	; 255
    648a:	3f 4f       	sbci	r19, 0xFF	; 255
    648c:	b9 01       	movw	r22, r18
    648e:	0e 94 c4 49 	call	0x9388	; 0x9388 <utoa>
	return concat(buf, strlen(buf));
    6492:	ce 01       	movw	r24, r28
    6494:	01 96       	adiw	r24, 0x01	; 1
    6496:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    649a:	9c 01       	movw	r18, r24
    649c:	88 85       	ldd	r24, Y+8	; 0x08
    649e:	99 85       	ldd	r25, Y+9	; 0x09
    64a0:	a9 01       	movw	r20, r18
    64a2:	9e 01       	movw	r18, r28
    64a4:	2f 5f       	subi	r18, 0xFF	; 255
    64a6:	3f 4f       	sbci	r19, 0xFF	; 255
    64a8:	b9 01       	movw	r22, r18
    64aa:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    64ae:	2b 96       	adiw	r28, 0x0b	; 11
    64b0:	0f b6       	in	r0, 0x3f	; 63
    64b2:	f8 94       	cli
    64b4:	de bf       	out	0x3e, r29	; 62
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	cd bf       	out	0x3d, r28	; 61
    64ba:	df 91       	pop	r29
    64bc:	cf 91       	pop	r28
    64be:	08 95       	ret

000064c0 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    64c0:	cf 93       	push	r28
    64c2:	df 93       	push	r29
    64c4:	cd b7       	in	r28, 0x3d	; 61
    64c6:	de b7       	in	r29, 0x3e	; 62
    64c8:	64 97       	sbiw	r28, 0x14	; 20
    64ca:	0f b6       	in	r0, 0x3f	; 63
    64cc:	f8 94       	cli
    64ce:	de bf       	out	0x3e, r29	; 62
    64d0:	0f be       	out	0x3f, r0	; 63
    64d2:	cd bf       	out	0x3d, r28	; 61
    64d4:	98 8b       	std	Y+16, r25	; 0x10
    64d6:	8f 87       	std	Y+15, r24	; 0x0f
    64d8:	49 8b       	std	Y+17, r20	; 0x11
    64da:	5a 8b       	std	Y+18, r21	; 0x12
    64dc:	6b 8b       	std	Y+19, r22	; 0x13
    64de:	7c 8b       	std	Y+20, r23	; 0x14
	char buf[2 + 3 * sizeof(long)];
	ltoa(num, buf, 10);
    64e0:	89 89       	ldd	r24, Y+17	; 0x11
    64e2:	9a 89       	ldd	r25, Y+18	; 0x12
    64e4:	ab 89       	ldd	r26, Y+19	; 0x13
    64e6:	bc 89       	ldd	r27, Y+20	; 0x14
    64e8:	2a e0       	ldi	r18, 0x0A	; 10
    64ea:	30 e0       	ldi	r19, 0x00	; 0
    64ec:	ae 01       	movw	r20, r28
    64ee:	4f 5f       	subi	r20, 0xFF	; 255
    64f0:	5f 4f       	sbci	r21, 0xFF	; 255
    64f2:	bc 01       	movw	r22, r24
    64f4:	cd 01       	movw	r24, r26
    64f6:	0e 94 68 49 	call	0x92d0	; 0x92d0 <ltoa>
	return concat(buf, strlen(buf));
    64fa:	ce 01       	movw	r24, r28
    64fc:	01 96       	adiw	r24, 0x01	; 1
    64fe:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    6502:	9c 01       	movw	r18, r24
    6504:	8f 85       	ldd	r24, Y+15	; 0x0f
    6506:	98 89       	ldd	r25, Y+16	; 0x10
    6508:	a9 01       	movw	r20, r18
    650a:	9e 01       	movw	r18, r28
    650c:	2f 5f       	subi	r18, 0xFF	; 255
    650e:	3f 4f       	sbci	r19, 0xFF	; 255
    6510:	b9 01       	movw	r22, r18
    6512:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    6516:	64 96       	adiw	r28, 0x14	; 20
    6518:	0f b6       	in	r0, 0x3f	; 63
    651a:	f8 94       	cli
    651c:	de bf       	out	0x3e, r29	; 62
    651e:	0f be       	out	0x3f, r0	; 63
    6520:	cd bf       	out	0x3d, r28	; 61
    6522:	df 91       	pop	r29
    6524:	cf 91       	pop	r28
    6526:	08 95       	ret

00006528 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    6528:	cf 93       	push	r28
    652a:	df 93       	push	r29
    652c:	cd b7       	in	r28, 0x3d	; 61
    652e:	de b7       	in	r29, 0x3e	; 62
    6530:	63 97       	sbiw	r28, 0x13	; 19
    6532:	0f b6       	in	r0, 0x3f	; 63
    6534:	f8 94       	cli
    6536:	de bf       	out	0x3e, r29	; 62
    6538:	0f be       	out	0x3f, r0	; 63
    653a:	cd bf       	out	0x3d, r28	; 61
    653c:	9f 87       	std	Y+15, r25	; 0x0f
    653e:	8e 87       	std	Y+14, r24	; 0x0e
    6540:	48 8b       	std	Y+16, r20	; 0x10
    6542:	59 8b       	std	Y+17, r21	; 0x11
    6544:	6a 8b       	std	Y+18, r22	; 0x12
    6546:	7b 8b       	std	Y+19, r23	; 0x13
	char buf[1 + 3 * sizeof(unsigned long)];
	ultoa(num, buf, 10);
    6548:	88 89       	ldd	r24, Y+16	; 0x10
    654a:	99 89       	ldd	r25, Y+17	; 0x11
    654c:	aa 89       	ldd	r26, Y+18	; 0x12
    654e:	bb 89       	ldd	r27, Y+19	; 0x13
    6550:	2a e0       	ldi	r18, 0x0A	; 10
    6552:	30 e0       	ldi	r19, 0x00	; 0
    6554:	ae 01       	movw	r20, r28
    6556:	4f 5f       	subi	r20, 0xFF	; 255
    6558:	5f 4f       	sbci	r21, 0xFF	; 255
    655a:	bc 01       	movw	r22, r24
    655c:	cd 01       	movw	r24, r26
    655e:	0e 94 97 49 	call	0x932e	; 0x932e <ultoa>
	return concat(buf, strlen(buf));
    6562:	ce 01       	movw	r24, r28
    6564:	01 96       	adiw	r24, 0x01	; 1
    6566:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    656a:	9c 01       	movw	r18, r24
    656c:	8e 85       	ldd	r24, Y+14	; 0x0e
    656e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6570:	a9 01       	movw	r20, r18
    6572:	9e 01       	movw	r18, r28
    6574:	2f 5f       	subi	r18, 0xFF	; 255
    6576:	3f 4f       	sbci	r19, 0xFF	; 255
    6578:	b9 01       	movw	r22, r18
    657a:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    657e:	63 96       	adiw	r28, 0x13	; 19
    6580:	0f b6       	in	r0, 0x3f	; 63
    6582:	f8 94       	cli
    6584:	de bf       	out	0x3e, r29	; 62
    6586:	0f be       	out	0x3f, r0	; 63
    6588:	cd bf       	out	0x3d, r28	; 61
    658a:	df 91       	pop	r29
    658c:	cf 91       	pop	r28
    658e:	08 95       	ret

00006590 <_ZN6String6concatEf>:

unsigned char String::concat(float num)
{
    6590:	0f 93       	push	r16
    6592:	1f 93       	push	r17
    6594:	cf 93       	push	r28
    6596:	df 93       	push	r29
    6598:	cd b7       	in	r28, 0x3d	; 61
    659a:	de b7       	in	r29, 0x3e	; 62
    659c:	6c 97       	sbiw	r28, 0x1c	; 28
    659e:	0f b6       	in	r0, 0x3f	; 63
    65a0:	f8 94       	cli
    65a2:	de bf       	out	0x3e, r29	; 62
    65a4:	0f be       	out	0x3f, r0	; 63
    65a6:	cd bf       	out	0x3d, r28	; 61
    65a8:	98 8f       	std	Y+24, r25	; 0x18
    65aa:	8f 8b       	std	Y+23, r24	; 0x17
    65ac:	49 8f       	std	Y+25, r20	; 0x19
    65ae:	5a 8f       	std	Y+26, r21	; 0x1a
    65b0:	6b 8f       	std	Y+27, r22	; 0x1b
    65b2:	7c 8f       	std	Y+28, r23	; 0x1c
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    65b4:	9e 01       	movw	r18, r28
    65b6:	2d 5f       	subi	r18, 0xFD	; 253
    65b8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ba:	89 8d       	ldd	r24, Y+25	; 0x19
    65bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    65be:	ab 8d       	ldd	r26, Y+27	; 0x1b
    65c0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    65c2:	89 01       	movw	r16, r18
    65c4:	22 e0       	ldi	r18, 0x02	; 2
    65c6:	44 e0       	ldi	r20, 0x04	; 4
    65c8:	bc 01       	movw	r22, r24
    65ca:	cd 01       	movw	r24, r26
    65cc:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <dtostrf>
    65d0:	9a 83       	std	Y+2, r25	; 0x02
    65d2:	89 83       	std	Y+1, r24	; 0x01
	return concat(string, strlen(string));
    65d4:	89 81       	ldd	r24, Y+1	; 0x01
    65d6:	9a 81       	ldd	r25, Y+2	; 0x02
    65d8:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    65dc:	ac 01       	movw	r20, r24
    65de:	29 81       	ldd	r18, Y+1	; 0x01
    65e0:	3a 81       	ldd	r19, Y+2	; 0x02
    65e2:	8f 89       	ldd	r24, Y+23	; 0x17
    65e4:	98 8d       	ldd	r25, Y+24	; 0x18
    65e6:	b9 01       	movw	r22, r18
    65e8:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    65ec:	6c 96       	adiw	r28, 0x1c	; 28
    65ee:	0f b6       	in	r0, 0x3f	; 63
    65f0:	f8 94       	cli
    65f2:	de bf       	out	0x3e, r29	; 62
    65f4:	0f be       	out	0x3f, r0	; 63
    65f6:	cd bf       	out	0x3d, r28	; 61
    65f8:	df 91       	pop	r29
    65fa:	cf 91       	pop	r28
    65fc:	1f 91       	pop	r17
    65fe:	0f 91       	pop	r16
    6600:	08 95       	ret

00006602 <_ZN6String6concatEd>:

unsigned char String::concat(double num)
{
    6602:	0f 93       	push	r16
    6604:	1f 93       	push	r17
    6606:	cf 93       	push	r28
    6608:	df 93       	push	r29
    660a:	cd b7       	in	r28, 0x3d	; 61
    660c:	de b7       	in	r29, 0x3e	; 62
    660e:	6c 97       	sbiw	r28, 0x1c	; 28
    6610:	0f b6       	in	r0, 0x3f	; 63
    6612:	f8 94       	cli
    6614:	de bf       	out	0x3e, r29	; 62
    6616:	0f be       	out	0x3f, r0	; 63
    6618:	cd bf       	out	0x3d, r28	; 61
    661a:	98 8f       	std	Y+24, r25	; 0x18
    661c:	8f 8b       	std	Y+23, r24	; 0x17
    661e:	49 8f       	std	Y+25, r20	; 0x19
    6620:	5a 8f       	std	Y+26, r21	; 0x1a
    6622:	6b 8f       	std	Y+27, r22	; 0x1b
    6624:	7c 8f       	std	Y+28, r23	; 0x1c
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    6626:	9e 01       	movw	r18, r28
    6628:	2d 5f       	subi	r18, 0xFD	; 253
    662a:	3f 4f       	sbci	r19, 0xFF	; 255
    662c:	89 8d       	ldd	r24, Y+25	; 0x19
    662e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6630:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6632:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6634:	89 01       	movw	r16, r18
    6636:	22 e0       	ldi	r18, 0x02	; 2
    6638:	44 e0       	ldi	r20, 0x04	; 4
    663a:	bc 01       	movw	r22, r24
    663c:	cd 01       	movw	r24, r26
    663e:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <dtostrf>
    6642:	9a 83       	std	Y+2, r25	; 0x02
    6644:	89 83       	std	Y+1, r24	; 0x01
	return concat(string, strlen(string));
    6646:	89 81       	ldd	r24, Y+1	; 0x01
    6648:	9a 81       	ldd	r25, Y+2	; 0x02
    664a:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    664e:	ac 01       	movw	r20, r24
    6650:	29 81       	ldd	r18, Y+1	; 0x01
    6652:	3a 81       	ldd	r19, Y+2	; 0x02
    6654:	8f 89       	ldd	r24, Y+23	; 0x17
    6656:	98 8d       	ldd	r25, Y+24	; 0x18
    6658:	b9 01       	movw	r22, r18
    665a:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
}
    665e:	6c 96       	adiw	r28, 0x1c	; 28
    6660:	0f b6       	in	r0, 0x3f	; 63
    6662:	f8 94       	cli
    6664:	de bf       	out	0x3e, r29	; 62
    6666:	0f be       	out	0x3f, r0	; 63
    6668:	cd bf       	out	0x3d, r28	; 61
    666a:	df 91       	pop	r29
    666c:	cf 91       	pop	r28
    666e:	1f 91       	pop	r17
    6670:	0f 91       	pop	r16
    6672:	08 95       	ret

00006674 <_ZN6String6concatEPK19__FlashStringHelper>:

unsigned char String::concat(const __FlashStringHelper * str)
{
    6674:	cf 93       	push	r28
    6676:	df 93       	push	r29
    6678:	cd b7       	in	r28, 0x3d	; 61
    667a:	de b7       	in	r29, 0x3e	; 62
    667c:	2a 97       	sbiw	r28, 0x0a	; 10
    667e:	0f b6       	in	r0, 0x3f	; 63
    6680:	f8 94       	cli
    6682:	de bf       	out	0x3e, r29	; 62
    6684:	0f be       	out	0x3f, r0	; 63
    6686:	cd bf       	out	0x3d, r28	; 61
    6688:	98 87       	std	Y+8, r25	; 0x08
    668a:	8f 83       	std	Y+7, r24	; 0x07
    668c:	7a 87       	std	Y+10, r23	; 0x0a
    668e:	69 87       	std	Y+9, r22	; 0x09
	if (!str) return 0;
    6690:	89 85       	ldd	r24, Y+9	; 0x09
    6692:	9a 85       	ldd	r25, Y+10	; 0x0a
    6694:	89 2b       	or	r24, r25
    6696:	11 f4       	brne	.+4      	; 0x669c <_ZN6String6concatEPK19__FlashStringHelper+0x28>
    6698:	80 e0       	ldi	r24, 0x00	; 0
    669a:	44 c0       	rjmp	.+136    	; 0x6724 <_ZN6String6concatEPK19__FlashStringHelper+0xb0>
    669c:	89 85       	ldd	r24, Y+9	; 0x09
    669e:	9a 85       	ldd	r25, Y+10	; 0x0a
    66a0:	9e 83       	std	Y+6, r25	; 0x06
    66a2:	8d 83       	std	Y+5, r24	; 0x05
    66a4:	8d 81       	ldd	r24, Y+5	; 0x05
    66a6:	9e 81       	ldd	r25, Y+6	; 0x06
    66a8:	0e 94 bb 48 	call	0x9176	; 0x9176 <__strlen_P>
	int length = strlen_P((const char *) str);
    66ac:	9a 83       	std	Y+2, r25	; 0x02
    66ae:	89 83       	std	Y+1, r24	; 0x01
	if (length == 0) return 1;
    66b0:	89 81       	ldd	r24, Y+1	; 0x01
    66b2:	9a 81       	ldd	r25, Y+2	; 0x02
    66b4:	89 2b       	or	r24, r25
    66b6:	11 f4       	brne	.+4      	; 0x66bc <_ZN6String6concatEPK19__FlashStringHelper+0x48>
    66b8:	81 e0       	ldi	r24, 0x01	; 1
    66ba:	34 c0       	rjmp	.+104    	; 0x6724 <_ZN6String6concatEPK19__FlashStringHelper+0xb0>
	unsigned int newlen = len + length;
    66bc:	8f 81       	ldd	r24, Y+7	; 0x07
    66be:	98 85       	ldd	r25, Y+8	; 0x08
    66c0:	fc 01       	movw	r30, r24
    66c2:	24 81       	ldd	r18, Z+4	; 0x04
    66c4:	35 81       	ldd	r19, Z+5	; 0x05
    66c6:	89 81       	ldd	r24, Y+1	; 0x01
    66c8:	9a 81       	ldd	r25, Y+2	; 0x02
    66ca:	82 0f       	add	r24, r18
    66cc:	93 1f       	adc	r25, r19
    66ce:	9c 83       	std	Y+4, r25	; 0x04
    66d0:	8b 83       	std	Y+3, r24	; 0x03
	if (!reserve(newlen)) return 0;
    66d2:	2b 81       	ldd	r18, Y+3	; 0x03
    66d4:	3c 81       	ldd	r19, Y+4	; 0x04
    66d6:	8f 81       	ldd	r24, Y+7	; 0x07
    66d8:	98 85       	ldd	r25, Y+8	; 0x08
    66da:	b9 01       	movw	r22, r18
    66dc:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <_ZN6String7reserveEj>
    66e0:	98 2f       	mov	r25, r24
    66e2:	81 e0       	ldi	r24, 0x01	; 1
    66e4:	99 23       	and	r25, r25
    66e6:	09 f0       	breq	.+2      	; 0x66ea <_ZN6String6concatEPK19__FlashStringHelper+0x76>
    66e8:	80 e0       	ldi	r24, 0x00	; 0
    66ea:	88 23       	and	r24, r24
    66ec:	11 f0       	breq	.+4      	; 0x66f2 <_ZN6String6concatEPK19__FlashStringHelper+0x7e>
    66ee:	80 e0       	ldi	r24, 0x00	; 0
    66f0:	19 c0       	rjmp	.+50     	; 0x6724 <_ZN6String6concatEPK19__FlashStringHelper+0xb0>
	strcpy_P(buffer + len, (const char *) str);
    66f2:	8f 81       	ldd	r24, Y+7	; 0x07
    66f4:	98 85       	ldd	r25, Y+8	; 0x08
    66f6:	fc 01       	movw	r30, r24
    66f8:	20 81       	ld	r18, Z
    66fa:	31 81       	ldd	r19, Z+1	; 0x01
    66fc:	8f 81       	ldd	r24, Y+7	; 0x07
    66fe:	98 85       	ldd	r25, Y+8	; 0x08
    6700:	fc 01       	movw	r30, r24
    6702:	84 81       	ldd	r24, Z+4	; 0x04
    6704:	95 81       	ldd	r25, Z+5	; 0x05
    6706:	82 0f       	add	r24, r18
    6708:	93 1f       	adc	r25, r19
    670a:	29 85       	ldd	r18, Y+9	; 0x09
    670c:	3a 85       	ldd	r19, Y+10	; 0x0a
    670e:	b9 01       	movw	r22, r18
    6710:	0e 94 b4 48 	call	0x9168	; 0x9168 <strcpy_P>
	len = newlen;
    6714:	8f 81       	ldd	r24, Y+7	; 0x07
    6716:	98 85       	ldd	r25, Y+8	; 0x08
    6718:	2b 81       	ldd	r18, Y+3	; 0x03
    671a:	3c 81       	ldd	r19, Y+4	; 0x04
    671c:	fc 01       	movw	r30, r24
    671e:	35 83       	std	Z+5, r19	; 0x05
    6720:	24 83       	std	Z+4, r18	; 0x04
	return 1;
    6722:	81 e0       	ldi	r24, 0x01	; 1
}
    6724:	2a 96       	adiw	r28, 0x0a	; 10
    6726:	0f b6       	in	r0, 0x3f	; 63
    6728:	f8 94       	cli
    672a:	de bf       	out	0x3e, r29	; 62
    672c:	0f be       	out	0x3f, r0	; 63
    672e:	cd bf       	out	0x3d, r28	; 61
    6730:	df 91       	pop	r29
    6732:	cf 91       	pop	r28
    6734:	08 95       	ret

00006736 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    6736:	cf 93       	push	r28
    6738:	df 93       	push	r29
    673a:	00 d0       	rcall	.+0      	; 0x673c <_ZplRK15StringSumHelperRK6String+0x6>
    673c:	00 d0       	rcall	.+0      	; 0x673e <_ZplRK15StringSumHelperRK6String+0x8>
    673e:	cd b7       	in	r28, 0x3d	; 61
    6740:	de b7       	in	r29, 0x3e	; 62
    6742:	9c 83       	std	Y+4, r25	; 0x04
    6744:	8b 83       	std	Y+3, r24	; 0x03
    6746:	7e 83       	std	Y+6, r23	; 0x06
    6748:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    674a:	8b 81       	ldd	r24, Y+3	; 0x03
    674c:	9c 81       	ldd	r25, Y+4	; 0x04
    674e:	9a 83       	std	Y+2, r25	; 0x02
    6750:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6752:	8d 81       	ldd	r24, Y+5	; 0x05
    6754:	9e 81       	ldd	r25, Y+6	; 0x06
    6756:	fc 01       	movw	r30, r24
    6758:	44 81       	ldd	r20, Z+4	; 0x04
    675a:	55 81       	ldd	r21, Z+5	; 0x05
    675c:	8d 81       	ldd	r24, Y+5	; 0x05
    675e:	9e 81       	ldd	r25, Y+6	; 0x06
    6760:	fc 01       	movw	r30, r24
    6762:	20 81       	ld	r18, Z
    6764:	31 81       	ldd	r19, Z+1	; 0x01
    6766:	89 81       	ldd	r24, Y+1	; 0x01
    6768:	9a 81       	ldd	r25, Y+2	; 0x02
    676a:	b9 01       	movw	r22, r18
    676c:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
    6770:	98 2f       	mov	r25, r24
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	99 23       	and	r25, r25
    6776:	09 f0       	breq	.+2      	; 0x677a <_ZplRK15StringSumHelperRK6String+0x44>
    6778:	80 e0       	ldi	r24, 0x00	; 0
    677a:	88 23       	and	r24, r24
    677c:	21 f0       	breq	.+8      	; 0x6786 <_ZplRK15StringSumHelperRK6String+0x50>
    677e:	89 81       	ldd	r24, Y+1	; 0x01
    6780:	9a 81       	ldd	r25, Y+2	; 0x02
    6782:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6786:	89 81       	ldd	r24, Y+1	; 0x01
    6788:	9a 81       	ldd	r25, Y+2	; 0x02
}
    678a:	26 96       	adiw	r28, 0x06	; 6
    678c:	0f b6       	in	r0, 0x3f	; 63
    678e:	f8 94       	cli
    6790:	de bf       	out	0x3e, r29	; 62
    6792:	0f be       	out	0x3f, r0	; 63
    6794:	cd bf       	out	0x3d, r28	; 61
    6796:	df 91       	pop	r29
    6798:	cf 91       	pop	r28
    679a:	08 95       	ret

0000679c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    679c:	cf 93       	push	r28
    679e:	df 93       	push	r29
    67a0:	00 d0       	rcall	.+0      	; 0x67a2 <_ZplRK15StringSumHelperPKc+0x6>
    67a2:	00 d0       	rcall	.+0      	; 0x67a4 <_ZplRK15StringSumHelperPKc+0x8>
    67a4:	cd b7       	in	r28, 0x3d	; 61
    67a6:	de b7       	in	r29, 0x3e	; 62
    67a8:	9c 83       	std	Y+4, r25	; 0x04
    67aa:	8b 83       	std	Y+3, r24	; 0x03
    67ac:	7e 83       	std	Y+6, r23	; 0x06
    67ae:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    67b0:	8b 81       	ldd	r24, Y+3	; 0x03
    67b2:	9c 81       	ldd	r25, Y+4	; 0x04
    67b4:	9a 83       	std	Y+2, r25	; 0x02
    67b6:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    67b8:	8d 81       	ldd	r24, Y+5	; 0x05
    67ba:	9e 81       	ldd	r25, Y+6	; 0x06
    67bc:	89 2b       	or	r24, r25
    67be:	71 f0       	breq	.+28     	; 0x67dc <_ZplRK15StringSumHelperPKc+0x40>
    67c0:	8d 81       	ldd	r24, Y+5	; 0x05
    67c2:	9e 81       	ldd	r25, Y+6	; 0x06
    67c4:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    67c8:	ac 01       	movw	r20, r24
    67ca:	89 81       	ldd	r24, Y+1	; 0x01
    67cc:	9a 81       	ldd	r25, Y+2	; 0x02
    67ce:	2d 81       	ldd	r18, Y+5	; 0x05
    67d0:	3e 81       	ldd	r19, Y+6	; 0x06
    67d2:	b9 01       	movw	r22, r18
    67d4:	0e 94 38 31 	call	0x6270	; 0x6270 <_ZN6String6concatEPKcj>
    67d8:	88 23       	and	r24, r24
    67da:	11 f4       	brne	.+4      	; 0x67e0 <_ZplRK15StringSumHelperPKc+0x44>
    67dc:	81 e0       	ldi	r24, 0x01	; 1
    67de:	01 c0       	rjmp	.+2      	; 0x67e2 <_ZplRK15StringSumHelperPKc+0x46>
    67e0:	80 e0       	ldi	r24, 0x00	; 0
    67e2:	88 23       	and	r24, r24
    67e4:	21 f0       	breq	.+8      	; 0x67ee <_ZplRK15StringSumHelperPKc+0x52>
    67e6:	89 81       	ldd	r24, Y+1	; 0x01
    67e8:	9a 81       	ldd	r25, Y+2	; 0x02
    67ea:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    67ee:	89 81       	ldd	r24, Y+1	; 0x01
    67f0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    67f2:	26 96       	adiw	r28, 0x06	; 6
    67f4:	0f b6       	in	r0, 0x3f	; 63
    67f6:	f8 94       	cli
    67f8:	de bf       	out	0x3e, r29	; 62
    67fa:	0f be       	out	0x3f, r0	; 63
    67fc:	cd bf       	out	0x3d, r28	; 61
    67fe:	df 91       	pop	r29
    6800:	cf 91       	pop	r28
    6802:	08 95       	ret

00006804 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    6804:	cf 93       	push	r28
    6806:	df 93       	push	r29
    6808:	00 d0       	rcall	.+0      	; 0x680a <_ZplRK15StringSumHelperc+0x6>
    680a:	1f 92       	push	r1
    680c:	1f 92       	push	r1
    680e:	cd b7       	in	r28, 0x3d	; 61
    6810:	de b7       	in	r29, 0x3e	; 62
    6812:	9c 83       	std	Y+4, r25	; 0x04
    6814:	8b 83       	std	Y+3, r24	; 0x03
    6816:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    6818:	8b 81       	ldd	r24, Y+3	; 0x03
    681a:	9c 81       	ldd	r25, Y+4	; 0x04
    681c:	9a 83       	std	Y+2, r25	; 0x02
    681e:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(c)) a.invalidate();
    6820:	89 81       	ldd	r24, Y+1	; 0x01
    6822:	9a 81       	ldd	r25, Y+2	; 0x02
    6824:	6d 81       	ldd	r22, Y+5	; 0x05
    6826:	0e 94 b4 31 	call	0x6368	; 0x6368 <_ZN6String6concatEc>
    682a:	98 2f       	mov	r25, r24
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	99 23       	and	r25, r25
    6830:	09 f0       	breq	.+2      	; 0x6834 <_ZplRK15StringSumHelperc+0x30>
    6832:	80 e0       	ldi	r24, 0x00	; 0
    6834:	88 23       	and	r24, r24
    6836:	21 f0       	breq	.+8      	; 0x6840 <_ZplRK15StringSumHelperc+0x3c>
    6838:	89 81       	ldd	r24, Y+1	; 0x01
    683a:	9a 81       	ldd	r25, Y+2	; 0x02
    683c:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6840:	89 81       	ldd	r24, Y+1	; 0x01
    6842:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6844:	0f 90       	pop	r0
    6846:	0f 90       	pop	r0
    6848:	0f 90       	pop	r0
    684a:	0f 90       	pop	r0
    684c:	0f 90       	pop	r0
    684e:	df 91       	pop	r29
    6850:	cf 91       	pop	r28
    6852:	08 95       	ret

00006854 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	00 d0       	rcall	.+0      	; 0x685a <_ZplRK15StringSumHelperh+0x6>
    685a:	1f 92       	push	r1
    685c:	1f 92       	push	r1
    685e:	cd b7       	in	r28, 0x3d	; 61
    6860:	de b7       	in	r29, 0x3e	; 62
    6862:	9c 83       	std	Y+4, r25	; 0x04
    6864:	8b 83       	std	Y+3, r24	; 0x03
    6866:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    6868:	8b 81       	ldd	r24, Y+3	; 0x03
    686a:	9c 81       	ldd	r25, Y+4	; 0x04
    686c:	9a 83       	std	Y+2, r25	; 0x02
    686e:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    6870:	89 81       	ldd	r24, Y+1	; 0x01
    6872:	9a 81       	ldd	r25, Y+2	; 0x02
    6874:	6d 81       	ldd	r22, Y+5	; 0x05
    6876:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <_ZN6String6concatEh>
    687a:	98 2f       	mov	r25, r24
    687c:	81 e0       	ldi	r24, 0x01	; 1
    687e:	99 23       	and	r25, r25
    6880:	09 f0       	breq	.+2      	; 0x6884 <_ZplRK15StringSumHelperh+0x30>
    6882:	80 e0       	ldi	r24, 0x00	; 0
    6884:	88 23       	and	r24, r24
    6886:	21 f0       	breq	.+8      	; 0x6890 <_ZplRK15StringSumHelperh+0x3c>
    6888:	89 81       	ldd	r24, Y+1	; 0x01
    688a:	9a 81       	ldd	r25, Y+2	; 0x02
    688c:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6890:	89 81       	ldd	r24, Y+1	; 0x01
    6892:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6894:	0f 90       	pop	r0
    6896:	0f 90       	pop	r0
    6898:	0f 90       	pop	r0
    689a:	0f 90       	pop	r0
    689c:	0f 90       	pop	r0
    689e:	df 91       	pop	r29
    68a0:	cf 91       	pop	r28
    68a2:	08 95       	ret

000068a4 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    68a4:	cf 93       	push	r28
    68a6:	df 93       	push	r29
    68a8:	00 d0       	rcall	.+0      	; 0x68aa <_ZplRK15StringSumHelperi+0x6>
    68aa:	00 d0       	rcall	.+0      	; 0x68ac <_ZplRK15StringSumHelperi+0x8>
    68ac:	cd b7       	in	r28, 0x3d	; 61
    68ae:	de b7       	in	r29, 0x3e	; 62
    68b0:	9c 83       	std	Y+4, r25	; 0x04
    68b2:	8b 83       	std	Y+3, r24	; 0x03
    68b4:	7e 83       	std	Y+6, r23	; 0x06
    68b6:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    68b8:	8b 81       	ldd	r24, Y+3	; 0x03
    68ba:	9c 81       	ldd	r25, Y+4	; 0x04
    68bc:	9a 83       	std	Y+2, r25	; 0x02
    68be:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    68c0:	89 81       	ldd	r24, Y+1	; 0x01
    68c2:	9a 81       	ldd	r25, Y+2	; 0x02
    68c4:	2d 81       	ldd	r18, Y+5	; 0x05
    68c6:	3e 81       	ldd	r19, Y+6	; 0x06
    68c8:	b9 01       	movw	r22, r18
    68ca:	0e 94 02 32 	call	0x6404	; 0x6404 <_ZN6String6concatEi>
    68ce:	98 2f       	mov	r25, r24
    68d0:	81 e0       	ldi	r24, 0x01	; 1
    68d2:	99 23       	and	r25, r25
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <_ZplRK15StringSumHelperi+0x34>
    68d6:	80 e0       	ldi	r24, 0x00	; 0
    68d8:	88 23       	and	r24, r24
    68da:	21 f0       	breq	.+8      	; 0x68e4 <_ZplRK15StringSumHelperi+0x40>
    68dc:	89 81       	ldd	r24, Y+1	; 0x01
    68de:	9a 81       	ldd	r25, Y+2	; 0x02
    68e0:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    68e4:	89 81       	ldd	r24, Y+1	; 0x01
    68e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    68e8:	26 96       	adiw	r28, 0x06	; 6
    68ea:	0f b6       	in	r0, 0x3f	; 63
    68ec:	f8 94       	cli
    68ee:	de bf       	out	0x3e, r29	; 62
    68f0:	0f be       	out	0x3f, r0	; 63
    68f2:	cd bf       	out	0x3d, r28	; 61
    68f4:	df 91       	pop	r29
    68f6:	cf 91       	pop	r28
    68f8:	08 95       	ret

000068fa <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    68fa:	cf 93       	push	r28
    68fc:	df 93       	push	r29
    68fe:	00 d0       	rcall	.+0      	; 0x6900 <_ZplRK15StringSumHelperj+0x6>
    6900:	00 d0       	rcall	.+0      	; 0x6902 <_ZplRK15StringSumHelperj+0x8>
    6902:	cd b7       	in	r28, 0x3d	; 61
    6904:	de b7       	in	r29, 0x3e	; 62
    6906:	9c 83       	std	Y+4, r25	; 0x04
    6908:	8b 83       	std	Y+3, r24	; 0x03
    690a:	7e 83       	std	Y+6, r23	; 0x06
    690c:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    690e:	8b 81       	ldd	r24, Y+3	; 0x03
    6910:	9c 81       	ldd	r25, Y+4	; 0x04
    6912:	9a 83       	std	Y+2, r25	; 0x02
    6914:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    6916:	89 81       	ldd	r24, Y+1	; 0x01
    6918:	9a 81       	ldd	r25, Y+2	; 0x02
    691a:	2d 81       	ldd	r18, Y+5	; 0x05
    691c:	3e 81       	ldd	r19, Y+6	; 0x06
    691e:	b9 01       	movw	r22, r18
    6920:	0e 94 31 32 	call	0x6462	; 0x6462 <_ZN6String6concatEj>
    6924:	98 2f       	mov	r25, r24
    6926:	81 e0       	ldi	r24, 0x01	; 1
    6928:	99 23       	and	r25, r25
    692a:	09 f0       	breq	.+2      	; 0x692e <_ZplRK15StringSumHelperj+0x34>
    692c:	80 e0       	ldi	r24, 0x00	; 0
    692e:	88 23       	and	r24, r24
    6930:	21 f0       	breq	.+8      	; 0x693a <_ZplRK15StringSumHelperj+0x40>
    6932:	89 81       	ldd	r24, Y+1	; 0x01
    6934:	9a 81       	ldd	r25, Y+2	; 0x02
    6936:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    693a:	89 81       	ldd	r24, Y+1	; 0x01
    693c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    693e:	26 96       	adiw	r28, 0x06	; 6
    6940:	0f b6       	in	r0, 0x3f	; 63
    6942:	f8 94       	cli
    6944:	de bf       	out	0x3e, r29	; 62
    6946:	0f be       	out	0x3f, r0	; 63
    6948:	cd bf       	out	0x3d, r28	; 61
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	08 95       	ret

00006950 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    6950:	cf 93       	push	r28
    6952:	df 93       	push	r29
    6954:	cd b7       	in	r28, 0x3d	; 61
    6956:	de b7       	in	r29, 0x3e	; 62
    6958:	28 97       	sbiw	r28, 0x08	; 8
    695a:	0f b6       	in	r0, 0x3f	; 63
    695c:	f8 94       	cli
    695e:	de bf       	out	0x3e, r29	; 62
    6960:	0f be       	out	0x3f, r0	; 63
    6962:	cd bf       	out	0x3d, r28	; 61
    6964:	9c 83       	std	Y+4, r25	; 0x04
    6966:	8b 83       	std	Y+3, r24	; 0x03
    6968:	4d 83       	std	Y+5, r20	; 0x05
    696a:	5e 83       	std	Y+6, r21	; 0x06
    696c:	6f 83       	std	Y+7, r22	; 0x07
    696e:	78 87       	std	Y+8, r23	; 0x08
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    6970:	8b 81       	ldd	r24, Y+3	; 0x03
    6972:	9c 81       	ldd	r25, Y+4	; 0x04
    6974:	9a 83       	std	Y+2, r25	; 0x02
    6976:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    6978:	29 81       	ldd	r18, Y+1	; 0x01
    697a:	3a 81       	ldd	r19, Y+2	; 0x02
    697c:	8d 81       	ldd	r24, Y+5	; 0x05
    697e:	9e 81       	ldd	r25, Y+6	; 0x06
    6980:	af 81       	ldd	r26, Y+7	; 0x07
    6982:	b8 85       	ldd	r27, Y+8	; 0x08
    6984:	ac 01       	movw	r20, r24
    6986:	bd 01       	movw	r22, r26
    6988:	c9 01       	movw	r24, r18
    698a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <_ZN6String6concatEl>
    698e:	98 2f       	mov	r25, r24
    6990:	81 e0       	ldi	r24, 0x01	; 1
    6992:	99 23       	and	r25, r25
    6994:	09 f0       	breq	.+2      	; 0x6998 <_ZplRK15StringSumHelperl+0x48>
    6996:	80 e0       	ldi	r24, 0x00	; 0
    6998:	88 23       	and	r24, r24
    699a:	21 f0       	breq	.+8      	; 0x69a4 <_ZplRK15StringSumHelperl+0x54>
    699c:	89 81       	ldd	r24, Y+1	; 0x01
    699e:	9a 81       	ldd	r25, Y+2	; 0x02
    69a0:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    69a4:	89 81       	ldd	r24, Y+1	; 0x01
    69a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    69a8:	28 96       	adiw	r28, 0x08	; 8
    69aa:	0f b6       	in	r0, 0x3f	; 63
    69ac:	f8 94       	cli
    69ae:	de bf       	out	0x3e, r29	; 62
    69b0:	0f be       	out	0x3f, r0	; 63
    69b2:	cd bf       	out	0x3d, r28	; 61
    69b4:	df 91       	pop	r29
    69b6:	cf 91       	pop	r28
    69b8:	08 95       	ret

000069ba <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    69ba:	cf 93       	push	r28
    69bc:	df 93       	push	r29
    69be:	cd b7       	in	r28, 0x3d	; 61
    69c0:	de b7       	in	r29, 0x3e	; 62
    69c2:	28 97       	sbiw	r28, 0x08	; 8
    69c4:	0f b6       	in	r0, 0x3f	; 63
    69c6:	f8 94       	cli
    69c8:	de bf       	out	0x3e, r29	; 62
    69ca:	0f be       	out	0x3f, r0	; 63
    69cc:	cd bf       	out	0x3d, r28	; 61
    69ce:	9c 83       	std	Y+4, r25	; 0x04
    69d0:	8b 83       	std	Y+3, r24	; 0x03
    69d2:	4d 83       	std	Y+5, r20	; 0x05
    69d4:	5e 83       	std	Y+6, r21	; 0x06
    69d6:	6f 83       	std	Y+7, r22	; 0x07
    69d8:	78 87       	std	Y+8, r23	; 0x08
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    69da:	8b 81       	ldd	r24, Y+3	; 0x03
    69dc:	9c 81       	ldd	r25, Y+4	; 0x04
    69de:	9a 83       	std	Y+2, r25	; 0x02
    69e0:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    69e2:	29 81       	ldd	r18, Y+1	; 0x01
    69e4:	3a 81       	ldd	r19, Y+2	; 0x02
    69e6:	8d 81       	ldd	r24, Y+5	; 0x05
    69e8:	9e 81       	ldd	r25, Y+6	; 0x06
    69ea:	af 81       	ldd	r26, Y+7	; 0x07
    69ec:	b8 85       	ldd	r27, Y+8	; 0x08
    69ee:	ac 01       	movw	r20, r24
    69f0:	bd 01       	movw	r22, r26
    69f2:	c9 01       	movw	r24, r18
    69f4:	0e 94 94 32 	call	0x6528	; 0x6528 <_ZN6String6concatEm>
    69f8:	98 2f       	mov	r25, r24
    69fa:	81 e0       	ldi	r24, 0x01	; 1
    69fc:	99 23       	and	r25, r25
    69fe:	09 f0       	breq	.+2      	; 0x6a02 <_ZplRK15StringSumHelperm+0x48>
    6a00:	80 e0       	ldi	r24, 0x00	; 0
    6a02:	88 23       	and	r24, r24
    6a04:	21 f0       	breq	.+8      	; 0x6a0e <_ZplRK15StringSumHelperm+0x54>
    6a06:	89 81       	ldd	r24, Y+1	; 0x01
    6a08:	9a 81       	ldd	r25, Y+2	; 0x02
    6a0a:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6a0e:	89 81       	ldd	r24, Y+1	; 0x01
    6a10:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6a12:	28 96       	adiw	r28, 0x08	; 8
    6a14:	0f b6       	in	r0, 0x3f	; 63
    6a16:	f8 94       	cli
    6a18:	de bf       	out	0x3e, r29	; 62
    6a1a:	0f be       	out	0x3f, r0	; 63
    6a1c:	cd bf       	out	0x3d, r28	; 61
    6a1e:	df 91       	pop	r29
    6a20:	cf 91       	pop	r28
    6a22:	08 95       	ret

00006a24 <_ZplRK15StringSumHelperf>:

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
    6a24:	cf 93       	push	r28
    6a26:	df 93       	push	r29
    6a28:	cd b7       	in	r28, 0x3d	; 61
    6a2a:	de b7       	in	r29, 0x3e	; 62
    6a2c:	28 97       	sbiw	r28, 0x08	; 8
    6a2e:	0f b6       	in	r0, 0x3f	; 63
    6a30:	f8 94       	cli
    6a32:	de bf       	out	0x3e, r29	; 62
    6a34:	0f be       	out	0x3f, r0	; 63
    6a36:	cd bf       	out	0x3d, r28	; 61
    6a38:	9c 83       	std	Y+4, r25	; 0x04
    6a3a:	8b 83       	std	Y+3, r24	; 0x03
    6a3c:	4d 83       	std	Y+5, r20	; 0x05
    6a3e:	5e 83       	std	Y+6, r21	; 0x06
    6a40:	6f 83       	std	Y+7, r22	; 0x07
    6a42:	78 87       	std	Y+8, r23	; 0x08
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    6a44:	8b 81       	ldd	r24, Y+3	; 0x03
    6a46:	9c 81       	ldd	r25, Y+4	; 0x04
    6a48:	9a 83       	std	Y+2, r25	; 0x02
    6a4a:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    6a4c:	29 81       	ldd	r18, Y+1	; 0x01
    6a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    6a50:	8d 81       	ldd	r24, Y+5	; 0x05
    6a52:	9e 81       	ldd	r25, Y+6	; 0x06
    6a54:	af 81       	ldd	r26, Y+7	; 0x07
    6a56:	b8 85       	ldd	r27, Y+8	; 0x08
    6a58:	ac 01       	movw	r20, r24
    6a5a:	bd 01       	movw	r22, r26
    6a5c:	c9 01       	movw	r24, r18
    6a5e:	0e 94 c8 32 	call	0x6590	; 0x6590 <_ZN6String6concatEf>
    6a62:	98 2f       	mov	r25, r24
    6a64:	81 e0       	ldi	r24, 0x01	; 1
    6a66:	99 23       	and	r25, r25
    6a68:	09 f0       	breq	.+2      	; 0x6a6c <_ZplRK15StringSumHelperf+0x48>
    6a6a:	80 e0       	ldi	r24, 0x00	; 0
    6a6c:	88 23       	and	r24, r24
    6a6e:	21 f0       	breq	.+8      	; 0x6a78 <_ZplRK15StringSumHelperf+0x54>
    6a70:	89 81       	ldd	r24, Y+1	; 0x01
    6a72:	9a 81       	ldd	r25, Y+2	; 0x02
    6a74:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6a78:	89 81       	ldd	r24, Y+1	; 0x01
    6a7a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6a7c:	28 96       	adiw	r28, 0x08	; 8
    6a7e:	0f b6       	in	r0, 0x3f	; 63
    6a80:	f8 94       	cli
    6a82:	de bf       	out	0x3e, r29	; 62
    6a84:	0f be       	out	0x3f, r0	; 63
    6a86:	cd bf       	out	0x3d, r28	; 61
    6a88:	df 91       	pop	r29
    6a8a:	cf 91       	pop	r28
    6a8c:	08 95       	ret

00006a8e <_ZplRK15StringSumHelperd>:

StringSumHelper & operator + (const StringSumHelper &lhs, double num)
{
    6a8e:	cf 93       	push	r28
    6a90:	df 93       	push	r29
    6a92:	cd b7       	in	r28, 0x3d	; 61
    6a94:	de b7       	in	r29, 0x3e	; 62
    6a96:	28 97       	sbiw	r28, 0x08	; 8
    6a98:	0f b6       	in	r0, 0x3f	; 63
    6a9a:	f8 94       	cli
    6a9c:	de bf       	out	0x3e, r29	; 62
    6a9e:	0f be       	out	0x3f, r0	; 63
    6aa0:	cd bf       	out	0x3d, r28	; 61
    6aa2:	9c 83       	std	Y+4, r25	; 0x04
    6aa4:	8b 83       	std	Y+3, r24	; 0x03
    6aa6:	4d 83       	std	Y+5, r20	; 0x05
    6aa8:	5e 83       	std	Y+6, r21	; 0x06
    6aaa:	6f 83       	std	Y+7, r22	; 0x07
    6aac:	78 87       	std	Y+8, r23	; 0x08
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    6aae:	8b 81       	ldd	r24, Y+3	; 0x03
    6ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ab2:	9a 83       	std	Y+2, r25	; 0x02
    6ab4:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    6ab6:	29 81       	ldd	r18, Y+1	; 0x01
    6ab8:	3a 81       	ldd	r19, Y+2	; 0x02
    6aba:	8d 81       	ldd	r24, Y+5	; 0x05
    6abc:	9e 81       	ldd	r25, Y+6	; 0x06
    6abe:	af 81       	ldd	r26, Y+7	; 0x07
    6ac0:	b8 85       	ldd	r27, Y+8	; 0x08
    6ac2:	ac 01       	movw	r20, r24
    6ac4:	bd 01       	movw	r22, r26
    6ac6:	c9 01       	movw	r24, r18
    6ac8:	0e 94 01 33 	call	0x6602	; 0x6602 <_ZN6String6concatEd>
    6acc:	98 2f       	mov	r25, r24
    6ace:	81 e0       	ldi	r24, 0x01	; 1
    6ad0:	99 23       	and	r25, r25
    6ad2:	09 f0       	breq	.+2      	; 0x6ad6 <_ZplRK15StringSumHelperd+0x48>
    6ad4:	80 e0       	ldi	r24, 0x00	; 0
    6ad6:	88 23       	and	r24, r24
    6ad8:	21 f0       	breq	.+8      	; 0x6ae2 <_ZplRK15StringSumHelperd+0x54>
    6ada:	89 81       	ldd	r24, Y+1	; 0x01
    6adc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ade:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6ae2:	89 81       	ldd	r24, Y+1	; 0x01
    6ae4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6ae6:	28 96       	adiw	r28, 0x08	; 8
    6ae8:	0f b6       	in	r0, 0x3f	; 63
    6aea:	f8 94       	cli
    6aec:	de bf       	out	0x3e, r29	; 62
    6aee:	0f be       	out	0x3f, r0	; 63
    6af0:	cd bf       	out	0x3d, r28	; 61
    6af2:	df 91       	pop	r29
    6af4:	cf 91       	pop	r28
    6af6:	08 95       	ret

00006af8 <_ZplRK15StringSumHelperPK19__FlashStringHelper>:

StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
{
    6af8:	cf 93       	push	r28
    6afa:	df 93       	push	r29
    6afc:	00 d0       	rcall	.+0      	; 0x6afe <_ZplRK15StringSumHelperPK19__FlashStringHelper+0x6>
    6afe:	00 d0       	rcall	.+0      	; 0x6b00 <_ZplRK15StringSumHelperPK19__FlashStringHelper+0x8>
    6b00:	cd b7       	in	r28, 0x3d	; 61
    6b02:	de b7       	in	r29, 0x3e	; 62
    6b04:	9c 83       	std	Y+4, r25	; 0x04
    6b06:	8b 83       	std	Y+3, r24	; 0x03
    6b08:	7e 83       	std	Y+6, r23	; 0x06
    6b0a:	6d 83       	std	Y+5, r22	; 0x05
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    6b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b10:	9a 83       	std	Y+2, r25	; 0x02
    6b12:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(rhs))	a.invalidate();
    6b14:	89 81       	ldd	r24, Y+1	; 0x01
    6b16:	9a 81       	ldd	r25, Y+2	; 0x02
    6b18:	2d 81       	ldd	r18, Y+5	; 0x05
    6b1a:	3e 81       	ldd	r19, Y+6	; 0x06
    6b1c:	b9 01       	movw	r22, r18
    6b1e:	0e 94 3a 33 	call	0x6674	; 0x6674 <_ZN6String6concatEPK19__FlashStringHelper>
    6b22:	98 2f       	mov	r25, r24
    6b24:	81 e0       	ldi	r24, 0x01	; 1
    6b26:	99 23       	and	r25, r25
    6b28:	09 f0       	breq	.+2      	; 0x6b2c <_ZplRK15StringSumHelperPK19__FlashStringHelper+0x34>
    6b2a:	80 e0       	ldi	r24, 0x00	; 0
    6b2c:	88 23       	and	r24, r24
    6b2e:	21 f0       	breq	.+8      	; 0x6b38 <_ZplRK15StringSumHelperPK19__FlashStringHelper+0x40>
    6b30:	89 81       	ldd	r24, Y+1	; 0x01
    6b32:	9a 81       	ldd	r25, Y+2	; 0x02
    6b34:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <_ZN6String10invalidateEv>
	return a;
    6b38:	89 81       	ldd	r24, Y+1	; 0x01
    6b3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6b3c:	26 96       	adiw	r28, 0x06	; 6
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	de bf       	out	0x3e, r29	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	cd bf       	out	0x3d, r28	; 61
    6b48:	df 91       	pop	r29
    6b4a:	cf 91       	pop	r28
    6b4c:	08 95       	ret

00006b4e <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    6b4e:	cf 93       	push	r28
    6b50:	df 93       	push	r29
    6b52:	00 d0       	rcall	.+0      	; 0x6b54 <_ZNK6String9compareToERKS_+0x6>
    6b54:	1f 92       	push	r1
    6b56:	cd b7       	in	r28, 0x3d	; 61
    6b58:	de b7       	in	r29, 0x3e	; 62
    6b5a:	9a 83       	std	Y+2, r25	; 0x02
    6b5c:	89 83       	std	Y+1, r24	; 0x01
    6b5e:	7c 83       	std	Y+4, r23	; 0x04
    6b60:	6b 83       	std	Y+3, r22	; 0x03
	if (!buffer || !s.buffer) {
    6b62:	89 81       	ldd	r24, Y+1	; 0x01
    6b64:	9a 81       	ldd	r25, Y+2	; 0x02
    6b66:	fc 01       	movw	r30, r24
    6b68:	80 81       	ld	r24, Z
    6b6a:	91 81       	ldd	r25, Z+1	; 0x01
    6b6c:	89 2b       	or	r24, r25
    6b6e:	39 f0       	breq	.+14     	; 0x6b7e <_ZNK6String9compareToERKS_+0x30>
    6b70:	8b 81       	ldd	r24, Y+3	; 0x03
    6b72:	9c 81       	ldd	r25, Y+4	; 0x04
    6b74:	fc 01       	movw	r30, r24
    6b76:	80 81       	ld	r24, Z
    6b78:	91 81       	ldd	r25, Z+1	; 0x01
    6b7a:	89 2b       	or	r24, r25
    6b7c:	b1 f5       	brne	.+108    	; 0x6bea <_ZNK6String9compareToERKS_+0x9c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    6b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b80:	9c 81       	ldd	r25, Y+4	; 0x04
    6b82:	fc 01       	movw	r30, r24
    6b84:	80 81       	ld	r24, Z
    6b86:	91 81       	ldd	r25, Z+1	; 0x01
    6b88:	89 2b       	or	r24, r25
    6b8a:	a1 f0       	breq	.+40     	; 0x6bb4 <_ZNK6String9compareToERKS_+0x66>
    6b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b90:	fc 01       	movw	r30, r24
    6b92:	84 81       	ldd	r24, Z+4	; 0x04
    6b94:	95 81       	ldd	r25, Z+5	; 0x05
    6b96:	89 2b       	or	r24, r25
    6b98:	69 f0       	breq	.+26     	; 0x6bb4 <_ZNK6String9compareToERKS_+0x66>
    6b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    6b9e:	fc 01       	movw	r30, r24
    6ba0:	80 81       	ld	r24, Z
    6ba2:	91 81       	ldd	r25, Z+1	; 0x01
    6ba4:	fc 01       	movw	r30, r24
    6ba6:	80 81       	ld	r24, Z
    6ba8:	88 2f       	mov	r24, r24
    6baa:	90 e0       	ldi	r25, 0x00	; 0
    6bac:	91 95       	neg	r25
    6bae:	81 95       	neg	r24
    6bb0:	91 09       	sbc	r25, r1
    6bb2:	28 c0       	rjmp	.+80     	; 0x6c04 <_ZNK6String9compareToERKS_+0xb6>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    6bb4:	89 81       	ldd	r24, Y+1	; 0x01
    6bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bb8:	fc 01       	movw	r30, r24
    6bba:	80 81       	ld	r24, Z
    6bbc:	91 81       	ldd	r25, Z+1	; 0x01
    6bbe:	89 2b       	or	r24, r25
    6bc0:	89 f0       	breq	.+34     	; 0x6be4 <_ZNK6String9compareToERKS_+0x96>
    6bc2:	89 81       	ldd	r24, Y+1	; 0x01
    6bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    6bc6:	fc 01       	movw	r30, r24
    6bc8:	84 81       	ldd	r24, Z+4	; 0x04
    6bca:	95 81       	ldd	r25, Z+5	; 0x05
    6bcc:	89 2b       	or	r24, r25
    6bce:	51 f0       	breq	.+20     	; 0x6be4 <_ZNK6String9compareToERKS_+0x96>
    6bd0:	89 81       	ldd	r24, Y+1	; 0x01
    6bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd4:	fc 01       	movw	r30, r24
    6bd6:	80 81       	ld	r24, Z
    6bd8:	91 81       	ldd	r25, Z+1	; 0x01
    6bda:	fc 01       	movw	r30, r24
    6bdc:	80 81       	ld	r24, Z
    6bde:	88 2f       	mov	r24, r24
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	10 c0       	rjmp	.+32     	; 0x6c04 <_ZNK6String9compareToERKS_+0xb6>
		return 0;
    6be4:	80 e0       	ldi	r24, 0x00	; 0
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	0d c0       	rjmp	.+26     	; 0x6c04 <_ZNK6String9compareToERKS_+0xb6>
	}
	return strcmp(buffer, s.buffer);
    6bea:	8b 81       	ldd	r24, Y+3	; 0x03
    6bec:	9c 81       	ldd	r25, Y+4	; 0x04
    6bee:	fc 01       	movw	r30, r24
    6bf0:	20 81       	ld	r18, Z
    6bf2:	31 81       	ldd	r19, Z+1	; 0x01
    6bf4:	89 81       	ldd	r24, Y+1	; 0x01
    6bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf8:	fc 01       	movw	r30, r24
    6bfa:	80 81       	ld	r24, Z
    6bfc:	91 81       	ldd	r25, Z+1	; 0x01
    6bfe:	b9 01       	movw	r22, r18
    6c00:	0e 94 f7 48 	call	0x91ee	; 0x91ee <strcmp>
}
    6c04:	0f 90       	pop	r0
    6c06:	0f 90       	pop	r0
    6c08:	0f 90       	pop	r0
    6c0a:	0f 90       	pop	r0
    6c0c:	df 91       	pop	r29
    6c0e:	cf 91       	pop	r28
    6c10:	08 95       	ret

00006c12 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
    6c12:	cf 93       	push	r28
    6c14:	df 93       	push	r29
    6c16:	00 d0       	rcall	.+0      	; 0x6c18 <_ZNK6String6equalsERKS_+0x6>
    6c18:	1f 92       	push	r1
    6c1a:	cd b7       	in	r28, 0x3d	; 61
    6c1c:	de b7       	in	r29, 0x3e	; 62
    6c1e:	9a 83       	std	Y+2, r25	; 0x02
    6c20:	89 83       	std	Y+1, r24	; 0x01
    6c22:	7c 83       	std	Y+4, r23	; 0x04
    6c24:	6b 83       	std	Y+3, r22	; 0x03
	return (len == s2.len && compareTo(s2) == 0);
    6c26:	89 81       	ldd	r24, Y+1	; 0x01
    6c28:	9a 81       	ldd	r25, Y+2	; 0x02
    6c2a:	fc 01       	movw	r30, r24
    6c2c:	24 81       	ldd	r18, Z+4	; 0x04
    6c2e:	35 81       	ldd	r19, Z+5	; 0x05
    6c30:	8b 81       	ldd	r24, Y+3	; 0x03
    6c32:	9c 81       	ldd	r25, Y+4	; 0x04
    6c34:	fc 01       	movw	r30, r24
    6c36:	84 81       	ldd	r24, Z+4	; 0x04
    6c38:	95 81       	ldd	r25, Z+5	; 0x05
    6c3a:	28 17       	cp	r18, r24
    6c3c:	39 07       	cpc	r19, r25
    6c3e:	59 f4       	brne	.+22     	; 0x6c56 <_ZNK6String6equalsERKS_+0x44>
    6c40:	2b 81       	ldd	r18, Y+3	; 0x03
    6c42:	3c 81       	ldd	r19, Y+4	; 0x04
    6c44:	89 81       	ldd	r24, Y+1	; 0x01
    6c46:	9a 81       	ldd	r25, Y+2	; 0x02
    6c48:	b9 01       	movw	r22, r18
    6c4a:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <_ZNK6String9compareToERKS_>
    6c4e:	89 2b       	or	r24, r25
    6c50:	11 f4       	brne	.+4      	; 0x6c56 <_ZNK6String6equalsERKS_+0x44>
    6c52:	81 e0       	ldi	r24, 0x01	; 1
    6c54:	01 c0       	rjmp	.+2      	; 0x6c58 <_ZNK6String6equalsERKS_+0x46>
    6c56:	80 e0       	ldi	r24, 0x00	; 0
}
    6c58:	0f 90       	pop	r0
    6c5a:	0f 90       	pop	r0
    6c5c:	0f 90       	pop	r0
    6c5e:	0f 90       	pop	r0
    6c60:	df 91       	pop	r29
    6c62:	cf 91       	pop	r28
    6c64:	08 95       	ret

00006c66 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    6c66:	cf 93       	push	r28
    6c68:	df 93       	push	r29
    6c6a:	00 d0       	rcall	.+0      	; 0x6c6c <_ZNK6String6equalsEPKc+0x6>
    6c6c:	1f 92       	push	r1
    6c6e:	cd b7       	in	r28, 0x3d	; 61
    6c70:	de b7       	in	r29, 0x3e	; 62
    6c72:	9a 83       	std	Y+2, r25	; 0x02
    6c74:	89 83       	std	Y+1, r24	; 0x01
    6c76:	7c 83       	std	Y+4, r23	; 0x04
    6c78:	6b 83       	std	Y+3, r22	; 0x03
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6c7a:	89 81       	ldd	r24, Y+1	; 0x01
    6c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c7e:	fc 01       	movw	r30, r24
    6c80:	84 81       	ldd	r24, Z+4	; 0x04
    6c82:	95 81       	ldd	r25, Z+5	; 0x05
    6c84:	89 2b       	or	r24, r25
    6c86:	71 f4       	brne	.+28     	; 0x6ca4 <_ZNK6String6equalsEPKc+0x3e>
    6c88:	8b 81       	ldd	r24, Y+3	; 0x03
    6c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    6c8c:	89 2b       	or	r24, r25
    6c8e:	31 f0       	breq	.+12     	; 0x6c9c <_ZNK6String6equalsEPKc+0x36>
    6c90:	8b 81       	ldd	r24, Y+3	; 0x03
    6c92:	9c 81       	ldd	r25, Y+4	; 0x04
    6c94:	fc 01       	movw	r30, r24
    6c96:	80 81       	ld	r24, Z
    6c98:	88 23       	and	r24, r24
    6c9a:	11 f4       	brne	.+4      	; 0x6ca0 <_ZNK6String6equalsEPKc+0x3a>
    6c9c:	81 e0       	ldi	r24, 0x01	; 1
    6c9e:	01 c0       	rjmp	.+2      	; 0x6ca2 <_ZNK6String6equalsEPKc+0x3c>
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
    6ca2:	1f c0       	rjmp	.+62     	; 0x6ce2 <_ZNK6String6equalsEPKc+0x7c>
	if (cstr == NULL) return buffer[0] == 0;
    6ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    6ca8:	89 2b       	or	r24, r25
    6caa:	61 f4       	brne	.+24     	; 0x6cc4 <_ZNK6String6equalsEPKc+0x5e>
    6cac:	89 81       	ldd	r24, Y+1	; 0x01
    6cae:	9a 81       	ldd	r25, Y+2	; 0x02
    6cb0:	fc 01       	movw	r30, r24
    6cb2:	80 81       	ld	r24, Z
    6cb4:	91 81       	ldd	r25, Z+1	; 0x01
    6cb6:	fc 01       	movw	r30, r24
    6cb8:	90 81       	ld	r25, Z
    6cba:	81 e0       	ldi	r24, 0x01	; 1
    6cbc:	99 23       	and	r25, r25
    6cbe:	89 f0       	breq	.+34     	; 0x6ce2 <_ZNK6String6equalsEPKc+0x7c>
    6cc0:	80 e0       	ldi	r24, 0x00	; 0
    6cc2:	0f c0       	rjmp	.+30     	; 0x6ce2 <_ZNK6String6equalsEPKc+0x7c>
	return strcmp(buffer, cstr) == 0;
    6cc4:	89 81       	ldd	r24, Y+1	; 0x01
    6cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cc8:	fc 01       	movw	r30, r24
    6cca:	80 81       	ld	r24, Z
    6ccc:	91 81       	ldd	r25, Z+1	; 0x01
    6cce:	2b 81       	ldd	r18, Y+3	; 0x03
    6cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    6cd2:	b9 01       	movw	r22, r18
    6cd4:	0e 94 f7 48 	call	0x91ee	; 0x91ee <strcmp>
    6cd8:	21 e0       	ldi	r18, 0x01	; 1
    6cda:	89 2b       	or	r24, r25
    6cdc:	09 f0       	breq	.+2      	; 0x6ce0 <_ZNK6String6equalsEPKc+0x7a>
    6cde:	20 e0       	ldi	r18, 0x00	; 0
    6ce0:	82 2f       	mov	r24, r18
}
    6ce2:	0f 90       	pop	r0
    6ce4:	0f 90       	pop	r0
    6ce6:	0f 90       	pop	r0
    6ce8:	0f 90       	pop	r0
    6cea:	df 91       	pop	r29
    6cec:	cf 91       	pop	r28
    6cee:	08 95       	ret

00006cf0 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
    6cf0:	cf 93       	push	r28
    6cf2:	df 93       	push	r29
    6cf4:	00 d0       	rcall	.+0      	; 0x6cf6 <_ZNK6StringltERKS_+0x6>
    6cf6:	1f 92       	push	r1
    6cf8:	cd b7       	in	r28, 0x3d	; 61
    6cfa:	de b7       	in	r29, 0x3e	; 62
    6cfc:	9a 83       	std	Y+2, r25	; 0x02
    6cfe:	89 83       	std	Y+1, r24	; 0x01
    6d00:	7c 83       	std	Y+4, r23	; 0x04
    6d02:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) < 0;
    6d04:	2b 81       	ldd	r18, Y+3	; 0x03
    6d06:	3c 81       	ldd	r19, Y+4	; 0x04
    6d08:	89 81       	ldd	r24, Y+1	; 0x01
    6d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d0c:	b9 01       	movw	r22, r18
    6d0e:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <_ZNK6String9compareToERKS_>
    6d12:	89 2f       	mov	r24, r25
    6d14:	88 1f       	adc	r24, r24
    6d16:	88 27       	eor	r24, r24
    6d18:	88 1f       	adc	r24, r24
}
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	0f 90       	pop	r0
    6d20:	0f 90       	pop	r0
    6d22:	df 91       	pop	r29
    6d24:	cf 91       	pop	r28
    6d26:	08 95       	ret

00006d28 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
    6d28:	cf 93       	push	r28
    6d2a:	df 93       	push	r29
    6d2c:	00 d0       	rcall	.+0      	; 0x6d2e <_ZNK6StringgtERKS_+0x6>
    6d2e:	1f 92       	push	r1
    6d30:	cd b7       	in	r28, 0x3d	; 61
    6d32:	de b7       	in	r29, 0x3e	; 62
    6d34:	9a 83       	std	Y+2, r25	; 0x02
    6d36:	89 83       	std	Y+1, r24	; 0x01
    6d38:	7c 83       	std	Y+4, r23	; 0x04
    6d3a:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) > 0;
    6d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    6d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    6d40:	89 81       	ldd	r24, Y+1	; 0x01
    6d42:	9a 81       	ldd	r25, Y+2	; 0x02
    6d44:	b9 01       	movw	r22, r18
    6d46:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <_ZNK6String9compareToERKS_>
    6d4a:	21 e0       	ldi	r18, 0x01	; 1
    6d4c:	18 16       	cp	r1, r24
    6d4e:	19 06       	cpc	r1, r25
    6d50:	0c f0       	brlt	.+2      	; 0x6d54 <_ZNK6StringgtERKS_+0x2c>
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	82 2f       	mov	r24, r18
}
    6d56:	0f 90       	pop	r0
    6d58:	0f 90       	pop	r0
    6d5a:	0f 90       	pop	r0
    6d5c:	0f 90       	pop	r0
    6d5e:	df 91       	pop	r29
    6d60:	cf 91       	pop	r28
    6d62:	08 95       	ret

00006d64 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
    6d64:	cf 93       	push	r28
    6d66:	df 93       	push	r29
    6d68:	00 d0       	rcall	.+0      	; 0x6d6a <_ZNK6StringleERKS_+0x6>
    6d6a:	1f 92       	push	r1
    6d6c:	cd b7       	in	r28, 0x3d	; 61
    6d6e:	de b7       	in	r29, 0x3e	; 62
    6d70:	9a 83       	std	Y+2, r25	; 0x02
    6d72:	89 83       	std	Y+1, r24	; 0x01
    6d74:	7c 83       	std	Y+4, r23	; 0x04
    6d76:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) <= 0;
    6d78:	2b 81       	ldd	r18, Y+3	; 0x03
    6d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    6d7c:	89 81       	ldd	r24, Y+1	; 0x01
    6d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d80:	b9 01       	movw	r22, r18
    6d82:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <_ZNK6String9compareToERKS_>
    6d86:	21 e0       	ldi	r18, 0x01	; 1
    6d88:	18 16       	cp	r1, r24
    6d8a:	19 06       	cpc	r1, r25
    6d8c:	0c f4       	brge	.+2      	; 0x6d90 <_ZNK6StringleERKS_+0x2c>
    6d8e:	20 e0       	ldi	r18, 0x00	; 0
    6d90:	82 2f       	mov	r24, r18
}
    6d92:	0f 90       	pop	r0
    6d94:	0f 90       	pop	r0
    6d96:	0f 90       	pop	r0
    6d98:	0f 90       	pop	r0
    6d9a:	df 91       	pop	r29
    6d9c:	cf 91       	pop	r28
    6d9e:	08 95       	ret

00006da0 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
    6da0:	cf 93       	push	r28
    6da2:	df 93       	push	r29
    6da4:	00 d0       	rcall	.+0      	; 0x6da6 <_ZNK6StringgeERKS_+0x6>
    6da6:	1f 92       	push	r1
    6da8:	cd b7       	in	r28, 0x3d	; 61
    6daa:	de b7       	in	r29, 0x3e	; 62
    6dac:	9a 83       	std	Y+2, r25	; 0x02
    6dae:	89 83       	std	Y+1, r24	; 0x01
    6db0:	7c 83       	std	Y+4, r23	; 0x04
    6db2:	6b 83       	std	Y+3, r22	; 0x03
	return compareTo(rhs) >= 0;
    6db4:	2b 81       	ldd	r18, Y+3	; 0x03
    6db6:	3c 81       	ldd	r19, Y+4	; 0x04
    6db8:	89 81       	ldd	r24, Y+1	; 0x01
    6dba:	9a 81       	ldd	r25, Y+2	; 0x02
    6dbc:	b9 01       	movw	r22, r18
    6dbe:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <_ZNK6String9compareToERKS_>
    6dc2:	89 2f       	mov	r24, r25
    6dc4:	80 95       	com	r24
    6dc6:	88 1f       	adc	r24, r24
    6dc8:	88 27       	eor	r24, r24
    6dca:	88 1f       	adc	r24, r24
}
    6dcc:	0f 90       	pop	r0
    6dce:	0f 90       	pop	r0
    6dd0:	0f 90       	pop	r0
    6dd2:	0f 90       	pop	r0
    6dd4:	df 91       	pop	r29
    6dd6:	cf 91       	pop	r28
    6dd8:	08 95       	ret

00006dda <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    6dda:	0f 93       	push	r16
    6ddc:	1f 93       	push	r17
    6dde:	cf 93       	push	r28
    6de0:	df 93       	push	r29
    6de2:	cd b7       	in	r28, 0x3d	; 61
    6de4:	de b7       	in	r29, 0x3e	; 62
    6de6:	28 97       	sbiw	r28, 0x08	; 8
    6de8:	0f b6       	in	r0, 0x3f	; 63
    6dea:	f8 94       	cli
    6dec:	de bf       	out	0x3e, r29	; 62
    6dee:	0f be       	out	0x3f, r0	; 63
    6df0:	cd bf       	out	0x3d, r28	; 61
    6df2:	9e 83       	std	Y+6, r25	; 0x06
    6df4:	8d 83       	std	Y+5, r24	; 0x05
    6df6:	78 87       	std	Y+8, r23	; 0x08
    6df8:	6f 83       	std	Y+7, r22	; 0x07
	if (this == &s2) return 1;
    6dfa:	2d 81       	ldd	r18, Y+5	; 0x05
    6dfc:	3e 81       	ldd	r19, Y+6	; 0x06
    6dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    6e00:	98 85       	ldd	r25, Y+8	; 0x08
    6e02:	28 17       	cp	r18, r24
    6e04:	39 07       	cpc	r19, r25
    6e06:	11 f4       	brne	.+4      	; 0x6e0c <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
    6e08:	81 e0       	ldi	r24, 0x01	; 1
    6e0a:	53 c0       	rjmp	.+166    	; 0x6eb2 <_ZNK6String16equalsIgnoreCaseERKS_+0xd8>
	if (len != s2.len) return 0;
    6e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    6e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    6e10:	fc 01       	movw	r30, r24
    6e12:	24 81       	ldd	r18, Z+4	; 0x04
    6e14:	35 81       	ldd	r19, Z+5	; 0x05
    6e16:	8f 81       	ldd	r24, Y+7	; 0x07
    6e18:	98 85       	ldd	r25, Y+8	; 0x08
    6e1a:	fc 01       	movw	r30, r24
    6e1c:	84 81       	ldd	r24, Z+4	; 0x04
    6e1e:	95 81       	ldd	r25, Z+5	; 0x05
    6e20:	28 17       	cp	r18, r24
    6e22:	39 07       	cpc	r19, r25
    6e24:	11 f0       	breq	.+4      	; 0x6e2a <_ZNK6String16equalsIgnoreCaseERKS_+0x50>
    6e26:	80 e0       	ldi	r24, 0x00	; 0
    6e28:	44 c0       	rjmp	.+136    	; 0x6eb2 <_ZNK6String16equalsIgnoreCaseERKS_+0xd8>
	if (len == 0) return 1;
    6e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e2e:	fc 01       	movw	r30, r24
    6e30:	84 81       	ldd	r24, Z+4	; 0x04
    6e32:	95 81       	ldd	r25, Z+5	; 0x05
    6e34:	89 2b       	or	r24, r25
    6e36:	11 f4       	brne	.+4      	; 0x6e3c <_ZNK6String16equalsIgnoreCaseERKS_+0x62>
    6e38:	81 e0       	ldi	r24, 0x01	; 1
    6e3a:	3b c0       	rjmp	.+118    	; 0x6eb2 <_ZNK6String16equalsIgnoreCaseERKS_+0xd8>
	const char *p1 = buffer;
    6e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    6e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    6e40:	fc 01       	movw	r30, r24
    6e42:	80 81       	ld	r24, Z
    6e44:	91 81       	ldd	r25, Z+1	; 0x01
    6e46:	9a 83       	std	Y+2, r25	; 0x02
    6e48:	89 83       	std	Y+1, r24	; 0x01
	const char *p2 = s2.buffer;
    6e4a:	8f 81       	ldd	r24, Y+7	; 0x07
    6e4c:	98 85       	ldd	r25, Y+8	; 0x08
    6e4e:	fc 01       	movw	r30, r24
    6e50:	80 81       	ld	r24, Z
    6e52:	91 81       	ldd	r25, Z+1	; 0x01
    6e54:	9c 83       	std	Y+4, r25	; 0x04
    6e56:	8b 83       	std	Y+3, r24	; 0x03
	while (*p1) {
    6e58:	89 81       	ldd	r24, Y+1	; 0x01
    6e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e5c:	fc 01       	movw	r30, r24
    6e5e:	80 81       	ld	r24, Z
    6e60:	88 23       	and	r24, r24
    6e62:	31 f1       	breq	.+76     	; 0x6eb0 <_ZNK6String16equalsIgnoreCaseERKS_+0xd6>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    6e64:	89 81       	ldd	r24, Y+1	; 0x01
    6e66:	9a 81       	ldd	r25, Y+2	; 0x02
    6e68:	9c 01       	movw	r18, r24
    6e6a:	2f 5f       	subi	r18, 0xFF	; 255
    6e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e6e:	3a 83       	std	Y+2, r19	; 0x02
    6e70:	29 83       	std	Y+1, r18	; 0x01
    6e72:	fc 01       	movw	r30, r24
    6e74:	80 81       	ld	r24, Z
    6e76:	08 2e       	mov	r0, r24
    6e78:	00 0c       	add	r0, r0
    6e7a:	99 0b       	sbc	r25, r25
    6e7c:	0e 94 a4 48 	call	0x9148	; 0x9148 <tolower>
    6e80:	8c 01       	movw	r16, r24
    6e82:	8b 81       	ldd	r24, Y+3	; 0x03
    6e84:	9c 81       	ldd	r25, Y+4	; 0x04
    6e86:	9c 01       	movw	r18, r24
    6e88:	2f 5f       	subi	r18, 0xFF	; 255
    6e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e8c:	3c 83       	std	Y+4, r19	; 0x04
    6e8e:	2b 83       	std	Y+3, r18	; 0x03
    6e90:	fc 01       	movw	r30, r24
    6e92:	80 81       	ld	r24, Z
    6e94:	08 2e       	mov	r0, r24
    6e96:	00 0c       	add	r0, r0
    6e98:	99 0b       	sbc	r25, r25
    6e9a:	0e 94 a4 48 	call	0x9148	; 0x9148 <tolower>
    6e9e:	21 e0       	ldi	r18, 0x01	; 1
    6ea0:	08 17       	cp	r16, r24
    6ea2:	19 07       	cpc	r17, r25
    6ea4:	09 f4       	brne	.+2      	; 0x6ea8 <_ZNK6String16equalsIgnoreCaseERKS_+0xce>
    6ea6:	20 e0       	ldi	r18, 0x00	; 0
    6ea8:	22 23       	and	r18, r18
    6eaa:	b1 f2       	breq	.-84     	; 0x6e58 <_ZNK6String16equalsIgnoreCaseERKS_+0x7e>
    6eac:	80 e0       	ldi	r24, 0x00	; 0
    6eae:	01 c0       	rjmp	.+2      	; 0x6eb2 <_ZNK6String16equalsIgnoreCaseERKS_+0xd8>
	} 
	return 1;
    6eb0:	81 e0       	ldi	r24, 0x01	; 1
}
    6eb2:	28 96       	adiw	r28, 0x08	; 8
    6eb4:	0f b6       	in	r0, 0x3f	; 63
    6eb6:	f8 94       	cli
    6eb8:	de bf       	out	0x3e, r29	; 62
    6eba:	0f be       	out	0x3f, r0	; 63
    6ebc:	cd bf       	out	0x3d, r28	; 61
    6ebe:	df 91       	pop	r29
    6ec0:	cf 91       	pop	r28
    6ec2:	1f 91       	pop	r17
    6ec4:	0f 91       	pop	r16
    6ec6:	08 95       	ret

00006ec8 <_ZNK6String10startsWithERKS_>:

unsigned char String::startsWith( const String &s2 ) const
{
    6ec8:	cf 93       	push	r28
    6eca:	df 93       	push	r29
    6ecc:	00 d0       	rcall	.+0      	; 0x6ece <_ZNK6String10startsWithERKS_+0x6>
    6ece:	1f 92       	push	r1
    6ed0:	cd b7       	in	r28, 0x3d	; 61
    6ed2:	de b7       	in	r29, 0x3e	; 62
    6ed4:	9a 83       	std	Y+2, r25	; 0x02
    6ed6:	89 83       	std	Y+1, r24	; 0x01
    6ed8:	7c 83       	std	Y+4, r23	; 0x04
    6eda:	6b 83       	std	Y+3, r22	; 0x03
	if (len < s2.len) return 0;
    6edc:	89 81       	ldd	r24, Y+1	; 0x01
    6ede:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee0:	fc 01       	movw	r30, r24
    6ee2:	24 81       	ldd	r18, Z+4	; 0x04
    6ee4:	35 81       	ldd	r19, Z+5	; 0x05
    6ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    6eea:	fc 01       	movw	r30, r24
    6eec:	84 81       	ldd	r24, Z+4	; 0x04
    6eee:	95 81       	ldd	r25, Z+5	; 0x05
    6ef0:	28 17       	cp	r18, r24
    6ef2:	39 07       	cpc	r19, r25
    6ef4:	10 f4       	brcc	.+4      	; 0x6efa <_ZNK6String10startsWithERKS_+0x32>
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
    6ef8:	09 c0       	rjmp	.+18     	; 0x6f0c <_ZNK6String10startsWithERKS_+0x44>
	return startsWith(s2, 0);
    6efa:	2b 81       	ldd	r18, Y+3	; 0x03
    6efc:	3c 81       	ldd	r19, Y+4	; 0x04
    6efe:	89 81       	ldd	r24, Y+1	; 0x01
    6f00:	9a 81       	ldd	r25, Y+2	; 0x02
    6f02:	40 e0       	ldi	r20, 0x00	; 0
    6f04:	50 e0       	ldi	r21, 0x00	; 0
    6f06:	b9 01       	movw	r22, r18
    6f08:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <_ZNK6String10startsWithERKS_j>
}
    6f0c:	0f 90       	pop	r0
    6f0e:	0f 90       	pop	r0
    6f10:	0f 90       	pop	r0
    6f12:	0f 90       	pop	r0
    6f14:	df 91       	pop	r29
    6f16:	cf 91       	pop	r28
    6f18:	08 95       	ret

00006f1a <_ZNK6String10startsWithERKS_j>:

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    6f1a:	cf 93       	push	r28
    6f1c:	df 93       	push	r29
    6f1e:	00 d0       	rcall	.+0      	; 0x6f20 <_ZNK6String10startsWithERKS_j+0x6>
    6f20:	00 d0       	rcall	.+0      	; 0x6f22 <_ZNK6String10startsWithERKS_j+0x8>
    6f22:	cd b7       	in	r28, 0x3d	; 61
    6f24:	de b7       	in	r29, 0x3e	; 62
    6f26:	9a 83       	std	Y+2, r25	; 0x02
    6f28:	89 83       	std	Y+1, r24	; 0x01
    6f2a:	7c 83       	std	Y+4, r23	; 0x04
    6f2c:	6b 83       	std	Y+3, r22	; 0x03
    6f2e:	5e 83       	std	Y+6, r21	; 0x06
    6f30:	4d 83       	std	Y+5, r20	; 0x05
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    6f32:	89 81       	ldd	r24, Y+1	; 0x01
    6f34:	9a 81       	ldd	r25, Y+2	; 0x02
    6f36:	fc 01       	movw	r30, r24
    6f38:	24 81       	ldd	r18, Z+4	; 0x04
    6f3a:	35 81       	ldd	r19, Z+5	; 0x05
    6f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    6f40:	fc 01       	movw	r30, r24
    6f42:	84 81       	ldd	r24, Z+4	; 0x04
    6f44:	95 81       	ldd	r25, Z+5	; 0x05
    6f46:	28 1b       	sub	r18, r24
    6f48:	39 0b       	sbc	r19, r25
    6f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    6f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    6f4e:	28 17       	cp	r18, r24
    6f50:	39 07       	cpc	r19, r25
    6f52:	70 f0       	brcs	.+28     	; 0x6f70 <_ZNK6String10startsWithERKS_j+0x56>
    6f54:	89 81       	ldd	r24, Y+1	; 0x01
    6f56:	9a 81       	ldd	r25, Y+2	; 0x02
    6f58:	fc 01       	movw	r30, r24
    6f5a:	80 81       	ld	r24, Z
    6f5c:	91 81       	ldd	r25, Z+1	; 0x01
    6f5e:	89 2b       	or	r24, r25
    6f60:	39 f0       	breq	.+14     	; 0x6f70 <_ZNK6String10startsWithERKS_j+0x56>
    6f62:	8b 81       	ldd	r24, Y+3	; 0x03
    6f64:	9c 81       	ldd	r25, Y+4	; 0x04
    6f66:	fc 01       	movw	r30, r24
    6f68:	80 81       	ld	r24, Z
    6f6a:	91 81       	ldd	r25, Z+1	; 0x01
    6f6c:	89 2b       	or	r24, r25
    6f6e:	11 f4       	brne	.+4      	; 0x6f74 <_ZNK6String10startsWithERKS_j+0x5a>
    6f70:	80 e0       	ldi	r24, 0x00	; 0
    6f72:	1a c0       	rjmp	.+52     	; 0x6fa8 <_ZNK6String10startsWithERKS_j+0x8e>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    6f74:	8b 81       	ldd	r24, Y+3	; 0x03
    6f76:	9c 81       	ldd	r25, Y+4	; 0x04
    6f78:	fc 01       	movw	r30, r24
    6f7a:	44 81       	ldd	r20, Z+4	; 0x04
    6f7c:	55 81       	ldd	r21, Z+5	; 0x05
    6f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    6f80:	9c 81       	ldd	r25, Y+4	; 0x04
    6f82:	fc 01       	movw	r30, r24
    6f84:	60 81       	ld	r22, Z
    6f86:	71 81       	ldd	r23, Z+1	; 0x01
    6f88:	89 81       	ldd	r24, Y+1	; 0x01
    6f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f8c:	fc 01       	movw	r30, r24
    6f8e:	20 81       	ld	r18, Z
    6f90:	31 81       	ldd	r19, Z+1	; 0x01
    6f92:	8d 81       	ldd	r24, Y+5	; 0x05
    6f94:	9e 81       	ldd	r25, Y+6	; 0x06
    6f96:	82 0f       	add	r24, r18
    6f98:	93 1f       	adc	r25, r19
    6f9a:	0e 94 10 49 	call	0x9220	; 0x9220 <strncmp>
    6f9e:	21 e0       	ldi	r18, 0x01	; 1
    6fa0:	89 2b       	or	r24, r25
    6fa2:	09 f0       	breq	.+2      	; 0x6fa6 <_ZNK6String10startsWithERKS_j+0x8c>
    6fa4:	20 e0       	ldi	r18, 0x00	; 0
    6fa6:	82 2f       	mov	r24, r18
}
    6fa8:	26 96       	adiw	r28, 0x06	; 6
    6faa:	0f b6       	in	r0, 0x3f	; 63
    6fac:	f8 94       	cli
    6fae:	de bf       	out	0x3e, r29	; 62
    6fb0:	0f be       	out	0x3f, r0	; 63
    6fb2:	cd bf       	out	0x3d, r28	; 61
    6fb4:	df 91       	pop	r29
    6fb6:	cf 91       	pop	r28
    6fb8:	08 95       	ret

00006fba <_ZNK6String8endsWithERKS_>:

unsigned char String::endsWith( const String &s2 ) const
{
    6fba:	cf 93       	push	r28
    6fbc:	df 93       	push	r29
    6fbe:	00 d0       	rcall	.+0      	; 0x6fc0 <_ZNK6String8endsWithERKS_+0x6>
    6fc0:	1f 92       	push	r1
    6fc2:	cd b7       	in	r28, 0x3d	; 61
    6fc4:	de b7       	in	r29, 0x3e	; 62
    6fc6:	9a 83       	std	Y+2, r25	; 0x02
    6fc8:	89 83       	std	Y+1, r24	; 0x01
    6fca:	7c 83       	std	Y+4, r23	; 0x04
    6fcc:	6b 83       	std	Y+3, r22	; 0x03
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    6fce:	89 81       	ldd	r24, Y+1	; 0x01
    6fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd2:	fc 01       	movw	r30, r24
    6fd4:	24 81       	ldd	r18, Z+4	; 0x04
    6fd6:	35 81       	ldd	r19, Z+5	; 0x05
    6fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    6fda:	9c 81       	ldd	r25, Y+4	; 0x04
    6fdc:	fc 01       	movw	r30, r24
    6fde:	84 81       	ldd	r24, Z+4	; 0x04
    6fe0:	95 81       	ldd	r25, Z+5	; 0x05
    6fe2:	28 17       	cp	r18, r24
    6fe4:	39 07       	cpc	r19, r25
    6fe6:	70 f0       	brcs	.+28     	; 0x7004 <_ZNK6String8endsWithERKS_+0x4a>
    6fe8:	89 81       	ldd	r24, Y+1	; 0x01
    6fea:	9a 81       	ldd	r25, Y+2	; 0x02
    6fec:	fc 01       	movw	r30, r24
    6fee:	80 81       	ld	r24, Z
    6ff0:	91 81       	ldd	r25, Z+1	; 0x01
    6ff2:	89 2b       	or	r24, r25
    6ff4:	39 f0       	breq	.+14     	; 0x7004 <_ZNK6String8endsWithERKS_+0x4a>
    6ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    6ffa:	fc 01       	movw	r30, r24
    6ffc:	80 81       	ld	r24, Z
    6ffe:	91 81       	ldd	r25, Z+1	; 0x01
    7000:	89 2b       	or	r24, r25
    7002:	11 f4       	brne	.+4      	; 0x7008 <_ZNK6String8endsWithERKS_+0x4e>
    7004:	80 e0       	ldi	r24, 0x00	; 0
    7006:	21 c0       	rjmp	.+66     	; 0x704a <_ZNK6String8endsWithERKS_+0x90>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    7008:	8b 81       	ldd	r24, Y+3	; 0x03
    700a:	9c 81       	ldd	r25, Y+4	; 0x04
    700c:	fc 01       	movw	r30, r24
    700e:	60 81       	ld	r22, Z
    7010:	71 81       	ldd	r23, Z+1	; 0x01
    7012:	89 81       	ldd	r24, Y+1	; 0x01
    7014:	9a 81       	ldd	r25, Y+2	; 0x02
    7016:	fc 01       	movw	r30, r24
    7018:	20 81       	ld	r18, Z
    701a:	31 81       	ldd	r19, Z+1	; 0x01
    701c:	89 81       	ldd	r24, Y+1	; 0x01
    701e:	9a 81       	ldd	r25, Y+2	; 0x02
    7020:	fc 01       	movw	r30, r24
    7022:	44 81       	ldd	r20, Z+4	; 0x04
    7024:	55 81       	ldd	r21, Z+5	; 0x05
    7026:	8b 81       	ldd	r24, Y+3	; 0x03
    7028:	9c 81       	ldd	r25, Y+4	; 0x04
    702a:	fc 01       	movw	r30, r24
    702c:	84 81       	ldd	r24, Z+4	; 0x04
    702e:	95 81       	ldd	r25, Z+5	; 0x05
    7030:	fa 01       	movw	r30, r20
    7032:	e8 1b       	sub	r30, r24
    7034:	f9 0b       	sbc	r31, r25
    7036:	cf 01       	movw	r24, r30
    7038:	82 0f       	add	r24, r18
    703a:	93 1f       	adc	r25, r19
    703c:	0e 94 f7 48 	call	0x91ee	; 0x91ee <strcmp>
    7040:	21 e0       	ldi	r18, 0x01	; 1
    7042:	89 2b       	or	r24, r25
    7044:	09 f0       	breq	.+2      	; 0x7048 <_ZNK6String8endsWithERKS_+0x8e>
    7046:	20 e0       	ldi	r18, 0x00	; 0
    7048:	82 2f       	mov	r24, r18
}
    704a:	0f 90       	pop	r0
    704c:	0f 90       	pop	r0
    704e:	0f 90       	pop	r0
    7050:	0f 90       	pop	r0
    7052:	df 91       	pop	r29
    7054:	cf 91       	pop	r28
    7056:	08 95       	ret

00007058 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    7058:	cf 93       	push	r28
    705a:	df 93       	push	r29
    705c:	00 d0       	rcall	.+0      	; 0x705e <_ZNK6String6charAtEj+0x6>
    705e:	1f 92       	push	r1
    7060:	cd b7       	in	r28, 0x3d	; 61
    7062:	de b7       	in	r29, 0x3e	; 62
    7064:	9a 83       	std	Y+2, r25	; 0x02
    7066:	89 83       	std	Y+1, r24	; 0x01
    7068:	7c 83       	std	Y+4, r23	; 0x04
    706a:	6b 83       	std	Y+3, r22	; 0x03
	return operator[](loc);
    706c:	2b 81       	ldd	r18, Y+3	; 0x03
    706e:	3c 81       	ldd	r19, Y+4	; 0x04
    7070:	89 81       	ldd	r24, Y+1	; 0x01
    7072:	9a 81       	ldd	r25, Y+2	; 0x02
    7074:	b9 01       	movw	r22, r18
    7076:	0e 94 9f 38 	call	0x713e	; 0x713e <_ZNK6StringixEj>
}
    707a:	0f 90       	pop	r0
    707c:	0f 90       	pop	r0
    707e:	0f 90       	pop	r0
    7080:	0f 90       	pop	r0
    7082:	df 91       	pop	r29
    7084:	cf 91       	pop	r28
    7086:	08 95       	ret

00007088 <_ZN6String9setCharAtEjc>:

void String::setCharAt(unsigned int loc, char c) 
{
    7088:	cf 93       	push	r28
    708a:	df 93       	push	r29
    708c:	00 d0       	rcall	.+0      	; 0x708e <_ZN6String9setCharAtEjc+0x6>
    708e:	1f 92       	push	r1
    7090:	1f 92       	push	r1
    7092:	cd b7       	in	r28, 0x3d	; 61
    7094:	de b7       	in	r29, 0x3e	; 62
    7096:	9a 83       	std	Y+2, r25	; 0x02
    7098:	89 83       	std	Y+1, r24	; 0x01
    709a:	7c 83       	std	Y+4, r23	; 0x04
    709c:	6b 83       	std	Y+3, r22	; 0x03
    709e:	4d 83       	std	Y+5, r20	; 0x05
	if (loc < len) buffer[loc] = c;
    70a0:	89 81       	ldd	r24, Y+1	; 0x01
    70a2:	9a 81       	ldd	r25, Y+2	; 0x02
    70a4:	fc 01       	movw	r30, r24
    70a6:	24 81       	ldd	r18, Z+4	; 0x04
    70a8:	35 81       	ldd	r19, Z+5	; 0x05
    70aa:	8b 81       	ldd	r24, Y+3	; 0x03
    70ac:	9c 81       	ldd	r25, Y+4	; 0x04
    70ae:	82 17       	cp	r24, r18
    70b0:	93 07       	cpc	r25, r19
    70b2:	60 f4       	brcc	.+24     	; 0x70cc <_ZN6String9setCharAtEjc+0x44>
    70b4:	89 81       	ldd	r24, Y+1	; 0x01
    70b6:	9a 81       	ldd	r25, Y+2	; 0x02
    70b8:	fc 01       	movw	r30, r24
    70ba:	20 81       	ld	r18, Z
    70bc:	31 81       	ldd	r19, Z+1	; 0x01
    70be:	8b 81       	ldd	r24, Y+3	; 0x03
    70c0:	9c 81       	ldd	r25, Y+4	; 0x04
    70c2:	82 0f       	add	r24, r18
    70c4:	93 1f       	adc	r25, r19
    70c6:	2d 81       	ldd	r18, Y+5	; 0x05
    70c8:	fc 01       	movw	r30, r24
    70ca:	20 83       	st	Z, r18
}
    70cc:	00 00       	nop
    70ce:	0f 90       	pop	r0
    70d0:	0f 90       	pop	r0
    70d2:	0f 90       	pop	r0
    70d4:	0f 90       	pop	r0
    70d6:	0f 90       	pop	r0
    70d8:	df 91       	pop	r29
    70da:	cf 91       	pop	r28
    70dc:	08 95       	ret

000070de <_ZN6StringixEj>:

char & String::operator[](unsigned int index)
{
    70de:	cf 93       	push	r28
    70e0:	df 93       	push	r29
    70e2:	00 d0       	rcall	.+0      	; 0x70e4 <_ZN6StringixEj+0x6>
    70e4:	1f 92       	push	r1
    70e6:	cd b7       	in	r28, 0x3d	; 61
    70e8:	de b7       	in	r29, 0x3e	; 62
    70ea:	9a 83       	std	Y+2, r25	; 0x02
    70ec:	89 83       	std	Y+1, r24	; 0x01
    70ee:	7c 83       	std	Y+4, r23	; 0x04
    70f0:	6b 83       	std	Y+3, r22	; 0x03
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    70f2:	89 81       	ldd	r24, Y+1	; 0x01
    70f4:	9a 81       	ldd	r25, Y+2	; 0x02
    70f6:	fc 01       	movw	r30, r24
    70f8:	24 81       	ldd	r18, Z+4	; 0x04
    70fa:	35 81       	ldd	r19, Z+5	; 0x05
    70fc:	8b 81       	ldd	r24, Y+3	; 0x03
    70fe:	9c 81       	ldd	r25, Y+4	; 0x04
    7100:	82 17       	cp	r24, r18
    7102:	93 07       	cpc	r25, r19
    7104:	38 f4       	brcc	.+14     	; 0x7114 <_ZN6StringixEj+0x36>
    7106:	89 81       	ldd	r24, Y+1	; 0x01
    7108:	9a 81       	ldd	r25, Y+2	; 0x02
    710a:	fc 01       	movw	r30, r24
    710c:	80 81       	ld	r24, Z
    710e:	91 81       	ldd	r25, Z+1	; 0x01
    7110:	89 2b       	or	r24, r25
    7112:	29 f4       	brne	.+10     	; 0x711e <_ZN6StringixEj+0x40>
		dummy_writable_char = 0;
    7114:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <_ZZN6StringixEjE19dummy_writable_char>
		return dummy_writable_char;
    7118:	8f e4       	ldi	r24, 0x4F	; 79
    711a:	96 e0       	ldi	r25, 0x06	; 6
    711c:	09 c0       	rjmp	.+18     	; 0x7130 <_ZN6StringixEj+0x52>
	}
	return buffer[index];
    711e:	89 81       	ldd	r24, Y+1	; 0x01
    7120:	9a 81       	ldd	r25, Y+2	; 0x02
    7122:	fc 01       	movw	r30, r24
    7124:	20 81       	ld	r18, Z
    7126:	31 81       	ldd	r19, Z+1	; 0x01
    7128:	8b 81       	ldd	r24, Y+3	; 0x03
    712a:	9c 81       	ldd	r25, Y+4	; 0x04
    712c:	82 0f       	add	r24, r18
    712e:	93 1f       	adc	r25, r19
}
    7130:	0f 90       	pop	r0
    7132:	0f 90       	pop	r0
    7134:	0f 90       	pop	r0
    7136:	0f 90       	pop	r0
    7138:	df 91       	pop	r29
    713a:	cf 91       	pop	r28
    713c:	08 95       	ret

0000713e <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29
    7142:	00 d0       	rcall	.+0      	; 0x7144 <_ZNK6StringixEj+0x6>
    7144:	1f 92       	push	r1
    7146:	cd b7       	in	r28, 0x3d	; 61
    7148:	de b7       	in	r29, 0x3e	; 62
    714a:	9a 83       	std	Y+2, r25	; 0x02
    714c:	89 83       	std	Y+1, r24	; 0x01
    714e:	7c 83       	std	Y+4, r23	; 0x04
    7150:	6b 83       	std	Y+3, r22	; 0x03
	if (index >= len || !buffer) return 0;
    7152:	89 81       	ldd	r24, Y+1	; 0x01
    7154:	9a 81       	ldd	r25, Y+2	; 0x02
    7156:	fc 01       	movw	r30, r24
    7158:	24 81       	ldd	r18, Z+4	; 0x04
    715a:	35 81       	ldd	r19, Z+5	; 0x05
    715c:	8b 81       	ldd	r24, Y+3	; 0x03
    715e:	9c 81       	ldd	r25, Y+4	; 0x04
    7160:	82 17       	cp	r24, r18
    7162:	93 07       	cpc	r25, r19
    7164:	38 f4       	brcc	.+14     	; 0x7174 <_ZNK6StringixEj+0x36>
    7166:	89 81       	ldd	r24, Y+1	; 0x01
    7168:	9a 81       	ldd	r25, Y+2	; 0x02
    716a:	fc 01       	movw	r30, r24
    716c:	80 81       	ld	r24, Z
    716e:	91 81       	ldd	r25, Z+1	; 0x01
    7170:	89 2b       	or	r24, r25
    7172:	11 f4       	brne	.+4      	; 0x7178 <_ZNK6StringixEj+0x3a>
    7174:	80 e0       	ldi	r24, 0x00	; 0
    7176:	0b c0       	rjmp	.+22     	; 0x718e <_ZNK6StringixEj+0x50>
	return buffer[index];
    7178:	89 81       	ldd	r24, Y+1	; 0x01
    717a:	9a 81       	ldd	r25, Y+2	; 0x02
    717c:	fc 01       	movw	r30, r24
    717e:	20 81       	ld	r18, Z
    7180:	31 81       	ldd	r19, Z+1	; 0x01
    7182:	8b 81       	ldd	r24, Y+3	; 0x03
    7184:	9c 81       	ldd	r25, Y+4	; 0x04
    7186:	82 0f       	add	r24, r18
    7188:	93 1f       	adc	r25, r19
    718a:	fc 01       	movw	r30, r24
    718c:	80 81       	ld	r24, Z
}
    718e:	0f 90       	pop	r0
    7190:	0f 90       	pop	r0
    7192:	0f 90       	pop	r0
    7194:	0f 90       	pop	r0
    7196:	df 91       	pop	r29
    7198:	cf 91       	pop	r28
    719a:	08 95       	ret

0000719c <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    719c:	cf 93       	push	r28
    719e:	df 93       	push	r29
    71a0:	cd b7       	in	r28, 0x3d	; 61
    71a2:	de b7       	in	r29, 0x3e	; 62
    71a4:	2a 97       	sbiw	r28, 0x0a	; 10
    71a6:	0f b6       	in	r0, 0x3f	; 63
    71a8:	f8 94       	cli
    71aa:	de bf       	out	0x3e, r29	; 62
    71ac:	0f be       	out	0x3f, r0	; 63
    71ae:	cd bf       	out	0x3d, r28	; 61
    71b0:	9c 83       	std	Y+4, r25	; 0x04
    71b2:	8b 83       	std	Y+3, r24	; 0x03
    71b4:	7e 83       	std	Y+6, r23	; 0x06
    71b6:	6d 83       	std	Y+5, r22	; 0x05
    71b8:	58 87       	std	Y+8, r21	; 0x08
    71ba:	4f 83       	std	Y+7, r20	; 0x07
    71bc:	3a 87       	std	Y+10, r19	; 0x0a
    71be:	29 87       	std	Y+9, r18	; 0x09
	if (!bufsize || !buf) return;
    71c0:	8f 81       	ldd	r24, Y+7	; 0x07
    71c2:	98 85       	ldd	r25, Y+8	; 0x08
    71c4:	89 2b       	or	r24, r25
    71c6:	09 f4       	brne	.+2      	; 0x71ca <_ZNK6String8getBytesEPhjj+0x2e>
    71c8:	4d c0       	rjmp	.+154    	; 0x7264 <_ZNK6String8getBytesEPhjj+0xc8>
    71ca:	8d 81       	ldd	r24, Y+5	; 0x05
    71cc:	9e 81       	ldd	r25, Y+6	; 0x06
    71ce:	89 2b       	or	r24, r25
    71d0:	09 f4       	brne	.+2      	; 0x71d4 <_ZNK6String8getBytesEPhjj+0x38>
    71d2:	48 c0       	rjmp	.+144    	; 0x7264 <_ZNK6String8getBytesEPhjj+0xc8>
	if (index >= len) {
    71d4:	8b 81       	ldd	r24, Y+3	; 0x03
    71d6:	9c 81       	ldd	r25, Y+4	; 0x04
    71d8:	fc 01       	movw	r30, r24
    71da:	24 81       	ldd	r18, Z+4	; 0x04
    71dc:	35 81       	ldd	r19, Z+5	; 0x05
    71de:	89 85       	ldd	r24, Y+9	; 0x09
    71e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    71e2:	82 17       	cp	r24, r18
    71e4:	93 07       	cpc	r25, r19
    71e6:	28 f0       	brcs	.+10     	; 0x71f2 <_ZNK6String8getBytesEPhjj+0x56>
		buf[0] = 0;
    71e8:	8d 81       	ldd	r24, Y+5	; 0x05
    71ea:	9e 81       	ldd	r25, Y+6	; 0x06
    71ec:	fc 01       	movw	r30, r24
    71ee:	10 82       	st	Z, r1
		return;
    71f0:	3a c0       	rjmp	.+116    	; 0x7266 <_ZNK6String8getBytesEPhjj+0xca>
	}
	unsigned int n = bufsize - 1;
    71f2:	8f 81       	ldd	r24, Y+7	; 0x07
    71f4:	98 85       	ldd	r25, Y+8	; 0x08
    71f6:	01 97       	sbiw	r24, 0x01	; 1
    71f8:	9a 83       	std	Y+2, r25	; 0x02
    71fa:	89 83       	std	Y+1, r24	; 0x01
	if (n > len - index) n = len - index;
    71fc:	8b 81       	ldd	r24, Y+3	; 0x03
    71fe:	9c 81       	ldd	r25, Y+4	; 0x04
    7200:	fc 01       	movw	r30, r24
    7202:	24 81       	ldd	r18, Z+4	; 0x04
    7204:	35 81       	ldd	r19, Z+5	; 0x05
    7206:	89 85       	ldd	r24, Y+9	; 0x09
    7208:	9a 85       	ldd	r25, Y+10	; 0x0a
    720a:	28 1b       	sub	r18, r24
    720c:	39 0b       	sbc	r19, r25
    720e:	89 81       	ldd	r24, Y+1	; 0x01
    7210:	9a 81       	ldd	r25, Y+2	; 0x02
    7212:	28 17       	cp	r18, r24
    7214:	39 07       	cpc	r19, r25
    7216:	68 f4       	brcc	.+26     	; 0x7232 <_ZNK6String8getBytesEPhjj+0x96>
    7218:	8b 81       	ldd	r24, Y+3	; 0x03
    721a:	9c 81       	ldd	r25, Y+4	; 0x04
    721c:	fc 01       	movw	r30, r24
    721e:	24 81       	ldd	r18, Z+4	; 0x04
    7220:	35 81       	ldd	r19, Z+5	; 0x05
    7222:	89 85       	ldd	r24, Y+9	; 0x09
    7224:	9a 85       	ldd	r25, Y+10	; 0x0a
    7226:	a9 01       	movw	r20, r18
    7228:	48 1b       	sub	r20, r24
    722a:	59 0b       	sbc	r21, r25
    722c:	ca 01       	movw	r24, r20
    722e:	9a 83       	std	Y+2, r25	; 0x02
    7230:	89 83       	std	Y+1, r24	; 0x01
	strncpy((char *)buf, buffer + index, n);
    7232:	8b 81       	ldd	r24, Y+3	; 0x03
    7234:	9c 81       	ldd	r25, Y+4	; 0x04
    7236:	fc 01       	movw	r30, r24
    7238:	20 81       	ld	r18, Z
    723a:	31 81       	ldd	r19, Z+1	; 0x01
    723c:	89 85       	ldd	r24, Y+9	; 0x09
    723e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7240:	28 0f       	add	r18, r24
    7242:	39 1f       	adc	r19, r25
    7244:	49 81       	ldd	r20, Y+1	; 0x01
    7246:	5a 81       	ldd	r21, Y+2	; 0x02
    7248:	8d 81       	ldd	r24, Y+5	; 0x05
    724a:	9e 81       	ldd	r25, Y+6	; 0x06
    724c:	b9 01       	movw	r22, r18
    724e:	0e 94 1e 49 	call	0x923c	; 0x923c <strncpy>
	buf[n] = 0;
    7252:	2d 81       	ldd	r18, Y+5	; 0x05
    7254:	3e 81       	ldd	r19, Y+6	; 0x06
    7256:	89 81       	ldd	r24, Y+1	; 0x01
    7258:	9a 81       	ldd	r25, Y+2	; 0x02
    725a:	82 0f       	add	r24, r18
    725c:	93 1f       	adc	r25, r19
    725e:	fc 01       	movw	r30, r24
    7260:	10 82       	st	Z, r1
    7262:	01 c0       	rjmp	.+2      	; 0x7266 <_ZNK6String8getBytesEPhjj+0xca>
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    7264:	00 00       	nop
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    7266:	2a 96       	adiw	r28, 0x0a	; 10
    7268:	0f b6       	in	r0, 0x3f	; 63
    726a:	f8 94       	cli
    726c:	de bf       	out	0x3e, r29	; 62
    726e:	0f be       	out	0x3f, r0	; 63
    7270:	cd bf       	out	0x3d, r28	; 61
    7272:	df 91       	pop	r29
    7274:	cf 91       	pop	r28
    7276:	08 95       	ret

00007278 <_ZNK6String7indexOfEc>:
/*********************************************/
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
    7278:	cf 93       	push	r28
    727a:	df 93       	push	r29
    727c:	00 d0       	rcall	.+0      	; 0x727e <_ZNK6String7indexOfEc+0x6>
    727e:	cd b7       	in	r28, 0x3d	; 61
    7280:	de b7       	in	r29, 0x3e	; 62
    7282:	9a 83       	std	Y+2, r25	; 0x02
    7284:	89 83       	std	Y+1, r24	; 0x01
    7286:	6b 83       	std	Y+3, r22	; 0x03
	return indexOf(c, 0);
    7288:	89 81       	ldd	r24, Y+1	; 0x01
    728a:	9a 81       	ldd	r25, Y+2	; 0x02
    728c:	40 e0       	ldi	r20, 0x00	; 0
    728e:	50 e0       	ldi	r21, 0x00	; 0
    7290:	6b 81       	ldd	r22, Y+3	; 0x03
    7292:	0e 94 51 39 	call	0x72a2	; 0x72a2 <_ZNK6String7indexOfEcj>
}
    7296:	0f 90       	pop	r0
    7298:	0f 90       	pop	r0
    729a:	0f 90       	pop	r0
    729c:	df 91       	pop	r29
    729e:	cf 91       	pop	r28
    72a0:	08 95       	ret

000072a2 <_ZNK6String7indexOfEcj>:

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    72a2:	cf 93       	push	r28
    72a4:	df 93       	push	r29
    72a6:	cd b7       	in	r28, 0x3d	; 61
    72a8:	de b7       	in	r29, 0x3e	; 62
    72aa:	27 97       	sbiw	r28, 0x07	; 7
    72ac:	0f b6       	in	r0, 0x3f	; 63
    72ae:	f8 94       	cli
    72b0:	de bf       	out	0x3e, r29	; 62
    72b2:	0f be       	out	0x3f, r0	; 63
    72b4:	cd bf       	out	0x3d, r28	; 61
    72b6:	9c 83       	std	Y+4, r25	; 0x04
    72b8:	8b 83       	std	Y+3, r24	; 0x03
    72ba:	6d 83       	std	Y+5, r22	; 0x05
    72bc:	5f 83       	std	Y+7, r21	; 0x07
    72be:	4e 83       	std	Y+6, r20	; 0x06
	if (fromIndex >= len) return -1;
    72c0:	8b 81       	ldd	r24, Y+3	; 0x03
    72c2:	9c 81       	ldd	r25, Y+4	; 0x04
    72c4:	fc 01       	movw	r30, r24
    72c6:	24 81       	ldd	r18, Z+4	; 0x04
    72c8:	35 81       	ldd	r19, Z+5	; 0x05
    72ca:	8e 81       	ldd	r24, Y+6	; 0x06
    72cc:	9f 81       	ldd	r25, Y+7	; 0x07
    72ce:	82 17       	cp	r24, r18
    72d0:	93 07       	cpc	r25, r19
    72d2:	18 f0       	brcs	.+6      	; 0x72da <_ZNK6String7indexOfEcj+0x38>
    72d4:	8f ef       	ldi	r24, 0xFF	; 255
    72d6:	9f ef       	ldi	r25, 0xFF	; 255
    72d8:	22 c0       	rjmp	.+68     	; 0x731e <_ZNK6String7indexOfEcj+0x7c>
	const char* temp = strchr(buffer + fromIndex, ch);
    72da:	8d 81       	ldd	r24, Y+5	; 0x05
    72dc:	48 2f       	mov	r20, r24
    72de:	88 0f       	add	r24, r24
    72e0:	55 0b       	sbc	r21, r21
    72e2:	8b 81       	ldd	r24, Y+3	; 0x03
    72e4:	9c 81       	ldd	r25, Y+4	; 0x04
    72e6:	fc 01       	movw	r30, r24
    72e8:	20 81       	ld	r18, Z
    72ea:	31 81       	ldd	r19, Z+1	; 0x01
    72ec:	8e 81       	ldd	r24, Y+6	; 0x06
    72ee:	9f 81       	ldd	r25, Y+7	; 0x07
    72f0:	82 0f       	add	r24, r18
    72f2:	93 1f       	adc	r25, r19
    72f4:	ba 01       	movw	r22, r20
    72f6:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <strchr>
    72fa:	9a 83       	std	Y+2, r25	; 0x02
    72fc:	89 83       	std	Y+1, r24	; 0x01
	if (temp == NULL) return -1;
    72fe:	89 81       	ldd	r24, Y+1	; 0x01
    7300:	9a 81       	ldd	r25, Y+2	; 0x02
    7302:	89 2b       	or	r24, r25
    7304:	19 f4       	brne	.+6      	; 0x730c <_ZNK6String7indexOfEcj+0x6a>
    7306:	8f ef       	ldi	r24, 0xFF	; 255
    7308:	9f ef       	ldi	r25, 0xFF	; 255
    730a:	09 c0       	rjmp	.+18     	; 0x731e <_ZNK6String7indexOfEcj+0x7c>
	return temp - buffer;
    730c:	89 81       	ldd	r24, Y+1	; 0x01
    730e:	9a 81       	ldd	r25, Y+2	; 0x02
    7310:	2b 81       	ldd	r18, Y+3	; 0x03
    7312:	3c 81       	ldd	r19, Y+4	; 0x04
    7314:	f9 01       	movw	r30, r18
    7316:	20 81       	ld	r18, Z
    7318:	31 81       	ldd	r19, Z+1	; 0x01
    731a:	82 1b       	sub	r24, r18
    731c:	93 0b       	sbc	r25, r19
}
    731e:	27 96       	adiw	r28, 0x07	; 7
    7320:	0f b6       	in	r0, 0x3f	; 63
    7322:	f8 94       	cli
    7324:	de bf       	out	0x3e, r29	; 62
    7326:	0f be       	out	0x3f, r0	; 63
    7328:	cd bf       	out	0x3d, r28	; 61
    732a:	df 91       	pop	r29
    732c:	cf 91       	pop	r28
    732e:	08 95       	ret

00007330 <_ZNK6String7indexOfERKS_>:

int String::indexOf(const String &s2) const
{
    7330:	cf 93       	push	r28
    7332:	df 93       	push	r29
    7334:	00 d0       	rcall	.+0      	; 0x7336 <_ZNK6String7indexOfERKS_+0x6>
    7336:	1f 92       	push	r1
    7338:	cd b7       	in	r28, 0x3d	; 61
    733a:	de b7       	in	r29, 0x3e	; 62
    733c:	9a 83       	std	Y+2, r25	; 0x02
    733e:	89 83       	std	Y+1, r24	; 0x01
    7340:	7c 83       	std	Y+4, r23	; 0x04
    7342:	6b 83       	std	Y+3, r22	; 0x03
	return indexOf(s2, 0);
    7344:	2b 81       	ldd	r18, Y+3	; 0x03
    7346:	3c 81       	ldd	r19, Y+4	; 0x04
    7348:	89 81       	ldd	r24, Y+1	; 0x01
    734a:	9a 81       	ldd	r25, Y+2	; 0x02
    734c:	40 e0       	ldi	r20, 0x00	; 0
    734e:	50 e0       	ldi	r21, 0x00	; 0
    7350:	b9 01       	movw	r22, r18
    7352:	0e 94 b2 39 	call	0x7364	; 0x7364 <_ZNK6String7indexOfERKS_j>
}
    7356:	0f 90       	pop	r0
    7358:	0f 90       	pop	r0
    735a:	0f 90       	pop	r0
    735c:	0f 90       	pop	r0
    735e:	df 91       	pop	r29
    7360:	cf 91       	pop	r28
    7362:	08 95       	ret

00007364 <_ZNK6String7indexOfERKS_j>:

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    7364:	cf 93       	push	r28
    7366:	df 93       	push	r29
    7368:	cd b7       	in	r28, 0x3d	; 61
    736a:	de b7       	in	r29, 0x3e	; 62
    736c:	28 97       	sbiw	r28, 0x08	; 8
    736e:	0f b6       	in	r0, 0x3f	; 63
    7370:	f8 94       	cli
    7372:	de bf       	out	0x3e, r29	; 62
    7374:	0f be       	out	0x3f, r0	; 63
    7376:	cd bf       	out	0x3d, r28	; 61
    7378:	9c 83       	std	Y+4, r25	; 0x04
    737a:	8b 83       	std	Y+3, r24	; 0x03
    737c:	7e 83       	std	Y+6, r23	; 0x06
    737e:	6d 83       	std	Y+5, r22	; 0x05
    7380:	58 87       	std	Y+8, r21	; 0x08
    7382:	4f 83       	std	Y+7, r20	; 0x07
	if (fromIndex >= len) return -1;
    7384:	8b 81       	ldd	r24, Y+3	; 0x03
    7386:	9c 81       	ldd	r25, Y+4	; 0x04
    7388:	fc 01       	movw	r30, r24
    738a:	24 81       	ldd	r18, Z+4	; 0x04
    738c:	35 81       	ldd	r19, Z+5	; 0x05
    738e:	8f 81       	ldd	r24, Y+7	; 0x07
    7390:	98 85       	ldd	r25, Y+8	; 0x08
    7392:	82 17       	cp	r24, r18
    7394:	93 07       	cpc	r25, r19
    7396:	18 f0       	brcs	.+6      	; 0x739e <_ZNK6String7indexOfERKS_j+0x3a>
    7398:	8f ef       	ldi	r24, 0xFF	; 255
    739a:	9f ef       	ldi	r25, 0xFF	; 255
    739c:	23 c0       	rjmp	.+70     	; 0x73e4 <_ZNK6String7indexOfERKS_j+0x80>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    739e:	8d 81       	ldd	r24, Y+5	; 0x05
    73a0:	9e 81       	ldd	r25, Y+6	; 0x06
    73a2:	fc 01       	movw	r30, r24
    73a4:	40 81       	ld	r20, Z
    73a6:	51 81       	ldd	r21, Z+1	; 0x01
    73a8:	8b 81       	ldd	r24, Y+3	; 0x03
    73aa:	9c 81       	ldd	r25, Y+4	; 0x04
    73ac:	fc 01       	movw	r30, r24
    73ae:	20 81       	ld	r18, Z
    73b0:	31 81       	ldd	r19, Z+1	; 0x01
    73b2:	8f 81       	ldd	r24, Y+7	; 0x07
    73b4:	98 85       	ldd	r25, Y+8	; 0x08
    73b6:	82 0f       	add	r24, r18
    73b8:	93 1f       	adc	r25, r19
    73ba:	ba 01       	movw	r22, r20
    73bc:	0e 94 38 49 	call	0x9270	; 0x9270 <strstr>
    73c0:	9a 83       	std	Y+2, r25	; 0x02
    73c2:	89 83       	std	Y+1, r24	; 0x01
	if (found == NULL) return -1;
    73c4:	89 81       	ldd	r24, Y+1	; 0x01
    73c6:	9a 81       	ldd	r25, Y+2	; 0x02
    73c8:	89 2b       	or	r24, r25
    73ca:	19 f4       	brne	.+6      	; 0x73d2 <_ZNK6String7indexOfERKS_j+0x6e>
    73cc:	8f ef       	ldi	r24, 0xFF	; 255
    73ce:	9f ef       	ldi	r25, 0xFF	; 255
    73d0:	09 c0       	rjmp	.+18     	; 0x73e4 <_ZNK6String7indexOfERKS_j+0x80>
	return found - buffer;
    73d2:	89 81       	ldd	r24, Y+1	; 0x01
    73d4:	9a 81       	ldd	r25, Y+2	; 0x02
    73d6:	2b 81       	ldd	r18, Y+3	; 0x03
    73d8:	3c 81       	ldd	r19, Y+4	; 0x04
    73da:	f9 01       	movw	r30, r18
    73dc:	20 81       	ld	r18, Z
    73de:	31 81       	ldd	r19, Z+1	; 0x01
    73e0:	82 1b       	sub	r24, r18
    73e2:	93 0b       	sbc	r25, r19
}
    73e4:	28 96       	adiw	r28, 0x08	; 8
    73e6:	0f b6       	in	r0, 0x3f	; 63
    73e8:	f8 94       	cli
    73ea:	de bf       	out	0x3e, r29	; 62
    73ec:	0f be       	out	0x3f, r0	; 63
    73ee:	cd bf       	out	0x3d, r28	; 61
    73f0:	df 91       	pop	r29
    73f2:	cf 91       	pop	r28
    73f4:	08 95       	ret

000073f6 <_ZNK6String11lastIndexOfEc>:

int String::lastIndexOf( char theChar ) const
{
    73f6:	cf 93       	push	r28
    73f8:	df 93       	push	r29
    73fa:	00 d0       	rcall	.+0      	; 0x73fc <_ZNK6String11lastIndexOfEc+0x6>
    73fc:	cd b7       	in	r28, 0x3d	; 61
    73fe:	de b7       	in	r29, 0x3e	; 62
    7400:	9a 83       	std	Y+2, r25	; 0x02
    7402:	89 83       	std	Y+1, r24	; 0x01
    7404:	6b 83       	std	Y+3, r22	; 0x03
	return lastIndexOf(theChar, len - 1);
    7406:	89 81       	ldd	r24, Y+1	; 0x01
    7408:	9a 81       	ldd	r25, Y+2	; 0x02
    740a:	fc 01       	movw	r30, r24
    740c:	84 81       	ldd	r24, Z+4	; 0x04
    740e:	95 81       	ldd	r25, Z+5	; 0x05
    7410:	9c 01       	movw	r18, r24
    7412:	21 50       	subi	r18, 0x01	; 1
    7414:	31 09       	sbc	r19, r1
    7416:	89 81       	ldd	r24, Y+1	; 0x01
    7418:	9a 81       	ldd	r25, Y+2	; 0x02
    741a:	a9 01       	movw	r20, r18
    741c:	6b 81       	ldd	r22, Y+3	; 0x03
    741e:	0e 94 17 3a 	call	0x742e	; 0x742e <_ZNK6String11lastIndexOfEcj>
}
    7422:	0f 90       	pop	r0
    7424:	0f 90       	pop	r0
    7426:	0f 90       	pop	r0
    7428:	df 91       	pop	r29
    742a:	cf 91       	pop	r28
    742c:	08 95       	ret

0000742e <_ZNK6String11lastIndexOfEcj>:

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    742e:	cf 93       	push	r28
    7430:	df 93       	push	r29
    7432:	cd b7       	in	r28, 0x3d	; 61
    7434:	de b7       	in	r29, 0x3e	; 62
    7436:	28 97       	sbiw	r28, 0x08	; 8
    7438:	0f b6       	in	r0, 0x3f	; 63
    743a:	f8 94       	cli
    743c:	de bf       	out	0x3e, r29	; 62
    743e:	0f be       	out	0x3f, r0	; 63
    7440:	cd bf       	out	0x3d, r28	; 61
    7442:	9d 83       	std	Y+5, r25	; 0x05
    7444:	8c 83       	std	Y+4, r24	; 0x04
    7446:	6e 83       	std	Y+6, r22	; 0x06
    7448:	58 87       	std	Y+8, r21	; 0x08
    744a:	4f 83       	std	Y+7, r20	; 0x07
	if (fromIndex >= len) return -1;
    744c:	8c 81       	ldd	r24, Y+4	; 0x04
    744e:	9d 81       	ldd	r25, Y+5	; 0x05
    7450:	fc 01       	movw	r30, r24
    7452:	24 81       	ldd	r18, Z+4	; 0x04
    7454:	35 81       	ldd	r19, Z+5	; 0x05
    7456:	8f 81       	ldd	r24, Y+7	; 0x07
    7458:	98 85       	ldd	r25, Y+8	; 0x08
    745a:	82 17       	cp	r24, r18
    745c:	93 07       	cpc	r25, r19
    745e:	18 f0       	brcs	.+6      	; 0x7466 <_ZNK6String11lastIndexOfEcj+0x38>
    7460:	8f ef       	ldi	r24, 0xFF	; 255
    7462:	9f ef       	ldi	r25, 0xFF	; 255
    7464:	44 c0       	rjmp	.+136    	; 0x74ee <_ZNK6String11lastIndexOfEcj+0xc0>
	char tempchar = buffer[fromIndex + 1];
    7466:	8c 81       	ldd	r24, Y+4	; 0x04
    7468:	9d 81       	ldd	r25, Y+5	; 0x05
    746a:	fc 01       	movw	r30, r24
    746c:	20 81       	ld	r18, Z
    746e:	31 81       	ldd	r19, Z+1	; 0x01
    7470:	8f 81       	ldd	r24, Y+7	; 0x07
    7472:	98 85       	ldd	r25, Y+8	; 0x08
    7474:	01 96       	adiw	r24, 0x01	; 1
    7476:	82 0f       	add	r24, r18
    7478:	93 1f       	adc	r25, r19
    747a:	fc 01       	movw	r30, r24
    747c:	80 81       	ld	r24, Z
    747e:	89 83       	std	Y+1, r24	; 0x01
	buffer[fromIndex + 1] = '\0';
    7480:	8c 81       	ldd	r24, Y+4	; 0x04
    7482:	9d 81       	ldd	r25, Y+5	; 0x05
    7484:	fc 01       	movw	r30, r24
    7486:	20 81       	ld	r18, Z
    7488:	31 81       	ldd	r19, Z+1	; 0x01
    748a:	8f 81       	ldd	r24, Y+7	; 0x07
    748c:	98 85       	ldd	r25, Y+8	; 0x08
    748e:	01 96       	adiw	r24, 0x01	; 1
    7490:	82 0f       	add	r24, r18
    7492:	93 1f       	adc	r25, r19
    7494:	fc 01       	movw	r30, r24
    7496:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    7498:	8e 81       	ldd	r24, Y+6	; 0x06
    749a:	28 2f       	mov	r18, r24
    749c:	88 0f       	add	r24, r24
    749e:	33 0b       	sbc	r19, r19
    74a0:	8c 81       	ldd	r24, Y+4	; 0x04
    74a2:	9d 81       	ldd	r25, Y+5	; 0x05
    74a4:	fc 01       	movw	r30, r24
    74a6:	80 81       	ld	r24, Z
    74a8:	91 81       	ldd	r25, Z+1	; 0x01
    74aa:	b9 01       	movw	r22, r18
    74ac:	0e 94 2d 49 	call	0x925a	; 0x925a <strrchr>
    74b0:	9b 83       	std	Y+3, r25	; 0x03
    74b2:	8a 83       	std	Y+2, r24	; 0x02
	buffer[fromIndex + 1] = tempchar;
    74b4:	8c 81       	ldd	r24, Y+4	; 0x04
    74b6:	9d 81       	ldd	r25, Y+5	; 0x05
    74b8:	fc 01       	movw	r30, r24
    74ba:	20 81       	ld	r18, Z
    74bc:	31 81       	ldd	r19, Z+1	; 0x01
    74be:	8f 81       	ldd	r24, Y+7	; 0x07
    74c0:	98 85       	ldd	r25, Y+8	; 0x08
    74c2:	01 96       	adiw	r24, 0x01	; 1
    74c4:	82 0f       	add	r24, r18
    74c6:	93 1f       	adc	r25, r19
    74c8:	29 81       	ldd	r18, Y+1	; 0x01
    74ca:	fc 01       	movw	r30, r24
    74cc:	20 83       	st	Z, r18
	if (temp == NULL) return -1;
    74ce:	8a 81       	ldd	r24, Y+2	; 0x02
    74d0:	9b 81       	ldd	r25, Y+3	; 0x03
    74d2:	89 2b       	or	r24, r25
    74d4:	19 f4       	brne	.+6      	; 0x74dc <_ZNK6String11lastIndexOfEcj+0xae>
    74d6:	8f ef       	ldi	r24, 0xFF	; 255
    74d8:	9f ef       	ldi	r25, 0xFF	; 255
    74da:	09 c0       	rjmp	.+18     	; 0x74ee <_ZNK6String11lastIndexOfEcj+0xc0>
	return temp - buffer;
    74dc:	8a 81       	ldd	r24, Y+2	; 0x02
    74de:	9b 81       	ldd	r25, Y+3	; 0x03
    74e0:	2c 81       	ldd	r18, Y+4	; 0x04
    74e2:	3d 81       	ldd	r19, Y+5	; 0x05
    74e4:	f9 01       	movw	r30, r18
    74e6:	20 81       	ld	r18, Z
    74e8:	31 81       	ldd	r19, Z+1	; 0x01
    74ea:	82 1b       	sub	r24, r18
    74ec:	93 0b       	sbc	r25, r19
}
    74ee:	28 96       	adiw	r28, 0x08	; 8
    74f0:	0f b6       	in	r0, 0x3f	; 63
    74f2:	f8 94       	cli
    74f4:	de bf       	out	0x3e, r29	; 62
    74f6:	0f be       	out	0x3f, r0	; 63
    74f8:	cd bf       	out	0x3d, r28	; 61
    74fa:	df 91       	pop	r29
    74fc:	cf 91       	pop	r28
    74fe:	08 95       	ret

00007500 <_ZNK6String11lastIndexOfERKS_>:

int String::lastIndexOf(const String &s2) const
{
    7500:	cf 93       	push	r28
    7502:	df 93       	push	r29
    7504:	00 d0       	rcall	.+0      	; 0x7506 <_ZNK6String11lastIndexOfERKS_+0x6>
    7506:	1f 92       	push	r1
    7508:	cd b7       	in	r28, 0x3d	; 61
    750a:	de b7       	in	r29, 0x3e	; 62
    750c:	9a 83       	std	Y+2, r25	; 0x02
    750e:	89 83       	std	Y+1, r24	; 0x01
    7510:	7c 83       	std	Y+4, r23	; 0x04
    7512:	6b 83       	std	Y+3, r22	; 0x03
	return lastIndexOf(s2, len - s2.len);
    7514:	89 81       	ldd	r24, Y+1	; 0x01
    7516:	9a 81       	ldd	r25, Y+2	; 0x02
    7518:	fc 01       	movw	r30, r24
    751a:	24 81       	ldd	r18, Z+4	; 0x04
    751c:	35 81       	ldd	r19, Z+5	; 0x05
    751e:	8b 81       	ldd	r24, Y+3	; 0x03
    7520:	9c 81       	ldd	r25, Y+4	; 0x04
    7522:	fc 01       	movw	r30, r24
    7524:	84 81       	ldd	r24, Z+4	; 0x04
    7526:	95 81       	ldd	r25, Z+5	; 0x05
    7528:	a9 01       	movw	r20, r18
    752a:	48 1b       	sub	r20, r24
    752c:	59 0b       	sbc	r21, r25
    752e:	2b 81       	ldd	r18, Y+3	; 0x03
    7530:	3c 81       	ldd	r19, Y+4	; 0x04
    7532:	89 81       	ldd	r24, Y+1	; 0x01
    7534:	9a 81       	ldd	r25, Y+2	; 0x02
    7536:	b9 01       	movw	r22, r18
    7538:	0e 94 a5 3a 	call	0x754a	; 0x754a <_ZNK6String11lastIndexOfERKS_j>
}
    753c:	0f 90       	pop	r0
    753e:	0f 90       	pop	r0
    7540:	0f 90       	pop	r0
    7542:	0f 90       	pop	r0
    7544:	df 91       	pop	r29
    7546:	cf 91       	pop	r28
    7548:	08 95       	ret

0000754a <_ZNK6String11lastIndexOfERKS_j>:

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    754a:	cf 93       	push	r28
    754c:	df 93       	push	r29
    754e:	cd b7       	in	r28, 0x3d	; 61
    7550:	de b7       	in	r29, 0x3e	; 62
    7552:	2a 97       	sbiw	r28, 0x0a	; 10
    7554:	0f b6       	in	r0, 0x3f	; 63
    7556:	f8 94       	cli
    7558:	de bf       	out	0x3e, r29	; 62
    755a:	0f be       	out	0x3f, r0	; 63
    755c:	cd bf       	out	0x3d, r28	; 61
    755e:	9e 83       	std	Y+6, r25	; 0x06
    7560:	8d 83       	std	Y+5, r24	; 0x05
    7562:	78 87       	std	Y+8, r23	; 0x08
    7564:	6f 83       	std	Y+7, r22	; 0x07
    7566:	5a 87       	std	Y+10, r21	; 0x0a
    7568:	49 87       	std	Y+9, r20	; 0x09
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    756a:	8f 81       	ldd	r24, Y+7	; 0x07
    756c:	98 85       	ldd	r25, Y+8	; 0x08
    756e:	fc 01       	movw	r30, r24
    7570:	84 81       	ldd	r24, Z+4	; 0x04
    7572:	95 81       	ldd	r25, Z+5	; 0x05
    7574:	89 2b       	or	r24, r25
    7576:	a1 f0       	breq	.+40     	; 0x75a0 <_ZNK6String11lastIndexOfERKS_j+0x56>
    7578:	8d 81       	ldd	r24, Y+5	; 0x05
    757a:	9e 81       	ldd	r25, Y+6	; 0x06
    757c:	fc 01       	movw	r30, r24
    757e:	84 81       	ldd	r24, Z+4	; 0x04
    7580:	95 81       	ldd	r25, Z+5	; 0x05
    7582:	89 2b       	or	r24, r25
    7584:	69 f0       	breq	.+26     	; 0x75a0 <_ZNK6String11lastIndexOfERKS_j+0x56>
    7586:	8f 81       	ldd	r24, Y+7	; 0x07
    7588:	98 85       	ldd	r25, Y+8	; 0x08
    758a:	fc 01       	movw	r30, r24
    758c:	24 81       	ldd	r18, Z+4	; 0x04
    758e:	35 81       	ldd	r19, Z+5	; 0x05
    7590:	8d 81       	ldd	r24, Y+5	; 0x05
    7592:	9e 81       	ldd	r25, Y+6	; 0x06
    7594:	fc 01       	movw	r30, r24
    7596:	84 81       	ldd	r24, Z+4	; 0x04
    7598:	95 81       	ldd	r25, Z+5	; 0x05
    759a:	82 17       	cp	r24, r18
    759c:	93 07       	cpc	r25, r19
    759e:	18 f4       	brcc	.+6      	; 0x75a6 <_ZNK6String11lastIndexOfERKS_j+0x5c>
    75a0:	8f ef       	ldi	r24, 0xFF	; 255
    75a2:	9f ef       	ldi	r25, 0xFF	; 255
    75a4:	5e c0       	rjmp	.+188    	; 0x7662 <_ZNK6String11lastIndexOfERKS_j+0x118>
	if (fromIndex >= len) fromIndex = len - 1;
    75a6:	8d 81       	ldd	r24, Y+5	; 0x05
    75a8:	9e 81       	ldd	r25, Y+6	; 0x06
    75aa:	fc 01       	movw	r30, r24
    75ac:	24 81       	ldd	r18, Z+4	; 0x04
    75ae:	35 81       	ldd	r19, Z+5	; 0x05
    75b0:	89 85       	ldd	r24, Y+9	; 0x09
    75b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    75b4:	82 17       	cp	r24, r18
    75b6:	93 07       	cpc	r25, r19
    75b8:	40 f0       	brcs	.+16     	; 0x75ca <_ZNK6String11lastIndexOfERKS_j+0x80>
    75ba:	8d 81       	ldd	r24, Y+5	; 0x05
    75bc:	9e 81       	ldd	r25, Y+6	; 0x06
    75be:	fc 01       	movw	r30, r24
    75c0:	84 81       	ldd	r24, Z+4	; 0x04
    75c2:	95 81       	ldd	r25, Z+5	; 0x05
    75c4:	01 97       	sbiw	r24, 0x01	; 1
    75c6:	9a 87       	std	Y+10, r25	; 0x0a
    75c8:	89 87       	std	Y+9, r24	; 0x09
	int found = -1;
    75ca:	8f ef       	ldi	r24, 0xFF	; 255
    75cc:	9f ef       	ldi	r25, 0xFF	; 255
    75ce:	9a 83       	std	Y+2, r25	; 0x02
    75d0:	89 83       	std	Y+1, r24	; 0x01
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    75d2:	8d 81       	ldd	r24, Y+5	; 0x05
    75d4:	9e 81       	ldd	r25, Y+6	; 0x06
    75d6:	fc 01       	movw	r30, r24
    75d8:	80 81       	ld	r24, Z
    75da:	91 81       	ldd	r25, Z+1	; 0x01
    75dc:	9c 83       	std	Y+4, r25	; 0x04
    75de:	8b 83       	std	Y+3, r24	; 0x03
    75e0:	8d 81       	ldd	r24, Y+5	; 0x05
    75e2:	9e 81       	ldd	r25, Y+6	; 0x06
    75e4:	fc 01       	movw	r30, r24
    75e6:	20 81       	ld	r18, Z
    75e8:	31 81       	ldd	r19, Z+1	; 0x01
    75ea:	89 85       	ldd	r24, Y+9	; 0x09
    75ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    75ee:	28 0f       	add	r18, r24
    75f0:	39 1f       	adc	r19, r25
    75f2:	8b 81       	ldd	r24, Y+3	; 0x03
    75f4:	9c 81       	ldd	r25, Y+4	; 0x04
    75f6:	28 17       	cp	r18, r24
    75f8:	39 07       	cpc	r19, r25
    75fa:	88 f1       	brcs	.+98     	; 0x765e <_ZNK6String11lastIndexOfERKS_j+0x114>
		p = strstr(p, s2.buffer);
    75fc:	8f 81       	ldd	r24, Y+7	; 0x07
    75fe:	98 85       	ldd	r25, Y+8	; 0x08
    7600:	fc 01       	movw	r30, r24
    7602:	20 81       	ld	r18, Z
    7604:	31 81       	ldd	r19, Z+1	; 0x01
    7606:	8b 81       	ldd	r24, Y+3	; 0x03
    7608:	9c 81       	ldd	r25, Y+4	; 0x04
    760a:	b9 01       	movw	r22, r18
    760c:	0e 94 38 49 	call	0x9270	; 0x9270 <strstr>
    7610:	9c 83       	std	Y+4, r25	; 0x04
    7612:	8b 83       	std	Y+3, r24	; 0x03
		if (!p) break;
    7614:	8b 81       	ldd	r24, Y+3	; 0x03
    7616:	9c 81       	ldd	r25, Y+4	; 0x04
    7618:	89 2b       	or	r24, r25
    761a:	01 f1       	breq	.+64     	; 0x765c <_ZNK6String11lastIndexOfERKS_j+0x112>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    761c:	8b 81       	ldd	r24, Y+3	; 0x03
    761e:	9c 81       	ldd	r25, Y+4	; 0x04
    7620:	2d 81       	ldd	r18, Y+5	; 0x05
    7622:	3e 81       	ldd	r19, Y+6	; 0x06
    7624:	f9 01       	movw	r30, r18
    7626:	20 81       	ld	r18, Z
    7628:	31 81       	ldd	r19, Z+1	; 0x01
    762a:	82 1b       	sub	r24, r18
    762c:	93 0b       	sbc	r25, r19
    762e:	9c 01       	movw	r18, r24
    7630:	89 85       	ldd	r24, Y+9	; 0x09
    7632:	9a 85       	ldd	r25, Y+10	; 0x0a
    7634:	82 17       	cp	r24, r18
    7636:	93 07       	cpc	r25, r19
    7638:	58 f0       	brcs	.+22     	; 0x7650 <_ZNK6String11lastIndexOfERKS_j+0x106>
    763a:	8b 81       	ldd	r24, Y+3	; 0x03
    763c:	9c 81       	ldd	r25, Y+4	; 0x04
    763e:	2d 81       	ldd	r18, Y+5	; 0x05
    7640:	3e 81       	ldd	r19, Y+6	; 0x06
    7642:	f9 01       	movw	r30, r18
    7644:	20 81       	ld	r18, Z
    7646:	31 81       	ldd	r19, Z+1	; 0x01
    7648:	82 1b       	sub	r24, r18
    764a:	93 0b       	sbc	r25, r19
    764c:	9a 83       	std	Y+2, r25	; 0x02
    764e:	89 83       	std	Y+1, r24	; 0x01
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    7650:	8b 81       	ldd	r24, Y+3	; 0x03
    7652:	9c 81       	ldd	r25, Y+4	; 0x04
    7654:	01 96       	adiw	r24, 0x01	; 1
    7656:	9c 83       	std	Y+4, r25	; 0x04
    7658:	8b 83       	std	Y+3, r24	; 0x03
    765a:	c2 cf       	rjmp	.-124    	; 0x75e0 <_ZNK6String11lastIndexOfERKS_j+0x96>
		p = strstr(p, s2.buffer);
		if (!p) break;
    765c:	00 00       	nop
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
    765e:	89 81       	ldd	r24, Y+1	; 0x01
    7660:	9a 81       	ldd	r25, Y+2	; 0x02
}
    7662:	2a 96       	adiw	r28, 0x0a	; 10
    7664:	0f b6       	in	r0, 0x3f	; 63
    7666:	f8 94       	cli
    7668:	de bf       	out	0x3e, r29	; 62
    766a:	0f be       	out	0x3f, r0	; 63
    766c:	cd bf       	out	0x3d, r28	; 61
    766e:	df 91       	pop	r29
    7670:	cf 91       	pop	r28
    7672:	08 95       	ret

00007674 <_ZNK6String9substringEjj>:

String String::substring(unsigned int left, unsigned int right) const
{
    7674:	cf 93       	push	r28
    7676:	df 93       	push	r29
    7678:	cd b7       	in	r28, 0x3d	; 61
    767a:	de b7       	in	r29, 0x3e	; 62
    767c:	2b 97       	sbiw	r28, 0x0b	; 11
    767e:	0f b6       	in	r0, 0x3f	; 63
    7680:	f8 94       	cli
    7682:	de bf       	out	0x3e, r29	; 62
    7684:	0f be       	out	0x3f, r0	; 63
    7686:	cd bf       	out	0x3d, r28	; 61
    7688:	9d 83       	std	Y+5, r25	; 0x05
    768a:	8c 83       	std	Y+4, r24	; 0x04
    768c:	7f 83       	std	Y+7, r23	; 0x07
    768e:	6e 83       	std	Y+6, r22	; 0x06
    7690:	59 87       	std	Y+9, r21	; 0x09
    7692:	48 87       	std	Y+8, r20	; 0x08
    7694:	3b 87       	std	Y+11, r19	; 0x0b
    7696:	2a 87       	std	Y+10, r18	; 0x0a
	if (left > right) {
    7698:	28 85       	ldd	r18, Y+8	; 0x08
    769a:	39 85       	ldd	r19, Y+9	; 0x09
    769c:	8a 85       	ldd	r24, Y+10	; 0x0a
    769e:	9b 85       	ldd	r25, Y+11	; 0x0b
    76a0:	82 17       	cp	r24, r18
    76a2:	93 07       	cpc	r25, r19
    76a4:	60 f4       	brcc	.+24     	; 0x76be <_ZNK6String9substringEjj+0x4a>
		unsigned int temp = right;
    76a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    76a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    76aa:	9a 83       	std	Y+2, r25	; 0x02
    76ac:	89 83       	std	Y+1, r24	; 0x01
		right = left;
    76ae:	88 85       	ldd	r24, Y+8	; 0x08
    76b0:	99 85       	ldd	r25, Y+9	; 0x09
    76b2:	9b 87       	std	Y+11, r25	; 0x0b
    76b4:	8a 87       	std	Y+10, r24	; 0x0a
		left = temp;
    76b6:	89 81       	ldd	r24, Y+1	; 0x01
    76b8:	9a 81       	ldd	r25, Y+2	; 0x02
    76ba:	99 87       	std	Y+9, r25	; 0x09
    76bc:	88 87       	std	Y+8, r24	; 0x08
	}
	String out;
    76be:	8c 81       	ldd	r24, Y+4	; 0x04
    76c0:	9d 81       	ldd	r25, Y+5	; 0x05
    76c2:	66 e3       	ldi	r22, 0x36	; 54
    76c4:	73 e0       	ldi	r23, 0x03	; 3
    76c6:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    76ca:	8e 81       	ldd	r24, Y+6	; 0x06
    76cc:	9f 81       	ldd	r25, Y+7	; 0x07
    76ce:	fc 01       	movw	r30, r24
    76d0:	24 81       	ldd	r18, Z+4	; 0x04
    76d2:	35 81       	ldd	r19, Z+5	; 0x05
    76d4:	88 85       	ldd	r24, Y+8	; 0x08
    76d6:	99 85       	ldd	r25, Y+9	; 0x09
    76d8:	82 17       	cp	r24, r18
    76da:	93 07       	cpc	r25, r19
    76dc:	08 f0       	brcs	.+2      	; 0x76e0 <_ZNK6String9substringEjj+0x6c>
    76de:	44 c0       	rjmp	.+136    	; 0x7768 <_ZNK6String9substringEjj+0xf4>
	if (right > len) right = len;
    76e0:	8e 81       	ldd	r24, Y+6	; 0x06
    76e2:	9f 81       	ldd	r25, Y+7	; 0x07
    76e4:	fc 01       	movw	r30, r24
    76e6:	24 81       	ldd	r18, Z+4	; 0x04
    76e8:	35 81       	ldd	r19, Z+5	; 0x05
    76ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    76ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    76ee:	28 17       	cp	r18, r24
    76f0:	39 07       	cpc	r19, r25
    76f2:	38 f4       	brcc	.+14     	; 0x7702 <_ZNK6String9substringEjj+0x8e>
    76f4:	8e 81       	ldd	r24, Y+6	; 0x06
    76f6:	9f 81       	ldd	r25, Y+7	; 0x07
    76f8:	fc 01       	movw	r30, r24
    76fa:	84 81       	ldd	r24, Z+4	; 0x04
    76fc:	95 81       	ldd	r25, Z+5	; 0x05
    76fe:	9b 87       	std	Y+11, r25	; 0x0b
    7700:	8a 87       	std	Y+10, r24	; 0x0a
	char temp = buffer[right];  // save the replaced character
    7702:	8e 81       	ldd	r24, Y+6	; 0x06
    7704:	9f 81       	ldd	r25, Y+7	; 0x07
    7706:	fc 01       	movw	r30, r24
    7708:	20 81       	ld	r18, Z
    770a:	31 81       	ldd	r19, Z+1	; 0x01
    770c:	8a 85       	ldd	r24, Y+10	; 0x0a
    770e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7710:	82 0f       	add	r24, r18
    7712:	93 1f       	adc	r25, r19
    7714:	fc 01       	movw	r30, r24
    7716:	80 81       	ld	r24, Z
    7718:	8b 83       	std	Y+3, r24	; 0x03
	buffer[right] = '\0';	
    771a:	8e 81       	ldd	r24, Y+6	; 0x06
    771c:	9f 81       	ldd	r25, Y+7	; 0x07
    771e:	fc 01       	movw	r30, r24
    7720:	20 81       	ld	r18, Z
    7722:	31 81       	ldd	r19, Z+1	; 0x01
    7724:	8a 85       	ldd	r24, Y+10	; 0x0a
    7726:	9b 85       	ldd	r25, Y+11	; 0x0b
    7728:	82 0f       	add	r24, r18
    772a:	93 1f       	adc	r25, r19
    772c:	fc 01       	movw	r30, r24
    772e:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7730:	8e 81       	ldd	r24, Y+6	; 0x06
    7732:	9f 81       	ldd	r25, Y+7	; 0x07
    7734:	fc 01       	movw	r30, r24
    7736:	20 81       	ld	r18, Z
    7738:	31 81       	ldd	r19, Z+1	; 0x01
    773a:	88 85       	ldd	r24, Y+8	; 0x08
    773c:	99 85       	ldd	r25, Y+9	; 0x09
    773e:	28 0f       	add	r18, r24
    7740:	39 1f       	adc	r19, r25
    7742:	8c 81       	ldd	r24, Y+4	; 0x04
    7744:	9d 81       	ldd	r25, Y+5	; 0x05
    7746:	b9 01       	movw	r22, r18
    7748:	0e 94 c2 30 	call	0x6184	; 0x6184 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    774c:	8e 81       	ldd	r24, Y+6	; 0x06
    774e:	9f 81       	ldd	r25, Y+7	; 0x07
    7750:	fc 01       	movw	r30, r24
    7752:	20 81       	ld	r18, Z
    7754:	31 81       	ldd	r19, Z+1	; 0x01
    7756:	8a 85       	ldd	r24, Y+10	; 0x0a
    7758:	9b 85       	ldd	r25, Y+11	; 0x0b
    775a:	82 0f       	add	r24, r18
    775c:	93 1f       	adc	r25, r19
    775e:	2b 81       	ldd	r18, Y+3	; 0x03
    7760:	fc 01       	movw	r30, r24
    7762:	20 83       	st	Z, r18
	return out;
    7764:	00 00       	nop
    7766:	01 c0       	rjmp	.+2      	; 0x776a <_ZNK6String9substringEjj+0xf6>
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left >= len) return out;
    7768:	00 00       	nop
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
	return out;
}
    776a:	8c 81       	ldd	r24, Y+4	; 0x04
    776c:	9d 81       	ldd	r25, Y+5	; 0x05
    776e:	2b 96       	adiw	r28, 0x0b	; 11
    7770:	0f b6       	in	r0, 0x3f	; 63
    7772:	f8 94       	cli
    7774:	de bf       	out	0x3e, r29	; 62
    7776:	0f be       	out	0x3f, r0	; 63
    7778:	cd bf       	out	0x3d, r28	; 61
    777a:	df 91       	pop	r29
    777c:	cf 91       	pop	r28
    777e:	08 95       	ret

00007780 <_ZN6String7replaceEcc>:
/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
    7780:	cf 93       	push	r28
    7782:	df 93       	push	r29
    7784:	00 d0       	rcall	.+0      	; 0x7786 <_ZN6String7replaceEcc+0x6>
    7786:	00 d0       	rcall	.+0      	; 0x7788 <_ZN6String7replaceEcc+0x8>
    7788:	cd b7       	in	r28, 0x3d	; 61
    778a:	de b7       	in	r29, 0x3e	; 62
    778c:	9c 83       	std	Y+4, r25	; 0x04
    778e:	8b 83       	std	Y+3, r24	; 0x03
    7790:	6d 83       	std	Y+5, r22	; 0x05
    7792:	4e 83       	std	Y+6, r20	; 0x06
	if (!buffer) return;
    7794:	8b 81       	ldd	r24, Y+3	; 0x03
    7796:	9c 81       	ldd	r25, Y+4	; 0x04
    7798:	fc 01       	movw	r30, r24
    779a:	80 81       	ld	r24, Z
    779c:	91 81       	ldd	r25, Z+1	; 0x01
    779e:	89 2b       	or	r24, r25
    77a0:	f9 f0       	breq	.+62     	; 0x77e0 <_ZN6String7replaceEcc+0x60>
	for (char *p = buffer; *p; p++) {
    77a2:	8b 81       	ldd	r24, Y+3	; 0x03
    77a4:	9c 81       	ldd	r25, Y+4	; 0x04
    77a6:	fc 01       	movw	r30, r24
    77a8:	80 81       	ld	r24, Z
    77aa:	91 81       	ldd	r25, Z+1	; 0x01
    77ac:	9a 83       	std	Y+2, r25	; 0x02
    77ae:	89 83       	std	Y+1, r24	; 0x01
    77b0:	89 81       	ldd	r24, Y+1	; 0x01
    77b2:	9a 81       	ldd	r25, Y+2	; 0x02
    77b4:	fc 01       	movw	r30, r24
    77b6:	80 81       	ld	r24, Z
    77b8:	88 23       	and	r24, r24
    77ba:	99 f0       	breq	.+38     	; 0x77e2 <_ZN6String7replaceEcc+0x62>
		if (*p == find) *p = replace;
    77bc:	89 81       	ldd	r24, Y+1	; 0x01
    77be:	9a 81       	ldd	r25, Y+2	; 0x02
    77c0:	fc 01       	movw	r30, r24
    77c2:	90 81       	ld	r25, Z
    77c4:	8d 81       	ldd	r24, Y+5	; 0x05
    77c6:	98 17       	cp	r25, r24
    77c8:	29 f4       	brne	.+10     	; 0x77d4 <_ZN6String7replaceEcc+0x54>
    77ca:	89 81       	ldd	r24, Y+1	; 0x01
    77cc:	9a 81       	ldd	r25, Y+2	; 0x02
    77ce:	2e 81       	ldd	r18, Y+6	; 0x06
    77d0:	fc 01       	movw	r30, r24
    77d2:	20 83       	st	Z, r18
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    77d4:	89 81       	ldd	r24, Y+1	; 0x01
    77d6:	9a 81       	ldd	r25, Y+2	; 0x02
    77d8:	01 96       	adiw	r24, 0x01	; 1
    77da:	9a 83       	std	Y+2, r25	; 0x02
    77dc:	89 83       	std	Y+1, r24	; 0x01
    77de:	e8 cf       	rjmp	.-48     	; 0x77b0 <_ZN6String7replaceEcc+0x30>
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    77e0:	00 00       	nop
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}
    77e2:	26 96       	adiw	r28, 0x06	; 6
    77e4:	0f b6       	in	r0, 0x3f	; 63
    77e6:	f8 94       	cli
    77e8:	de bf       	out	0x3e, r29	; 62
    77ea:	0f be       	out	0x3f, r0	; 63
    77ec:	cd bf       	out	0x3d, r28	; 61
    77ee:	df 91       	pop	r29
    77f0:	cf 91       	pop	r28
    77f2:	08 95       	ret

000077f4 <_ZN6String7replaceERKS_S1_>:

void String::replace(const String& find, const String& replace)
{
    77f4:	cf 93       	push	r28
    77f6:	df 93       	push	r29
    77f8:	cd b7       	in	r28, 0x3d	; 61
    77fa:	de b7       	in	r29, 0x3e	; 62
    77fc:	64 97       	sbiw	r28, 0x14	; 20
    77fe:	0f b6       	in	r0, 0x3f	; 63
    7800:	f8 94       	cli
    7802:	de bf       	out	0x3e, r29	; 62
    7804:	0f be       	out	0x3f, r0	; 63
    7806:	cd bf       	out	0x3d, r28	; 61
    7808:	98 8b       	std	Y+16, r25	; 0x10
    780a:	8f 87       	std	Y+15, r24	; 0x0f
    780c:	7a 8b       	std	Y+18, r23	; 0x12
    780e:	69 8b       	std	Y+17, r22	; 0x11
    7810:	5c 8b       	std	Y+20, r21	; 0x14
    7812:	4b 8b       	std	Y+19, r20	; 0x13
	if (len == 0 || find.len == 0) return;
    7814:	8f 85       	ldd	r24, Y+15	; 0x0f
    7816:	98 89       	ldd	r25, Y+16	; 0x10
    7818:	fc 01       	movw	r30, r24
    781a:	84 81       	ldd	r24, Z+4	; 0x04
    781c:	95 81       	ldd	r25, Z+5	; 0x05
    781e:	89 2b       	or	r24, r25
    7820:	09 f4       	brne	.+2      	; 0x7824 <_ZN6String7replaceERKS_S1_+0x30>
    7822:	a4 c1       	rjmp	.+840    	; 0x7b6c <_ZN6String7replaceERKS_S1_+0x378>
    7824:	89 89       	ldd	r24, Y+17	; 0x11
    7826:	9a 89       	ldd	r25, Y+18	; 0x12
    7828:	fc 01       	movw	r30, r24
    782a:	84 81       	ldd	r24, Z+4	; 0x04
    782c:	95 81       	ldd	r25, Z+5	; 0x05
    782e:	89 2b       	or	r24, r25
    7830:	09 f4       	brne	.+2      	; 0x7834 <_ZN6String7replaceERKS_S1_+0x40>
    7832:	9c c1       	rjmp	.+824    	; 0x7b6c <_ZN6String7replaceERKS_S1_+0x378>
	int diff = replace.len - find.len;
    7834:	8b 89       	ldd	r24, Y+19	; 0x13
    7836:	9c 89       	ldd	r25, Y+20	; 0x14
    7838:	fc 01       	movw	r30, r24
    783a:	24 81       	ldd	r18, Z+4	; 0x04
    783c:	35 81       	ldd	r19, Z+5	; 0x05
    783e:	89 89       	ldd	r24, Y+17	; 0x11
    7840:	9a 89       	ldd	r25, Y+18	; 0x12
    7842:	fc 01       	movw	r30, r24
    7844:	84 81       	ldd	r24, Z+4	; 0x04
    7846:	95 81       	ldd	r25, Z+5	; 0x05
    7848:	a9 01       	movw	r20, r18
    784a:	48 1b       	sub	r20, r24
    784c:	59 0b       	sbc	r21, r25
    784e:	ca 01       	movw	r24, r20
    7850:	9a 87       	std	Y+10, r25	; 0x0a
    7852:	89 87       	std	Y+9, r24	; 0x09
	char *readFrom = buffer;
    7854:	8f 85       	ldd	r24, Y+15	; 0x0f
    7856:	98 89       	ldd	r25, Y+16	; 0x10
    7858:	fc 01       	movw	r30, r24
    785a:	80 81       	ld	r24, Z
    785c:	91 81       	ldd	r25, Z+1	; 0x01
    785e:	9a 83       	std	Y+2, r25	; 0x02
    7860:	89 83       	std	Y+1, r24	; 0x01
	char *foundAt;
	if (diff == 0) {
    7862:	89 85       	ldd	r24, Y+9	; 0x09
    7864:	9a 85       	ldd	r25, Y+10	; 0x0a
    7866:	89 2b       	or	r24, r25
    7868:	81 f5       	brne	.+96     	; 0x78ca <_ZN6String7replaceERKS_S1_+0xd6>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    786a:	89 89       	ldd	r24, Y+17	; 0x11
    786c:	9a 89       	ldd	r25, Y+18	; 0x12
    786e:	fc 01       	movw	r30, r24
    7870:	20 81       	ld	r18, Z
    7872:	31 81       	ldd	r19, Z+1	; 0x01
    7874:	89 81       	ldd	r24, Y+1	; 0x01
    7876:	9a 81       	ldd	r25, Y+2	; 0x02
    7878:	b9 01       	movw	r22, r18
    787a:	0e 94 38 49 	call	0x9270	; 0x9270 <strstr>
    787e:	9c 87       	std	Y+12, r25	; 0x0c
    7880:	8b 87       	std	Y+11, r24	; 0x0b
    7882:	21 e0       	ldi	r18, 0x01	; 1
    7884:	8b 85       	ldd	r24, Y+11	; 0x0b
    7886:	9c 85       	ldd	r25, Y+12	; 0x0c
    7888:	89 2b       	or	r24, r25
    788a:	09 f4       	brne	.+2      	; 0x788e <_ZN6String7replaceERKS_S1_+0x9a>
    788c:	20 e0       	ldi	r18, 0x00	; 0
    788e:	22 23       	and	r18, r18
    7890:	09 f4       	brne	.+2      	; 0x7894 <_ZN6String7replaceERKS_S1_+0xa0>
    7892:	71 c1       	rjmp	.+738    	; 0x7b76 <_ZN6String7replaceERKS_S1_+0x382>
			memcpy(foundAt, replace.buffer, replace.len);
    7894:	8b 89       	ldd	r24, Y+19	; 0x13
    7896:	9c 89       	ldd	r25, Y+20	; 0x14
    7898:	fc 01       	movw	r30, r24
    789a:	44 81       	ldd	r20, Z+4	; 0x04
    789c:	55 81       	ldd	r21, Z+5	; 0x05
    789e:	8b 89       	ldd	r24, Y+19	; 0x13
    78a0:	9c 89       	ldd	r25, Y+20	; 0x14
    78a2:	fc 01       	movw	r30, r24
    78a4:	20 81       	ld	r18, Z
    78a6:	31 81       	ldd	r19, Z+1	; 0x01
    78a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    78aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    78ac:	b9 01       	movw	r22, r18
    78ae:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
			readFrom = foundAt + replace.len;
    78b2:	8b 89       	ldd	r24, Y+19	; 0x13
    78b4:	9c 89       	ldd	r25, Y+20	; 0x14
    78b6:	fc 01       	movw	r30, r24
    78b8:	84 81       	ldd	r24, Z+4	; 0x04
    78ba:	95 81       	ldd	r25, Z+5	; 0x05
    78bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    78be:	3c 85       	ldd	r19, Y+12	; 0x0c
    78c0:	82 0f       	add	r24, r18
    78c2:	93 1f       	adc	r25, r19
    78c4:	9a 83       	std	Y+2, r25	; 0x02
    78c6:	89 83       	std	Y+1, r24	; 0x01
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    78c8:	d0 cf       	rjmp	.-96     	; 0x786a <_ZN6String7replaceERKS_S1_+0x76>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    78ca:	89 85       	ldd	r24, Y+9	; 0x09
    78cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    78ce:	99 23       	and	r25, r25
    78d0:	0c f0       	brlt	.+2      	; 0x78d4 <_ZN6String7replaceERKS_S1_+0xe0>
    78d2:	73 c0       	rjmp	.+230    	; 0x79ba <_ZN6String7replaceERKS_S1_+0x1c6>
		char *writeTo = buffer;
    78d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    78d6:	98 89       	ldd	r25, Y+16	; 0x10
    78d8:	fc 01       	movw	r30, r24
    78da:	80 81       	ld	r24, Z
    78dc:	91 81       	ldd	r25, Z+1	; 0x01
    78de:	9c 83       	std	Y+4, r25	; 0x04
    78e0:	8b 83       	std	Y+3, r24	; 0x03
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    78e2:	89 89       	ldd	r24, Y+17	; 0x11
    78e4:	9a 89       	ldd	r25, Y+18	; 0x12
    78e6:	fc 01       	movw	r30, r24
    78e8:	20 81       	ld	r18, Z
    78ea:	31 81       	ldd	r19, Z+1	; 0x01
    78ec:	89 81       	ldd	r24, Y+1	; 0x01
    78ee:	9a 81       	ldd	r25, Y+2	; 0x02
    78f0:	b9 01       	movw	r22, r18
    78f2:	0e 94 38 49 	call	0x9270	; 0x9270 <strstr>
    78f6:	9c 87       	std	Y+12, r25	; 0x0c
    78f8:	8b 87       	std	Y+11, r24	; 0x0b
    78fa:	21 e0       	ldi	r18, 0x01	; 1
    78fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    78fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    7900:	89 2b       	or	r24, r25
    7902:	09 f4       	brne	.+2      	; 0x7906 <_ZN6String7replaceERKS_S1_+0x112>
    7904:	20 e0       	ldi	r18, 0x00	; 0
    7906:	22 23       	and	r18, r18
    7908:	09 f4       	brne	.+2      	; 0x790c <_ZN6String7replaceERKS_S1_+0x118>
    790a:	4f c0       	rjmp	.+158    	; 0x79aa <_ZN6String7replaceERKS_S1_+0x1b6>
			unsigned int n = foundAt - readFrom;
    790c:	2b 85       	ldd	r18, Y+11	; 0x0b
    790e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7910:	89 81       	ldd	r24, Y+1	; 0x01
    7912:	9a 81       	ldd	r25, Y+2	; 0x02
    7914:	a9 01       	movw	r20, r18
    7916:	48 1b       	sub	r20, r24
    7918:	59 0b       	sbc	r21, r25
    791a:	ca 01       	movw	r24, r20
    791c:	9e 87       	std	Y+14, r25	; 0x0e
    791e:	8d 87       	std	Y+13, r24	; 0x0d
			memcpy(writeTo, readFrom, n);
    7920:	4d 85       	ldd	r20, Y+13	; 0x0d
    7922:	5e 85       	ldd	r21, Y+14	; 0x0e
    7924:	29 81       	ldd	r18, Y+1	; 0x01
    7926:	3a 81       	ldd	r19, Y+2	; 0x02
    7928:	8b 81       	ldd	r24, Y+3	; 0x03
    792a:	9c 81       	ldd	r25, Y+4	; 0x04
    792c:	b9 01       	movw	r22, r18
    792e:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
			writeTo += n;
    7932:	2b 81       	ldd	r18, Y+3	; 0x03
    7934:	3c 81       	ldd	r19, Y+4	; 0x04
    7936:	8d 85       	ldd	r24, Y+13	; 0x0d
    7938:	9e 85       	ldd	r25, Y+14	; 0x0e
    793a:	82 0f       	add	r24, r18
    793c:	93 1f       	adc	r25, r19
    793e:	9c 83       	std	Y+4, r25	; 0x04
    7940:	8b 83       	std	Y+3, r24	; 0x03
			memcpy(writeTo, replace.buffer, replace.len);
    7942:	8b 89       	ldd	r24, Y+19	; 0x13
    7944:	9c 89       	ldd	r25, Y+20	; 0x14
    7946:	fc 01       	movw	r30, r24
    7948:	44 81       	ldd	r20, Z+4	; 0x04
    794a:	55 81       	ldd	r21, Z+5	; 0x05
    794c:	8b 89       	ldd	r24, Y+19	; 0x13
    794e:	9c 89       	ldd	r25, Y+20	; 0x14
    7950:	fc 01       	movw	r30, r24
    7952:	20 81       	ld	r18, Z
    7954:	31 81       	ldd	r19, Z+1	; 0x01
    7956:	8b 81       	ldd	r24, Y+3	; 0x03
    7958:	9c 81       	ldd	r25, Y+4	; 0x04
    795a:	b9 01       	movw	r22, r18
    795c:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
			writeTo += replace.len;
    7960:	8b 89       	ldd	r24, Y+19	; 0x13
    7962:	9c 89       	ldd	r25, Y+20	; 0x14
    7964:	fc 01       	movw	r30, r24
    7966:	84 81       	ldd	r24, Z+4	; 0x04
    7968:	95 81       	ldd	r25, Z+5	; 0x05
    796a:	2b 81       	ldd	r18, Y+3	; 0x03
    796c:	3c 81       	ldd	r19, Y+4	; 0x04
    796e:	82 0f       	add	r24, r18
    7970:	93 1f       	adc	r25, r19
    7972:	9c 83       	std	Y+4, r25	; 0x04
    7974:	8b 83       	std	Y+3, r24	; 0x03
			readFrom = foundAt + find.len;
    7976:	89 89       	ldd	r24, Y+17	; 0x11
    7978:	9a 89       	ldd	r25, Y+18	; 0x12
    797a:	fc 01       	movw	r30, r24
    797c:	84 81       	ldd	r24, Z+4	; 0x04
    797e:	95 81       	ldd	r25, Z+5	; 0x05
    7980:	2b 85       	ldd	r18, Y+11	; 0x0b
    7982:	3c 85       	ldd	r19, Y+12	; 0x0c
    7984:	82 0f       	add	r24, r18
    7986:	93 1f       	adc	r25, r19
    7988:	9a 83       	std	Y+2, r25	; 0x02
    798a:	89 83       	std	Y+1, r24	; 0x01
			len += diff;
    798c:	8f 85       	ldd	r24, Y+15	; 0x0f
    798e:	98 89       	ldd	r25, Y+16	; 0x10
    7990:	fc 01       	movw	r30, r24
    7992:	24 81       	ldd	r18, Z+4	; 0x04
    7994:	35 81       	ldd	r19, Z+5	; 0x05
    7996:	89 85       	ldd	r24, Y+9	; 0x09
    7998:	9a 85       	ldd	r25, Y+10	; 0x0a
    799a:	28 0f       	add	r18, r24
    799c:	39 1f       	adc	r19, r25
    799e:	8f 85       	ldd	r24, Y+15	; 0x0f
    79a0:	98 89       	ldd	r25, Y+16	; 0x10
    79a2:	fc 01       	movw	r30, r24
    79a4:	35 83       	std	Z+5, r19	; 0x05
    79a6:	24 83       	std	Z+4, r18	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    79a8:	9c cf       	rjmp	.-200    	; 0x78e2 <_ZN6String7replaceERKS_S1_+0xee>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    79aa:	29 81       	ldd	r18, Y+1	; 0x01
    79ac:	3a 81       	ldd	r19, Y+2	; 0x02
    79ae:	8b 81       	ldd	r24, Y+3	; 0x03
    79b0:	9c 81       	ldd	r25, Y+4	; 0x04
    79b2:	b9 01       	movw	r22, r18
    79b4:	0e 94 00 49 	call	0x9200	; 0x9200 <strcpy>
    79b8:	de c0       	rjmp	.+444    	; 0x7b76 <_ZN6String7replaceERKS_S1_+0x382>
	} else {
		unsigned int size = len; // compute size needed for result
    79ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    79bc:	98 89       	ldd	r25, Y+16	; 0x10
    79be:	fc 01       	movw	r30, r24
    79c0:	84 81       	ldd	r24, Z+4	; 0x04
    79c2:	95 81       	ldd	r25, Z+5	; 0x05
    79c4:	9e 83       	std	Y+6, r25	; 0x06
    79c6:	8d 83       	std	Y+5, r24	; 0x05
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    79c8:	89 89       	ldd	r24, Y+17	; 0x11
    79ca:	9a 89       	ldd	r25, Y+18	; 0x12
    79cc:	fc 01       	movw	r30, r24
    79ce:	20 81       	ld	r18, Z
    79d0:	31 81       	ldd	r19, Z+1	; 0x01
    79d2:	89 81       	ldd	r24, Y+1	; 0x01
    79d4:	9a 81       	ldd	r25, Y+2	; 0x02
    79d6:	b9 01       	movw	r22, r18
    79d8:	0e 94 38 49 	call	0x9270	; 0x9270 <strstr>
    79dc:	9c 87       	std	Y+12, r25	; 0x0c
    79de:	8b 87       	std	Y+11, r24	; 0x0b
    79e0:	21 e0       	ldi	r18, 0x01	; 1
    79e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    79e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    79e6:	89 2b       	or	r24, r25
    79e8:	09 f4       	brne	.+2      	; 0x79ec <_ZN6String7replaceERKS_S1_+0x1f8>
    79ea:	20 e0       	ldi	r18, 0x00	; 0
    79ec:	22 23       	and	r18, r18
    79ee:	a1 f0       	breq	.+40     	; 0x7a18 <_ZN6String7replaceERKS_S1_+0x224>
			readFrom = foundAt + find.len;
    79f0:	89 89       	ldd	r24, Y+17	; 0x11
    79f2:	9a 89       	ldd	r25, Y+18	; 0x12
    79f4:	fc 01       	movw	r30, r24
    79f6:	84 81       	ldd	r24, Z+4	; 0x04
    79f8:	95 81       	ldd	r25, Z+5	; 0x05
    79fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    79fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    79fe:	82 0f       	add	r24, r18
    7a00:	93 1f       	adc	r25, r19
    7a02:	9a 83       	std	Y+2, r25	; 0x02
    7a04:	89 83       	std	Y+1, r24	; 0x01
			size += diff;
    7a06:	89 85       	ldd	r24, Y+9	; 0x09
    7a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a0a:	2d 81       	ldd	r18, Y+5	; 0x05
    7a0c:	3e 81       	ldd	r19, Y+6	; 0x06
    7a0e:	82 0f       	add	r24, r18
    7a10:	93 1f       	adc	r25, r19
    7a12:	9e 83       	std	Y+6, r25	; 0x06
    7a14:	8d 83       	std	Y+5, r24	; 0x05
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    7a16:	d8 cf       	rjmp	.-80     	; 0x79c8 <_ZN6String7replaceERKS_S1_+0x1d4>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    7a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a1a:	98 89       	ldd	r25, Y+16	; 0x10
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	24 81       	ldd	r18, Z+4	; 0x04
    7a20:	35 81       	ldd	r19, Z+5	; 0x05
    7a22:	8d 81       	ldd	r24, Y+5	; 0x05
    7a24:	9e 81       	ldd	r25, Y+6	; 0x06
    7a26:	28 17       	cp	r18, r24
    7a28:	39 07       	cpc	r19, r25
    7a2a:	09 f4       	brne	.+2      	; 0x7a2e <_ZN6String7replaceERKS_S1_+0x23a>
    7a2c:	a1 c0       	rjmp	.+322    	; 0x7b70 <_ZN6String7replaceERKS_S1_+0x37c>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    7a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a30:	98 89       	ldd	r25, Y+16	; 0x10
    7a32:	fc 01       	movw	r30, r24
    7a34:	22 81       	ldd	r18, Z+2	; 0x02
    7a36:	33 81       	ldd	r19, Z+3	; 0x03
    7a38:	8d 81       	ldd	r24, Y+5	; 0x05
    7a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    7a3c:	28 17       	cp	r18, r24
    7a3e:	39 07       	cpc	r19, r25
    7a40:	58 f4       	brcc	.+22     	; 0x7a58 <_ZN6String7replaceERKS_S1_+0x264>
    7a42:	2d 81       	ldd	r18, Y+5	; 0x05
    7a44:	3e 81       	ldd	r19, Y+6	; 0x06
    7a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a48:	98 89       	ldd	r25, Y+16	; 0x10
    7a4a:	b9 01       	movw	r22, r18
    7a4c:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <_ZN6String12changeBufferEj>
    7a50:	88 23       	and	r24, r24
    7a52:	11 f4       	brne	.+4      	; 0x7a58 <_ZN6String7replaceERKS_S1_+0x264>
    7a54:	81 e0       	ldi	r24, 0x01	; 1
    7a56:	01 c0       	rjmp	.+2      	; 0x7a5a <_ZN6String7replaceERKS_S1_+0x266>
    7a58:	80 e0       	ldi	r24, 0x00	; 0
    7a5a:	88 23       	and	r24, r24
    7a5c:	09 f0       	breq	.+2      	; 0x7a60 <_ZN6String7replaceERKS_S1_+0x26c>
    7a5e:	8a c0       	rjmp	.+276    	; 0x7b74 <_ZN6String7replaceERKS_S1_+0x380>
		int index = len - 1;
    7a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a62:	98 89       	ldd	r25, Y+16	; 0x10
    7a64:	fc 01       	movw	r30, r24
    7a66:	84 81       	ldd	r24, Z+4	; 0x04
    7a68:	95 81       	ldd	r25, Z+5	; 0x05
    7a6a:	01 97       	sbiw	r24, 0x01	; 1
    7a6c:	98 87       	std	Y+8, r25	; 0x08
    7a6e:	8f 83       	std	Y+7, r24	; 0x07
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    7a70:	8f 81       	ldd	r24, Y+7	; 0x07
    7a72:	98 85       	ldd	r25, Y+8	; 0x08
    7a74:	99 23       	and	r25, r25
    7a76:	8c f0       	brlt	.+34     	; 0x7a9a <_ZN6String7replaceERKS_S1_+0x2a6>
    7a78:	4f 81       	ldd	r20, Y+7	; 0x07
    7a7a:	58 85       	ldd	r21, Y+8	; 0x08
    7a7c:	29 89       	ldd	r18, Y+17	; 0x11
    7a7e:	3a 89       	ldd	r19, Y+18	; 0x12
    7a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a82:	98 89       	ldd	r25, Y+16	; 0x10
    7a84:	b9 01       	movw	r22, r18
    7a86:	0e 94 a5 3a 	call	0x754a	; 0x754a <_ZNK6String11lastIndexOfERKS_j>
    7a8a:	98 87       	std	Y+8, r25	; 0x08
    7a8c:	8f 83       	std	Y+7, r24	; 0x07
    7a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    7a90:	98 85       	ldd	r25, Y+8	; 0x08
    7a92:	99 23       	and	r25, r25
    7a94:	14 f0       	brlt	.+4      	; 0x7a9a <_ZN6String7replaceERKS_S1_+0x2a6>
    7a96:	81 e0       	ldi	r24, 0x01	; 1
    7a98:	01 c0       	rjmp	.+2      	; 0x7a9c <_ZN6String7replaceERKS_S1_+0x2a8>
    7a9a:	80 e0       	ldi	r24, 0x00	; 0
    7a9c:	88 23       	and	r24, r24
    7a9e:	09 f4       	brne	.+2      	; 0x7aa2 <_ZN6String7replaceERKS_S1_+0x2ae>
    7aa0:	6a c0       	rjmp	.+212    	; 0x7b76 <_ZN6String7replaceERKS_S1_+0x382>
			readFrom = buffer + index + find.len;
    7aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    7aa4:	98 89       	ldd	r25, Y+16	; 0x10
    7aa6:	fc 01       	movw	r30, r24
    7aa8:	20 81       	ld	r18, Z
    7aaa:	31 81       	ldd	r19, Z+1	; 0x01
    7aac:	89 89       	ldd	r24, Y+17	; 0x11
    7aae:	9a 89       	ldd	r25, Y+18	; 0x12
    7ab0:	fc 01       	movw	r30, r24
    7ab2:	44 81       	ldd	r20, Z+4	; 0x04
    7ab4:	55 81       	ldd	r21, Z+5	; 0x05
    7ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    7ab8:	98 85       	ldd	r25, Y+8	; 0x08
    7aba:	84 0f       	add	r24, r20
    7abc:	95 1f       	adc	r25, r21
    7abe:	82 0f       	add	r24, r18
    7ac0:	93 1f       	adc	r25, r19
    7ac2:	9a 83       	std	Y+2, r25	; 0x02
    7ac4:	89 83       	std	Y+1, r24	; 0x01
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    7ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    7ac8:	98 89       	ldd	r25, Y+16	; 0x10
    7aca:	fc 01       	movw	r30, r24
    7acc:	84 81       	ldd	r24, Z+4	; 0x04
    7ace:	95 81       	ldd	r25, Z+5	; 0x05
    7ad0:	29 81       	ldd	r18, Y+1	; 0x01
    7ad2:	3a 81       	ldd	r19, Y+2	; 0x02
    7ad4:	4f 85       	ldd	r20, Y+15	; 0x0f
    7ad6:	58 89       	ldd	r21, Y+16	; 0x10
    7ad8:	fa 01       	movw	r30, r20
    7ada:	40 81       	ld	r20, Z
    7adc:	51 81       	ldd	r21, Z+1	; 0x01
    7ade:	24 1b       	sub	r18, r20
    7ae0:	35 0b       	sbc	r19, r21
    7ae2:	ac 01       	movw	r20, r24
    7ae4:	42 1b       	sub	r20, r18
    7ae6:	53 0b       	sbc	r21, r19
    7ae8:	89 85       	ldd	r24, Y+9	; 0x09
    7aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    7aec:	29 81       	ldd	r18, Y+1	; 0x01
    7aee:	3a 81       	ldd	r19, Y+2	; 0x02
    7af0:	82 0f       	add	r24, r18
    7af2:	93 1f       	adc	r25, r19
    7af4:	29 81       	ldd	r18, Y+1	; 0x01
    7af6:	3a 81       	ldd	r19, Y+2	; 0x02
    7af8:	b9 01       	movw	r22, r18
    7afa:	0e 94 da 48 	call	0x91b4	; 0x91b4 <memmove>
			len += diff;
    7afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b00:	98 89       	ldd	r25, Y+16	; 0x10
    7b02:	fc 01       	movw	r30, r24
    7b04:	24 81       	ldd	r18, Z+4	; 0x04
    7b06:	35 81       	ldd	r19, Z+5	; 0x05
    7b08:	89 85       	ldd	r24, Y+9	; 0x09
    7b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b0c:	28 0f       	add	r18, r24
    7b0e:	39 1f       	adc	r19, r25
    7b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b12:	98 89       	ldd	r25, Y+16	; 0x10
    7b14:	fc 01       	movw	r30, r24
    7b16:	35 83       	std	Z+5, r19	; 0x05
    7b18:	24 83       	std	Z+4, r18	; 0x04
			buffer[len] = 0;
    7b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b1c:	98 89       	ldd	r25, Y+16	; 0x10
    7b1e:	fc 01       	movw	r30, r24
    7b20:	20 81       	ld	r18, Z
    7b22:	31 81       	ldd	r19, Z+1	; 0x01
    7b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b26:	98 89       	ldd	r25, Y+16	; 0x10
    7b28:	fc 01       	movw	r30, r24
    7b2a:	84 81       	ldd	r24, Z+4	; 0x04
    7b2c:	95 81       	ldd	r25, Z+5	; 0x05
    7b2e:	82 0f       	add	r24, r18
    7b30:	93 1f       	adc	r25, r19
    7b32:	fc 01       	movw	r30, r24
    7b34:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    7b36:	8b 89       	ldd	r24, Y+19	; 0x13
    7b38:	9c 89       	ldd	r25, Y+20	; 0x14
    7b3a:	fc 01       	movw	r30, r24
    7b3c:	44 81       	ldd	r20, Z+4	; 0x04
    7b3e:	55 81       	ldd	r21, Z+5	; 0x05
    7b40:	8b 89       	ldd	r24, Y+19	; 0x13
    7b42:	9c 89       	ldd	r25, Y+20	; 0x14
    7b44:	fc 01       	movw	r30, r24
    7b46:	60 81       	ld	r22, Z
    7b48:	71 81       	ldd	r23, Z+1	; 0x01
    7b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b4c:	98 89       	ldd	r25, Y+16	; 0x10
    7b4e:	fc 01       	movw	r30, r24
    7b50:	20 81       	ld	r18, Z
    7b52:	31 81       	ldd	r19, Z+1	; 0x01
    7b54:	8f 81       	ldd	r24, Y+7	; 0x07
    7b56:	98 85       	ldd	r25, Y+8	; 0x08
    7b58:	82 0f       	add	r24, r18
    7b5a:	93 1f       	adc	r25, r19
    7b5c:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
			index--;
    7b60:	8f 81       	ldd	r24, Y+7	; 0x07
    7b62:	98 85       	ldd	r25, Y+8	; 0x08
    7b64:	01 97       	sbiw	r24, 0x01	; 1
    7b66:	98 87       	std	Y+8, r25	; 0x08
    7b68:	8f 83       	std	Y+7, r24	; 0x07
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    7b6a:	82 cf       	rjmp	.-252    	; 0x7a70 <_ZN6String7replaceERKS_S1_+0x27c>
	}
}

void String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return;
    7b6c:	00 00       	nop
    7b6e:	03 c0       	rjmp	.+6      	; 0x7b76 <_ZN6String7replaceERKS_S1_+0x382>
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    7b70:	00 00       	nop
    7b72:	01 c0       	rjmp	.+2      	; 0x7b76 <_ZN6String7replaceERKS_S1_+0x382>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    7b74:	00 00       	nop
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    7b76:	64 96       	adiw	r28, 0x14	; 20
    7b78:	0f b6       	in	r0, 0x3f	; 63
    7b7a:	f8 94       	cli
    7b7c:	de bf       	out	0x3e, r29	; 62
    7b7e:	0f be       	out	0x3f, r0	; 63
    7b80:	cd bf       	out	0x3d, r28	; 61
    7b82:	df 91       	pop	r29
    7b84:	cf 91       	pop	r28
    7b86:	08 95       	ret

00007b88 <_ZN6String6removeEj>:

void String::remove(unsigned int index){
    7b88:	cf 93       	push	r28
    7b8a:	df 93       	push	r29
    7b8c:	00 d0       	rcall	.+0      	; 0x7b8e <_ZN6String6removeEj+0x6>
    7b8e:	1f 92       	push	r1
    7b90:	cd b7       	in	r28, 0x3d	; 61
    7b92:	de b7       	in	r29, 0x3e	; 62
    7b94:	9a 83       	std	Y+2, r25	; 0x02
    7b96:	89 83       	std	Y+1, r24	; 0x01
    7b98:	7c 83       	std	Y+4, r23	; 0x04
    7b9a:	6b 83       	std	Y+3, r22	; 0x03
	// Pass the biggest integer as the count. The remove method
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
    7b9c:	2b 81       	ldd	r18, Y+3	; 0x03
    7b9e:	3c 81       	ldd	r19, Y+4	; 0x04
    7ba0:	89 81       	ldd	r24, Y+1	; 0x01
    7ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    7ba4:	4f ef       	ldi	r20, 0xFF	; 255
    7ba6:	5f ef       	ldi	r21, 0xFF	; 255
    7ba8:	b9 01       	movw	r22, r18
    7baa:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6String6removeEjj>
}
    7bae:	00 00       	nop
    7bb0:	0f 90       	pop	r0
    7bb2:	0f 90       	pop	r0
    7bb4:	0f 90       	pop	r0
    7bb6:	0f 90       	pop	r0
    7bb8:	df 91       	pop	r29
    7bba:	cf 91       	pop	r28
    7bbc:	08 95       	ret

00007bbe <_ZN6String6removeEjj>:

void String::remove(unsigned int index, unsigned int count){
    7bbe:	cf 93       	push	r28
    7bc0:	df 93       	push	r29
    7bc2:	cd b7       	in	r28, 0x3d	; 61
    7bc4:	de b7       	in	r29, 0x3e	; 62
    7bc6:	28 97       	sbiw	r28, 0x08	; 8
    7bc8:	0f b6       	in	r0, 0x3f	; 63
    7bca:	f8 94       	cli
    7bcc:	de bf       	out	0x3e, r29	; 62
    7bce:	0f be       	out	0x3f, r0	; 63
    7bd0:	cd bf       	out	0x3d, r28	; 61
    7bd2:	9c 83       	std	Y+4, r25	; 0x04
    7bd4:	8b 83       	std	Y+3, r24	; 0x03
    7bd6:	7e 83       	std	Y+6, r23	; 0x06
    7bd8:	6d 83       	std	Y+5, r22	; 0x05
    7bda:	58 87       	std	Y+8, r21	; 0x08
    7bdc:	4f 83       	std	Y+7, r20	; 0x07
	if (index >= len) { return; }
    7bde:	8b 81       	ldd	r24, Y+3	; 0x03
    7be0:	9c 81       	ldd	r25, Y+4	; 0x04
    7be2:	fc 01       	movw	r30, r24
    7be4:	24 81       	ldd	r18, Z+4	; 0x04
    7be6:	35 81       	ldd	r19, Z+5	; 0x05
    7be8:	8d 81       	ldd	r24, Y+5	; 0x05
    7bea:	9e 81       	ldd	r25, Y+6	; 0x06
    7bec:	82 17       	cp	r24, r18
    7bee:	93 07       	cpc	r25, r19
    7bf0:	08 f0       	brcs	.+2      	; 0x7bf4 <_ZN6String6removeEjj+0x36>
    7bf2:	65 c0       	rjmp	.+202    	; 0x7cbe <_ZN6String6removeEjj+0x100>
	if (count <= 0) { return; }
    7bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    7bf6:	98 85       	ldd	r25, Y+8	; 0x08
    7bf8:	89 2b       	or	r24, r25
    7bfa:	09 f4       	brne	.+2      	; 0x7bfe <_ZN6String6removeEjj+0x40>
    7bfc:	62 c0       	rjmp	.+196    	; 0x7cc2 <_ZN6String6removeEjj+0x104>
	if (count > len - index) { count = len - index; }
    7bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    7c00:	9c 81       	ldd	r25, Y+4	; 0x04
    7c02:	fc 01       	movw	r30, r24
    7c04:	24 81       	ldd	r18, Z+4	; 0x04
    7c06:	35 81       	ldd	r19, Z+5	; 0x05
    7c08:	8d 81       	ldd	r24, Y+5	; 0x05
    7c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    7c0c:	28 1b       	sub	r18, r24
    7c0e:	39 0b       	sbc	r19, r25
    7c10:	8f 81       	ldd	r24, Y+7	; 0x07
    7c12:	98 85       	ldd	r25, Y+8	; 0x08
    7c14:	28 17       	cp	r18, r24
    7c16:	39 07       	cpc	r19, r25
    7c18:	68 f4       	brcc	.+26     	; 0x7c34 <_ZN6String6removeEjj+0x76>
    7c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c1e:	fc 01       	movw	r30, r24
    7c20:	24 81       	ldd	r18, Z+4	; 0x04
    7c22:	35 81       	ldd	r19, Z+5	; 0x05
    7c24:	8d 81       	ldd	r24, Y+5	; 0x05
    7c26:	9e 81       	ldd	r25, Y+6	; 0x06
    7c28:	a9 01       	movw	r20, r18
    7c2a:	48 1b       	sub	r20, r24
    7c2c:	59 0b       	sbc	r21, r25
    7c2e:	ca 01       	movw	r24, r20
    7c30:	98 87       	std	Y+8, r25	; 0x08
    7c32:	8f 83       	std	Y+7, r24	; 0x07
	char *writeTo = buffer + index;
    7c34:	8b 81       	ldd	r24, Y+3	; 0x03
    7c36:	9c 81       	ldd	r25, Y+4	; 0x04
    7c38:	fc 01       	movw	r30, r24
    7c3a:	20 81       	ld	r18, Z
    7c3c:	31 81       	ldd	r19, Z+1	; 0x01
    7c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    7c40:	9e 81       	ldd	r25, Y+6	; 0x06
    7c42:	82 0f       	add	r24, r18
    7c44:	93 1f       	adc	r25, r19
    7c46:	9a 83       	std	Y+2, r25	; 0x02
    7c48:	89 83       	std	Y+1, r24	; 0x01
	len = len - count;
    7c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c4e:	fc 01       	movw	r30, r24
    7c50:	24 81       	ldd	r18, Z+4	; 0x04
    7c52:	35 81       	ldd	r19, Z+5	; 0x05
    7c54:	8f 81       	ldd	r24, Y+7	; 0x07
    7c56:	98 85       	ldd	r25, Y+8	; 0x08
    7c58:	28 1b       	sub	r18, r24
    7c5a:	39 0b       	sbc	r19, r25
    7c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    7c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    7c60:	fc 01       	movw	r30, r24
    7c62:	35 83       	std	Z+5, r19	; 0x05
    7c64:	24 83       	std	Z+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    7c66:	8b 81       	ldd	r24, Y+3	; 0x03
    7c68:	9c 81       	ldd	r25, Y+4	; 0x04
    7c6a:	fc 01       	movw	r30, r24
    7c6c:	24 81       	ldd	r18, Z+4	; 0x04
    7c6e:	35 81       	ldd	r19, Z+5	; 0x05
    7c70:	8d 81       	ldd	r24, Y+5	; 0x05
    7c72:	9e 81       	ldd	r25, Y+6	; 0x06
    7c74:	b9 01       	movw	r22, r18
    7c76:	68 1b       	sub	r22, r24
    7c78:	79 0b       	sbc	r23, r25
    7c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c7e:	fc 01       	movw	r30, r24
    7c80:	20 81       	ld	r18, Z
    7c82:	31 81       	ldd	r19, Z+1	; 0x01
    7c84:	4d 81       	ldd	r20, Y+5	; 0x05
    7c86:	5e 81       	ldd	r21, Y+6	; 0x06
    7c88:	8f 81       	ldd	r24, Y+7	; 0x07
    7c8a:	98 85       	ldd	r25, Y+8	; 0x08
    7c8c:	84 0f       	add	r24, r20
    7c8e:	95 1f       	adc	r25, r21
    7c90:	28 0f       	add	r18, r24
    7c92:	39 1f       	adc	r19, r25
    7c94:	89 81       	ldd	r24, Y+1	; 0x01
    7c96:	9a 81       	ldd	r25, Y+2	; 0x02
    7c98:	ab 01       	movw	r20, r22
    7c9a:	b9 01       	movw	r22, r18
    7c9c:	0e 94 1e 49 	call	0x923c	; 0x923c <strncpy>
	buffer[len] = 0;
    7ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ca4:	fc 01       	movw	r30, r24
    7ca6:	20 81       	ld	r18, Z
    7ca8:	31 81       	ldd	r19, Z+1	; 0x01
    7caa:	8b 81       	ldd	r24, Y+3	; 0x03
    7cac:	9c 81       	ldd	r25, Y+4	; 0x04
    7cae:	fc 01       	movw	r30, r24
    7cb0:	84 81       	ldd	r24, Z+4	; 0x04
    7cb2:	95 81       	ldd	r25, Z+5	; 0x05
    7cb4:	82 0f       	add	r24, r18
    7cb6:	93 1f       	adc	r25, r19
    7cb8:	fc 01       	movw	r30, r24
    7cba:	10 82       	st	Z, r1
    7cbc:	03 c0       	rjmp	.+6      	; 0x7cc4 <_ZN6String6removeEjj+0x106>
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
	if (index >= len) { return; }
    7cbe:	00 00       	nop
    7cc0:	01 c0       	rjmp	.+2      	; 0x7cc4 <_ZN6String6removeEjj+0x106>
	if (count <= 0) { return; }
    7cc2:	00 00       	nop
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
	len = len - count;
	strncpy(writeTo, buffer + index + count,len - index);
	buffer[len] = 0;
}
    7cc4:	28 96       	adiw	r28, 0x08	; 8
    7cc6:	0f b6       	in	r0, 0x3f	; 63
    7cc8:	f8 94       	cli
    7cca:	de bf       	out	0x3e, r29	; 62
    7ccc:	0f be       	out	0x3f, r0	; 63
    7cce:	cd bf       	out	0x3d, r28	; 61
    7cd0:	df 91       	pop	r29
    7cd2:	cf 91       	pop	r28
    7cd4:	08 95       	ret

00007cd6 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    7cd6:	cf 93       	push	r28
    7cd8:	df 93       	push	r29
    7cda:	00 d0       	rcall	.+0      	; 0x7cdc <_ZN6String11toLowerCaseEv+0x6>
    7cdc:	1f 92       	push	r1
    7cde:	cd b7       	in	r28, 0x3d	; 61
    7ce0:	de b7       	in	r29, 0x3e	; 62
    7ce2:	9c 83       	std	Y+4, r25	; 0x04
    7ce4:	8b 83       	std	Y+3, r24	; 0x03
	if (!buffer) return;
    7ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    7ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    7cea:	fc 01       	movw	r30, r24
    7cec:	80 81       	ld	r24, Z
    7cee:	91 81       	ldd	r25, Z+1	; 0x01
    7cf0:	89 2b       	or	r24, r25
    7cf2:	09 f1       	breq	.+66     	; 0x7d36 <_ZN6String11toLowerCaseEv+0x60>
	for (char *p = buffer; *p; p++) {
    7cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    7cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    7cf8:	fc 01       	movw	r30, r24
    7cfa:	80 81       	ld	r24, Z
    7cfc:	91 81       	ldd	r25, Z+1	; 0x01
    7cfe:	9a 83       	std	Y+2, r25	; 0x02
    7d00:	89 83       	std	Y+1, r24	; 0x01
    7d02:	89 81       	ldd	r24, Y+1	; 0x01
    7d04:	9a 81       	ldd	r25, Y+2	; 0x02
    7d06:	fc 01       	movw	r30, r24
    7d08:	80 81       	ld	r24, Z
    7d0a:	88 23       	and	r24, r24
    7d0c:	a9 f0       	breq	.+42     	; 0x7d38 <_ZN6String11toLowerCaseEv+0x62>
		*p = tolower(*p);
    7d0e:	89 81       	ldd	r24, Y+1	; 0x01
    7d10:	9a 81       	ldd	r25, Y+2	; 0x02
    7d12:	fc 01       	movw	r30, r24
    7d14:	80 81       	ld	r24, Z
    7d16:	08 2e       	mov	r0, r24
    7d18:	00 0c       	add	r0, r0
    7d1a:	99 0b       	sbc	r25, r25
    7d1c:	0e 94 a4 48 	call	0x9148	; 0x9148 <tolower>
    7d20:	28 2f       	mov	r18, r24
    7d22:	89 81       	ldd	r24, Y+1	; 0x01
    7d24:	9a 81       	ldd	r25, Y+2	; 0x02
    7d26:	fc 01       	movw	r30, r24
    7d28:	20 83       	st	Z, r18
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    7d2a:	89 81       	ldd	r24, Y+1	; 0x01
    7d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d2e:	01 96       	adiw	r24, 0x01	; 1
    7d30:	9a 83       	std	Y+2, r25	; 0x02
    7d32:	89 83       	std	Y+1, r24	; 0x01
    7d34:	e6 cf       	rjmp	.-52     	; 0x7d02 <_ZN6String11toLowerCaseEv+0x2c>
	buffer[len] = 0;
}

void String::toLowerCase(void)
{
	if (!buffer) return;
    7d36:	00 00       	nop
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    7d38:	0f 90       	pop	r0
    7d3a:	0f 90       	pop	r0
    7d3c:	0f 90       	pop	r0
    7d3e:	0f 90       	pop	r0
    7d40:	df 91       	pop	r29
    7d42:	cf 91       	pop	r28
    7d44:	08 95       	ret

00007d46 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    7d46:	cf 93       	push	r28
    7d48:	df 93       	push	r29
    7d4a:	00 d0       	rcall	.+0      	; 0x7d4c <_ZN6String11toUpperCaseEv+0x6>
    7d4c:	1f 92       	push	r1
    7d4e:	cd b7       	in	r28, 0x3d	; 61
    7d50:	de b7       	in	r29, 0x3e	; 62
    7d52:	9c 83       	std	Y+4, r25	; 0x04
    7d54:	8b 83       	std	Y+3, r24	; 0x03
	if (!buffer) return;
    7d56:	8b 81       	ldd	r24, Y+3	; 0x03
    7d58:	9c 81       	ldd	r25, Y+4	; 0x04
    7d5a:	fc 01       	movw	r30, r24
    7d5c:	80 81       	ld	r24, Z
    7d5e:	91 81       	ldd	r25, Z+1	; 0x01
    7d60:	89 2b       	or	r24, r25
    7d62:	09 f1       	breq	.+66     	; 0x7da6 <_ZN6String11toUpperCaseEv+0x60>
	for (char *p = buffer; *p; p++) {
    7d64:	8b 81       	ldd	r24, Y+3	; 0x03
    7d66:	9c 81       	ldd	r25, Y+4	; 0x04
    7d68:	fc 01       	movw	r30, r24
    7d6a:	80 81       	ld	r24, Z
    7d6c:	91 81       	ldd	r25, Z+1	; 0x01
    7d6e:	9a 83       	std	Y+2, r25	; 0x02
    7d70:	89 83       	std	Y+1, r24	; 0x01
    7d72:	89 81       	ldd	r24, Y+1	; 0x01
    7d74:	9a 81       	ldd	r25, Y+2	; 0x02
    7d76:	fc 01       	movw	r30, r24
    7d78:	80 81       	ld	r24, Z
    7d7a:	88 23       	and	r24, r24
    7d7c:	a9 f0       	breq	.+42     	; 0x7da8 <_ZN6String11toUpperCaseEv+0x62>
		*p = toupper(*p);
    7d7e:	89 81       	ldd	r24, Y+1	; 0x01
    7d80:	9a 81       	ldd	r25, Y+2	; 0x02
    7d82:	fc 01       	movw	r30, r24
    7d84:	80 81       	ld	r24, Z
    7d86:	08 2e       	mov	r0, r24
    7d88:	00 0c       	add	r0, r0
    7d8a:	99 0b       	sbc	r25, r25
    7d8c:	0e 94 ac 48 	call	0x9158	; 0x9158 <toupper>
    7d90:	28 2f       	mov	r18, r24
    7d92:	89 81       	ldd	r24, Y+1	; 0x01
    7d94:	9a 81       	ldd	r25, Y+2	; 0x02
    7d96:	fc 01       	movw	r30, r24
    7d98:	20 83       	st	Z, r18
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    7d9a:	89 81       	ldd	r24, Y+1	; 0x01
    7d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d9e:	01 96       	adiw	r24, 0x01	; 1
    7da0:	9a 83       	std	Y+2, r25	; 0x02
    7da2:	89 83       	std	Y+1, r24	; 0x01
    7da4:	e6 cf       	rjmp	.-52     	; 0x7d72 <_ZN6String11toUpperCaseEv+0x2c>
	}
}

void String::toUpperCase(void)
{
	if (!buffer) return;
    7da6:	00 00       	nop
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    7da8:	0f 90       	pop	r0
    7daa:	0f 90       	pop	r0
    7dac:	0f 90       	pop	r0
    7dae:	0f 90       	pop	r0
    7db0:	df 91       	pop	r29
    7db2:	cf 91       	pop	r28
    7db4:	08 95       	ret

00007db6 <_ZN6String4trimEv>:

void String::trim(void)
{
    7db6:	cf 93       	push	r28
    7db8:	df 93       	push	r29
    7dba:	00 d0       	rcall	.+0      	; 0x7dbc <_ZN6String4trimEv+0x6>
    7dbc:	00 d0       	rcall	.+0      	; 0x7dbe <_ZN6String4trimEv+0x8>
    7dbe:	cd b7       	in	r28, 0x3d	; 61
    7dc0:	de b7       	in	r29, 0x3e	; 62
    7dc2:	9e 83       	std	Y+6, r25	; 0x06
    7dc4:	8d 83       	std	Y+5, r24	; 0x05
	if (!buffer || len == 0) return;
    7dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    7dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    7dca:	fc 01       	movw	r30, r24
    7dcc:	80 81       	ld	r24, Z
    7dce:	91 81       	ldd	r25, Z+1	; 0x01
    7dd0:	89 2b       	or	r24, r25
    7dd2:	09 f4       	brne	.+2      	; 0x7dd6 <_ZN6String4trimEv+0x20>
    7dd4:	7f c0       	rjmp	.+254    	; 0x7ed4 <_ZN6String4trimEv+0x11e>
    7dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    7dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    7dda:	fc 01       	movw	r30, r24
    7ddc:	84 81       	ldd	r24, Z+4	; 0x04
    7dde:	95 81       	ldd	r25, Z+5	; 0x05
    7de0:	89 2b       	or	r24, r25
    7de2:	09 f4       	brne	.+2      	; 0x7de6 <_ZN6String4trimEv+0x30>
    7de4:	77 c0       	rjmp	.+238    	; 0x7ed4 <_ZN6String4trimEv+0x11e>
	char *begin = buffer;
    7de6:	8d 81       	ldd	r24, Y+5	; 0x05
    7de8:	9e 81       	ldd	r25, Y+6	; 0x06
    7dea:	fc 01       	movw	r30, r24
    7dec:	80 81       	ld	r24, Z
    7dee:	91 81       	ldd	r25, Z+1	; 0x01
    7df0:	9a 83       	std	Y+2, r25	; 0x02
    7df2:	89 83       	std	Y+1, r24	; 0x01
	while (isspace(*begin)) begin++;
    7df4:	89 81       	ldd	r24, Y+1	; 0x01
    7df6:	9a 81       	ldd	r25, Y+2	; 0x02
    7df8:	fc 01       	movw	r30, r24
    7dfa:	80 81       	ld	r24, Z
    7dfc:	08 2e       	mov	r0, r24
    7dfe:	00 0c       	add	r0, r0
    7e00:	99 0b       	sbc	r25, r25
    7e02:	0e 94 9b 48 	call	0x9136	; 0x9136 <isspace>
    7e06:	89 2b       	or	r24, r25
    7e08:	31 f0       	breq	.+12     	; 0x7e16 <_ZN6String4trimEv+0x60>
    7e0a:	89 81       	ldd	r24, Y+1	; 0x01
    7e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e0e:	01 96       	adiw	r24, 0x01	; 1
    7e10:	9a 83       	std	Y+2, r25	; 0x02
    7e12:	89 83       	std	Y+1, r24	; 0x01
    7e14:	ef cf       	rjmp	.-34     	; 0x7df4 <_ZN6String4trimEv+0x3e>
	char *end = buffer + len - 1;
    7e16:	8d 81       	ldd	r24, Y+5	; 0x05
    7e18:	9e 81       	ldd	r25, Y+6	; 0x06
    7e1a:	fc 01       	movw	r30, r24
    7e1c:	20 81       	ld	r18, Z
    7e1e:	31 81       	ldd	r19, Z+1	; 0x01
    7e20:	8d 81       	ldd	r24, Y+5	; 0x05
    7e22:	9e 81       	ldd	r25, Y+6	; 0x06
    7e24:	fc 01       	movw	r30, r24
    7e26:	84 81       	ldd	r24, Z+4	; 0x04
    7e28:	95 81       	ldd	r25, Z+5	; 0x05
    7e2a:	01 97       	sbiw	r24, 0x01	; 1
    7e2c:	82 0f       	add	r24, r18
    7e2e:	93 1f       	adc	r25, r19
    7e30:	9c 83       	std	Y+4, r25	; 0x04
    7e32:	8b 83       	std	Y+3, r24	; 0x03
	while (isspace(*end) && end >= begin) end--;
    7e34:	8b 81       	ldd	r24, Y+3	; 0x03
    7e36:	9c 81       	ldd	r25, Y+4	; 0x04
    7e38:	fc 01       	movw	r30, r24
    7e3a:	80 81       	ld	r24, Z
    7e3c:	08 2e       	mov	r0, r24
    7e3e:	00 0c       	add	r0, r0
    7e40:	99 0b       	sbc	r25, r25
    7e42:	0e 94 9b 48 	call	0x9136	; 0x9136 <isspace>
    7e46:	89 2b       	or	r24, r25
    7e48:	69 f0       	breq	.+26     	; 0x7e64 <_ZN6String4trimEv+0xae>
    7e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    7e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    7e4e:	89 81       	ldd	r24, Y+1	; 0x01
    7e50:	9a 81       	ldd	r25, Y+2	; 0x02
    7e52:	28 17       	cp	r18, r24
    7e54:	39 07       	cpc	r19, r25
    7e56:	30 f0       	brcs	.+12     	; 0x7e64 <_ZN6String4trimEv+0xae>
    7e58:	8b 81       	ldd	r24, Y+3	; 0x03
    7e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    7e5c:	01 97       	sbiw	r24, 0x01	; 1
    7e5e:	9c 83       	std	Y+4, r25	; 0x04
    7e60:	8b 83       	std	Y+3, r24	; 0x03
    7e62:	e8 cf       	rjmp	.-48     	; 0x7e34 <_ZN6String4trimEv+0x7e>
	len = end + 1 - begin;
    7e64:	8b 81       	ldd	r24, Y+3	; 0x03
    7e66:	9c 81       	ldd	r25, Y+4	; 0x04
    7e68:	01 96       	adiw	r24, 0x01	; 1
    7e6a:	9c 01       	movw	r18, r24
    7e6c:	89 81       	ldd	r24, Y+1	; 0x01
    7e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e70:	a9 01       	movw	r20, r18
    7e72:	48 1b       	sub	r20, r24
    7e74:	59 0b       	sbc	r21, r25
    7e76:	ca 01       	movw	r24, r20
    7e78:	9c 01       	movw	r18, r24
    7e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    7e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    7e7e:	fc 01       	movw	r30, r24
    7e80:	35 83       	std	Z+5, r19	; 0x05
    7e82:	24 83       	std	Z+4, r18	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    7e84:	8d 81       	ldd	r24, Y+5	; 0x05
    7e86:	9e 81       	ldd	r25, Y+6	; 0x06
    7e88:	fc 01       	movw	r30, r24
    7e8a:	20 81       	ld	r18, Z
    7e8c:	31 81       	ldd	r19, Z+1	; 0x01
    7e8e:	89 81       	ldd	r24, Y+1	; 0x01
    7e90:	9a 81       	ldd	r25, Y+2	; 0x02
    7e92:	28 17       	cp	r18, r24
    7e94:	39 07       	cpc	r19, r25
    7e96:	78 f4       	brcc	.+30     	; 0x7eb6 <_ZN6String4trimEv+0x100>
    7e98:	8d 81       	ldd	r24, Y+5	; 0x05
    7e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    7e9c:	fc 01       	movw	r30, r24
    7e9e:	44 81       	ldd	r20, Z+4	; 0x04
    7ea0:	55 81       	ldd	r21, Z+5	; 0x05
    7ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    7ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    7ea6:	fc 01       	movw	r30, r24
    7ea8:	80 81       	ld	r24, Z
    7eaa:	91 81       	ldd	r25, Z+1	; 0x01
    7eac:	29 81       	ldd	r18, Y+1	; 0x01
    7eae:	3a 81       	ldd	r19, Y+2	; 0x02
    7eb0:	b9 01       	movw	r22, r18
    7eb2:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
	buffer[len] = 0;
    7eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    7eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    7eba:	fc 01       	movw	r30, r24
    7ebc:	20 81       	ld	r18, Z
    7ebe:	31 81       	ldd	r19, Z+1	; 0x01
    7ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    7ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    7ec4:	fc 01       	movw	r30, r24
    7ec6:	84 81       	ldd	r24, Z+4	; 0x04
    7ec8:	95 81       	ldd	r25, Z+5	; 0x05
    7eca:	82 0f       	add	r24, r18
    7ecc:	93 1f       	adc	r25, r19
    7ece:	fc 01       	movw	r30, r24
    7ed0:	10 82       	st	Z, r1
    7ed2:	01 c0       	rjmp	.+2      	; 0x7ed6 <_ZN6String4trimEv+0x120>
	}
}

void String::trim(void)
{
	if (!buffer || len == 0) return;
    7ed4:	00 00       	nop
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    7ed6:	26 96       	adiw	r28, 0x06	; 6
    7ed8:	0f b6       	in	r0, 0x3f	; 63
    7eda:	f8 94       	cli
    7edc:	de bf       	out	0x3e, r29	; 62
    7ede:	0f be       	out	0x3f, r0	; 63
    7ee0:	cd bf       	out	0x3d, r28	; 61
    7ee2:	df 91       	pop	r29
    7ee4:	cf 91       	pop	r28
    7ee6:	08 95       	ret

00007ee8 <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    7ee8:	cf 93       	push	r28
    7eea:	df 93       	push	r29
    7eec:	1f 92       	push	r1
    7eee:	1f 92       	push	r1
    7ef0:	cd b7       	in	r28, 0x3d	; 61
    7ef2:	de b7       	in	r29, 0x3e	; 62
    7ef4:	9a 83       	std	Y+2, r25	; 0x02
    7ef6:	89 83       	std	Y+1, r24	; 0x01
	if (buffer) return atol(buffer);
    7ef8:	89 81       	ldd	r24, Y+1	; 0x01
    7efa:	9a 81       	ldd	r25, Y+2	; 0x02
    7efc:	fc 01       	movw	r30, r24
    7efe:	80 81       	ld	r24, Z
    7f00:	91 81       	ldd	r25, Z+1	; 0x01
    7f02:	89 2b       	or	r24, r25
    7f04:	51 f0       	breq	.+20     	; 0x7f1a <_ZNK6String5toIntEv+0x32>
    7f06:	89 81       	ldd	r24, Y+1	; 0x01
    7f08:	9a 81       	ldd	r25, Y+2	; 0x02
    7f0a:	fc 01       	movw	r30, r24
    7f0c:	80 81       	ld	r24, Z
    7f0e:	91 81       	ldd	r25, Z+1	; 0x01
    7f10:	0e 94 74 48 	call	0x90e8	; 0x90e8 <atol>
    7f14:	dc 01       	movw	r26, r24
    7f16:	cb 01       	movw	r24, r22
    7f18:	03 c0       	rjmp	.+6      	; 0x7f20 <_ZNK6String5toIntEv+0x38>
	return 0;
    7f1a:	80 e0       	ldi	r24, 0x00	; 0
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	dc 01       	movw	r26, r24
}
    7f20:	bc 01       	movw	r22, r24
    7f22:	cd 01       	movw	r24, r26
    7f24:	0f 90       	pop	r0
    7f26:	0f 90       	pop	r0
    7f28:	df 91       	pop	r29
    7f2a:	cf 91       	pop	r28
    7f2c:	08 95       	ret

00007f2e <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
    7f2e:	cf 93       	push	r28
    7f30:	df 93       	push	r29
    7f32:	1f 92       	push	r1
    7f34:	1f 92       	push	r1
    7f36:	cd b7       	in	r28, 0x3d	; 61
    7f38:	de b7       	in	r29, 0x3e	; 62
    7f3a:	9a 83       	std	Y+2, r25	; 0x02
    7f3c:	89 83       	std	Y+1, r24	; 0x01
	return float(toDouble());
    7f3e:	89 81       	ldd	r24, Y+1	; 0x01
    7f40:	9a 81       	ldd	r25, Y+2	; 0x02
    7f42:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <_ZNK6String8toDoubleEv>
    7f46:	dc 01       	movw	r26, r24
    7f48:	cb 01       	movw	r24, r22
}
    7f4a:	bc 01       	movw	r22, r24
    7f4c:	cd 01       	movw	r24, r26
    7f4e:	0f 90       	pop	r0
    7f50:	0f 90       	pop	r0
    7f52:	df 91       	pop	r29
    7f54:	cf 91       	pop	r28
    7f56:	08 95       	ret

00007f58 <_ZNK6String8toDoubleEv>:

double String::toDouble(void) const
{
    7f58:	cf 93       	push	r28
    7f5a:	df 93       	push	r29
    7f5c:	1f 92       	push	r1
    7f5e:	1f 92       	push	r1
    7f60:	cd b7       	in	r28, 0x3d	; 61
    7f62:	de b7       	in	r29, 0x3e	; 62
    7f64:	9a 83       	std	Y+2, r25	; 0x02
    7f66:	89 83       	std	Y+1, r24	; 0x01
	if (buffer) return atof(buffer);
    7f68:	89 81       	ldd	r24, Y+1	; 0x01
    7f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    7f6c:	fc 01       	movw	r30, r24
    7f6e:	80 81       	ld	r24, Z
    7f70:	91 81       	ldd	r25, Z+1	; 0x01
    7f72:	89 2b       	or	r24, r25
    7f74:	51 f0       	breq	.+20     	; 0x7f8a <_ZNK6String8toDoubleEv+0x32>
    7f76:	89 81       	ldd	r24, Y+1	; 0x01
    7f78:	9a 81       	ldd	r25, Y+2	; 0x02
    7f7a:	fc 01       	movw	r30, r24
    7f7c:	80 81       	ld	r24, Z
    7f7e:	91 81       	ldd	r25, Z+1	; 0x01
    7f80:	0e 94 70 48 	call	0x90e0	; 0x90e0 <atof>
    7f84:	dc 01       	movw	r26, r24
    7f86:	cb 01       	movw	r24, r22
    7f88:	03 c0       	rjmp	.+6      	; 0x7f90 <_ZNK6String8toDoubleEv+0x38>
	return 0;
    7f8a:	80 e0       	ldi	r24, 0x00	; 0
    7f8c:	90 e0       	ldi	r25, 0x00	; 0
    7f8e:	dc 01       	movw	r26, r24
}
    7f90:	bc 01       	movw	r22, r24
    7f92:	cd 01       	movw	r24, r26
    7f94:	0f 90       	pop	r0
    7f96:	0f 90       	pop	r0
    7f98:	df 91       	pop	r29
    7f9a:	cf 91       	pop	r28
    7f9c:	08 95       	ret

00007f9e <_Z12HWReadInputsPh>:
#include <inttypes.h>

void HWReadInputs(uint8_t *dst)
{
    7f9e:	cf 93       	push	r28
    7fa0:	df 93       	push	r29
    7fa2:	1f 92       	push	r1
    7fa4:	1f 92       	push	r1
    7fa6:	cd b7       	in	r28, 0x3d	; 61
    7fa8:	de b7       	in	r29, 0x3e	; 62
    7faa:	9a 83       	std	Y+2, r25	; 0x02
    7fac:	89 83       	std	Y+1, r24	; 0x01
    *dst=0xaa;
    7fae:	89 81       	ldd	r24, Y+1	; 0x01
    7fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    7fb2:	2a ea       	ldi	r18, 0xAA	; 170
    7fb4:	fc 01       	movw	r30, r24
    7fb6:	20 83       	st	Z, r18
}
    7fb8:	00 00       	nop
    7fba:	0f 90       	pop	r0
    7fbc:	0f 90       	pop	r0
    7fbe:	df 91       	pop	r29
    7fc0:	cf 91       	pop	r28
    7fc2:	08 95       	ret

00007fc4 <_Z14HWWriteOutputsPh>:
#include <inttypes.h>
#ifndef WIN
#include <Arduino.h>

void HWWriteOutputs(uint8_t *val)
{
    7fc4:	cf 93       	push	r28
    7fc6:	df 93       	push	r29
    7fc8:	1f 92       	push	r1
    7fca:	1f 92       	push	r1
    7fcc:	cd b7       	in	r28, 0x3d	; 61
    7fce:	de b7       	in	r29, 0x3e	; 62
    7fd0:	9a 83       	std	Y+2, r25	; 0x02
    7fd2:	89 83       	std	Y+1, r24	; 0x01
    Serial.println(*val);
    7fd4:	89 81       	ldd	r24, Y+1	; 0x01
    7fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    7fd8:	fc 01       	movw	r30, r24
    7fda:	80 81       	ld	r24, Z
    7fdc:	4a e0       	ldi	r20, 0x0A	; 10
    7fde:	50 e0       	ldi	r21, 0x00	; 0
    7fe0:	68 2f       	mov	r22, r24
    7fe2:	82 ea       	ldi	r24, 0xA2	; 162
    7fe4:	93 e0       	ldi	r25, 0x03	; 3
    7fe6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print7printlnEhi>
}
    7fea:	00 00       	nop
    7fec:	0f 90       	pop	r0
    7fee:	0f 90       	pop	r0
    7ff0:	df 91       	pop	r29
    7ff2:	cf 91       	pop	r28
    7ff4:	08 95       	ret

00007ff6 <_Z12MainFunctionv>:
#include "Outputs.h"

uint8_t input;

void MainFunction()
{
    7ff6:	cf 93       	push	r28
    7ff8:	df 93       	push	r29
    7ffa:	cd b7       	in	r28, 0x3d	; 61
    7ffc:	de b7       	in	r29, 0x3e	; 62
    ReadInputs(&input);
    7ffe:	80 e5       	ldi	r24, 0x50	; 80
    8000:	96 e0       	ldi	r25, 0x06	; 6
    8002:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <_Z12HWReadInputsPh>
    WriteOutputs(&input);
    8006:	80 e5       	ldi	r24, 0x50	; 80
    8008:	96 e0       	ldi	r25, 0x06	; 6
    800a:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <_Z14HWWriteOutputsPh>
}
    800e:	00 00       	nop
    8010:	df 91       	pop	r29
    8012:	cf 91       	pop	r28
    8014:	08 95       	ret

00008016 <setup>:
#include "Logic.h"
    #ifdef WIN
    #error caca
    #endif // WIN
void setup()
{
    8016:	cf 93       	push	r28
    8018:	df 93       	push	r29
    801a:	cd b7       	in	r28, 0x3d	; 61
    801c:	de b7       	in	r29, 0x3e	; 62
    Serial.begin(9600);
    801e:	40 e8       	ldi	r20, 0x80	; 128
    8020:	55 e2       	ldi	r21, 0x25	; 37
    8022:	60 e0       	ldi	r22, 0x00	; 0
    8024:	70 e0       	ldi	r23, 0x00	; 0
    8026:	82 ea       	ldi	r24, 0xA2	; 162
    8028:	93 e0       	ldi	r25, 0x03	; 3
    802a:	0e 94 d2 42 	call	0x85a4	; 0x85a4 <_ZN14HardwareSerial5beginEm>
}
    802e:	00 00       	nop
    8030:	df 91       	pop	r29
    8032:	cf 91       	pop	r28
    8034:	08 95       	ret

00008036 <loop>:

void loop()
{
    8036:	cf 93       	push	r28
    8038:	df 93       	push	r29
    803a:	cd b7       	in	r28, 0x3d	; 61
    803c:	de b7       	in	r29, 0x3e	; 62
    MainFunction();
    803e:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <_Z12MainFunctionv>
    delay(500);
    8042:	64 ef       	ldi	r22, 0xF4	; 244
    8044:	71 e0       	ldi	r23, 0x01	; 1
    8046:	80 e0       	ldi	r24, 0x00	; 0
    8048:	90 e0       	ldi	r25, 0x00	; 0
    804a:	0e 94 4a 23 	call	0x4694	; 0x4694 <delay>
}
    804e:	00 00       	nop
    8050:	df 91       	pop	r29
    8052:	cf 91       	pop	r28
    8054:	08 95       	ret

00008056 <SWReadInputs>:
#include <inttypes.h>

void SWReadInputs(uint8_t *dst)
{
    8056:	cf 93       	push	r28
    8058:	df 93       	push	r29
    805a:	1f 92       	push	r1
    805c:	1f 92       	push	r1
    805e:	cd b7       	in	r28, 0x3d	; 61
    8060:	de b7       	in	r29, 0x3e	; 62
    8062:	9a 83       	std	Y+2, r25	; 0x02
    8064:	89 83       	std	Y+1, r24	; 0x01
    *dst=0xaa;
    8066:	89 81       	ldd	r24, Y+1	; 0x01
    8068:	9a 81       	ldd	r25, Y+2	; 0x02
    806a:	2a ea       	ldi	r18, 0xAA	; 170
    806c:	fc 01       	movw	r30, r24
    806e:	20 83       	st	Z, r18
}
    8070:	00 00       	nop
    8072:	0f 90       	pop	r0
    8074:	0f 90       	pop	r0
    8076:	df 91       	pop	r29
    8078:	cf 91       	pop	r28
    807a:	08 95       	ret

0000807c <SWWriteOutputs>:
#include <inttypes.h>
#include <stdio.h>

void SWWriteOutputs(uint8_t *val)
{
    807c:	cf 93       	push	r28
    807e:	df 93       	push	r29
    8080:	1f 92       	push	r1
    8082:	1f 92       	push	r1
    8084:	cd b7       	in	r28, 0x3d	; 61
    8086:	de b7       	in	r29, 0x3e	; 62
    8088:	9a 83       	std	Y+2, r25	; 0x02
    808a:	89 83       	std	Y+1, r24	; 0x01
    printf("%d\n", *val);
    808c:	89 81       	ldd	r24, Y+1	; 0x01
    808e:	9a 81       	ldd	r25, Y+2	; 0x02
    8090:	fc 01       	movw	r30, r24
    8092:	80 81       	ld	r24, Z
    8094:	88 2f       	mov	r24, r24
    8096:	90 e0       	ldi	r25, 0x00	; 0
    8098:	29 2f       	mov	r18, r25
    809a:	2f 93       	push	r18
    809c:	8f 93       	push	r24
    809e:	81 e6       	ldi	r24, 0x61	; 97
    80a0:	93 e0       	ldi	r25, 0x03	; 3
    80a2:	89 2f       	mov	r24, r25
    80a4:	8f 93       	push	r24
    80a6:	81 e6       	ldi	r24, 0x61	; 97
    80a8:	93 e0       	ldi	r25, 0x03	; 3
    80aa:	8f 93       	push	r24
    80ac:	0e 94 e9 49 	call	0x93d2	; 0x93d2 <printf>
    80b0:	0f 90       	pop	r0
    80b2:	0f 90       	pop	r0
    80b4:	0f 90       	pop	r0
    80b6:	0f 90       	pop	r0
}
    80b8:	00 00       	nop
    80ba:	0f 90       	pop	r0
    80bc:	0f 90       	pop	r0
    80be:	df 91       	pop	r29
    80c0:	cf 91       	pop	r28
    80c2:	08 95       	ret

000080c4 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    80c4:	cf 93       	push	r28
    80c6:	df 93       	push	r29
    80c8:	1f 92       	push	r1
    80ca:	1f 92       	push	r1
    80cc:	cd b7       	in	r28, 0x3d	; 61
    80ce:	de b7       	in	r29, 0x3e	; 62
    80d0:	9a 83       	std	Y+2, r25	; 0x02
    80d2:	89 83       	std	Y+1, r24	; 0x01
    80d4:	29 e9       	ldi	r18, 0x99	; 153
    80d6:	33 e0       	ldi	r19, 0x03	; 3
    80d8:	89 81       	ldd	r24, Y+1	; 0x01
    80da:	9a 81       	ldd	r25, Y+2	; 0x02
    80dc:	fc 01       	movw	r30, r24
    80de:	31 83       	std	Z+1, r19	; 0x01
    80e0:	20 83       	st	Z, r18
    80e2:	89 81       	ldd	r24, Y+1	; 0x01
    80e4:	9a 81       	ldd	r25, Y+2	; 0x02
    80e6:	fc 01       	movw	r30, r24
    80e8:	13 82       	std	Z+3, r1	; 0x03
    80ea:	12 82       	std	Z+2, r1	; 0x02
    80ec:	00 00       	nop
    80ee:	0f 90       	pop	r0
    80f0:	0f 90       	pop	r0
    80f2:	df 91       	pop	r29
    80f4:	cf 91       	pop	r28
    80f6:	08 95       	ret

000080f8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    80f8:	cf 93       	push	r28
    80fa:	df 93       	push	r29
    80fc:	1f 92       	push	r1
    80fe:	1f 92       	push	r1
    8100:	cd b7       	in	r28, 0x3d	; 61
    8102:	de b7       	in	r29, 0x3e	; 62
    8104:	9a 83       	std	Y+2, r25	; 0x02
    8106:	89 83       	std	Y+1, r24	; 0x01
    8108:	80 e0       	ldi	r24, 0x00	; 0
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	0f 90       	pop	r0
    810e:	0f 90       	pop	r0
    8110:	df 91       	pop	r29
    8112:	cf 91       	pop	r28
    8114:	08 95       	ret

00008116 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    8116:	cf 93       	push	r28
    8118:	df 93       	push	r29
    811a:	1f 92       	push	r1
    811c:	1f 92       	push	r1
    811e:	cd b7       	in	r28, 0x3d	; 61
    8120:	de b7       	in	r29, 0x3e	; 62
    8122:	9a 83       	std	Y+2, r25	; 0x02
    8124:	89 83       	std	Y+1, r24	; 0x01
    8126:	00 00       	nop
    8128:	0f 90       	pop	r0
    812a:	0f 90       	pop	r0
    812c:	df 91       	pop	r29
    812e:	cf 91       	pop	r28
    8130:	08 95       	ret

00008132 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    8132:	cf 93       	push	r28
    8134:	df 93       	push	r29
    8136:	1f 92       	push	r1
    8138:	1f 92       	push	r1
    813a:	cd b7       	in	r28, 0x3d	; 61
    813c:	de b7       	in	r29, 0x3e	; 62
    813e:	9a 83       	std	Y+2, r25	; 0x02
    8140:	89 83       	std	Y+1, r24	; 0x01
    8142:	89 81       	ldd	r24, Y+1	; 0x01
    8144:	9a 81       	ldd	r25, Y+2	; 0x02
    8146:	0e 94 62 40 	call	0x80c4	; 0x80c4 <_ZN5PrintC1Ev>
    814a:	2b e7       	ldi	r18, 0x7B	; 123
    814c:	33 e0       	ldi	r19, 0x03	; 3
    814e:	89 81       	ldd	r24, Y+1	; 0x01
    8150:	9a 81       	ldd	r25, Y+2	; 0x02
    8152:	fc 01       	movw	r30, r24
    8154:	31 83       	std	Z+1, r19	; 0x01
    8156:	20 83       	st	Z, r18
    8158:	29 81       	ldd	r18, Y+1	; 0x01
    815a:	3a 81       	ldd	r19, Y+2	; 0x02
    815c:	88 ee       	ldi	r24, 0xE8	; 232
    815e:	93 e0       	ldi	r25, 0x03	; 3
    8160:	a0 e0       	ldi	r26, 0x00	; 0
    8162:	b0 e0       	ldi	r27, 0x00	; 0
    8164:	f9 01       	movw	r30, r18
    8166:	84 83       	std	Z+4, r24	; 0x04
    8168:	95 83       	std	Z+5, r25	; 0x05
    816a:	a6 83       	std	Z+6, r26	; 0x06
    816c:	b7 83       	std	Z+7, r27	; 0x07
    816e:	00 00       	nop
    8170:	0f 90       	pop	r0
    8172:	0f 90       	pop	r0
    8174:	df 91       	pop	r29
    8176:	cf 91       	pop	r28
    8178:	08 95       	ret

0000817a <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
    817a:	cf 92       	push	r12
    817c:	df 92       	push	r13
    817e:	ef 92       	push	r14
    8180:	ff 92       	push	r15
    8182:	0f 93       	push	r16
    8184:	1f 93       	push	r17
    8186:	cf 93       	push	r28
    8188:	df 93       	push	r29
    818a:	cd b7       	in	r28, 0x3d	; 61
    818c:	de b7       	in	r29, 0x3e	; 62
    818e:	2e 97       	sbiw	r28, 0x0e	; 14
    8190:	0f b6       	in	r0, 0x3f	; 63
    8192:	f8 94       	cli
    8194:	de bf       	out	0x3e, r29	; 62
    8196:	0f be       	out	0x3f, r0	; 63
    8198:	cd bf       	out	0x3d, r28	; 61
    819a:	9a 83       	std	Y+2, r25	; 0x02
    819c:	89 83       	std	Y+1, r24	; 0x01
    819e:	7c 83       	std	Y+4, r23	; 0x04
    81a0:	6b 83       	std	Y+3, r22	; 0x03
    81a2:	5e 83       	std	Y+6, r21	; 0x06
    81a4:	4d 83       	std	Y+5, r20	; 0x05
    81a6:	38 87       	std	Y+8, r19	; 0x08
    81a8:	2f 83       	std	Y+7, r18	; 0x07
    81aa:	1a 87       	std	Y+10, r17	; 0x0a
    81ac:	09 87       	std	Y+9, r16	; 0x09
    81ae:	fc 86       	std	Y+12, r15	; 0x0c
    81b0:	eb 86       	std	Y+11, r14	; 0x0b
    81b2:	de 86       	std	Y+14, r13	; 0x0e
    81b4:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    81b6:	89 81       	ldd	r24, Y+1	; 0x01
    81b8:	9a 81       	ldd	r25, Y+2	; 0x02
    81ba:	0e 94 99 40 	call	0x8132	; 0x8132 <_ZN6StreamC1Ev>
    81be:	29 e6       	ldi	r18, 0x69	; 105
    81c0:	33 e0       	ldi	r19, 0x03	; 3
    81c2:	89 81       	ldd	r24, Y+1	; 0x01
    81c4:	9a 81       	ldd	r25, Y+2	; 0x02
    81c6:	fc 01       	movw	r30, r24
    81c8:	31 83       	std	Z+1, r19	; 0x01
    81ca:	20 83       	st	Z, r18
    81cc:	89 81       	ldd	r24, Y+1	; 0x01
    81ce:	9a 81       	ldd	r25, Y+2	; 0x02
    81d0:	2b 81       	ldd	r18, Y+3	; 0x03
    81d2:	3c 81       	ldd	r19, Y+4	; 0x04
    81d4:	fc 01       	movw	r30, r24
    81d6:	35 87       	std	Z+13, r19	; 0x0d
    81d8:	24 87       	std	Z+12, r18	; 0x0c
    81da:	89 81       	ldd	r24, Y+1	; 0x01
    81dc:	9a 81       	ldd	r25, Y+2	; 0x02
    81de:	2d 81       	ldd	r18, Y+5	; 0x05
    81e0:	3e 81       	ldd	r19, Y+6	; 0x06
    81e2:	fc 01       	movw	r30, r24
    81e4:	37 87       	std	Z+15, r19	; 0x0f
    81e6:	26 87       	std	Z+14, r18	; 0x0e
    81e8:	89 81       	ldd	r24, Y+1	; 0x01
    81ea:	9a 81       	ldd	r25, Y+2	; 0x02
    81ec:	2f 81       	ldd	r18, Y+7	; 0x07
    81ee:	38 85       	ldd	r19, Y+8	; 0x08
    81f0:	fc 01       	movw	r30, r24
    81f2:	31 8b       	std	Z+17, r19	; 0x11
    81f4:	20 8b       	std	Z+16, r18	; 0x10
    81f6:	89 81       	ldd	r24, Y+1	; 0x01
    81f8:	9a 81       	ldd	r25, Y+2	; 0x02
    81fa:	29 85       	ldd	r18, Y+9	; 0x09
    81fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    81fe:	fc 01       	movw	r30, r24
    8200:	33 8b       	std	Z+19, r19	; 0x13
    8202:	22 8b       	std	Z+18, r18	; 0x12
    8204:	89 81       	ldd	r24, Y+1	; 0x01
    8206:	9a 81       	ldd	r25, Y+2	; 0x02
    8208:	2b 85       	ldd	r18, Y+11	; 0x0b
    820a:	3c 85       	ldd	r19, Y+12	; 0x0c
    820c:	fc 01       	movw	r30, r24
    820e:	35 8b       	std	Z+21, r19	; 0x15
    8210:	24 8b       	std	Z+20, r18	; 0x14
    8212:	89 81       	ldd	r24, Y+1	; 0x01
    8214:	9a 81       	ldd	r25, Y+2	; 0x02
    8216:	2d 85       	ldd	r18, Y+13	; 0x0d
    8218:	3e 85       	ldd	r19, Y+14	; 0x0e
    821a:	fc 01       	movw	r30, r24
    821c:	37 8b       	std	Z+23, r19	; 0x17
    821e:	26 8b       	std	Z+22, r18	; 0x16
    8220:	89 81       	ldd	r24, Y+1	; 0x01
    8222:	9a 81       	ldd	r25, Y+2	; 0x02
    8224:	fc 01       	movw	r30, r24
    8226:	11 8e       	std	Z+25, r1	; 0x19
    8228:	89 81       	ldd	r24, Y+1	; 0x01
    822a:	9a 81       	ldd	r25, Y+2	; 0x02
    822c:	fc 01       	movw	r30, r24
    822e:	12 8e       	std	Z+26, r1	; 0x1a
    8230:	89 81       	ldd	r24, Y+1	; 0x01
    8232:	9a 81       	ldd	r25, Y+2	; 0x02
    8234:	fc 01       	movw	r30, r24
    8236:	13 8e       	std	Z+27, r1	; 0x1b
    8238:	89 81       	ldd	r24, Y+1	; 0x01
    823a:	9a 81       	ldd	r25, Y+2	; 0x02
    823c:	fc 01       	movw	r30, r24
    823e:	14 8e       	std	Z+28, r1	; 0x1c
{
}
    8240:	00 00       	nop
    8242:	2e 96       	adiw	r28, 0x0e	; 14
    8244:	0f b6       	in	r0, 0x3f	; 63
    8246:	f8 94       	cli
    8248:	de bf       	out	0x3e, r29	; 62
    824a:	0f be       	out	0x3f, r0	; 63
    824c:	cd bf       	out	0x3d, r28	; 61
    824e:	df 91       	pop	r29
    8250:	cf 91       	pop	r28
    8252:	1f 91       	pop	r17
    8254:	0f 91       	pop	r16
    8256:	ff 90       	pop	r15
    8258:	ef 90       	pop	r14
    825a:	df 90       	pop	r13
    825c:	cf 90       	pop	r12
    825e:	08 95       	ret

00008260 <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
    8260:	cf 93       	push	r28
    8262:	df 93       	push	r29
    8264:	00 d0       	rcall	.+0      	; 0x8266 <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
    8266:	1f 92       	push	r1
    8268:	cd b7       	in	r28, 0x3d	; 61
    826a:	de b7       	in	r29, 0x3e	; 62
    826c:	9c 83       	std	Y+4, r25	; 0x04
    826e:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
    8270:	8b 81       	ldd	r24, Y+3	; 0x03
    8272:	9c 81       	ldd	r25, Y+4	; 0x04
    8274:	fc 01       	movw	r30, r24
    8276:	80 89       	ldd	r24, Z+16	; 0x10
    8278:	91 89       	ldd	r25, Z+17	; 0x11
    827a:	fc 01       	movw	r30, r24
    827c:	80 81       	ld	r24, Z
    827e:	88 2f       	mov	r24, r24
    8280:	90 e0       	ldi	r25, 0x00	; 0
    8282:	84 70       	andi	r24, 0x04	; 4
    8284:	99 27       	eor	r25, r25
    8286:	21 e0       	ldi	r18, 0x01	; 1
    8288:	89 2b       	or	r24, r25
    828a:	09 f0       	breq	.+2      	; 0x828e <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
    828c:	20 e0       	ldi	r18, 0x00	; 0
    828e:	22 23       	and	r18, r18
    8290:	71 f1       	breq	.+92     	; 0x82ee <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    8292:	8b 81       	ldd	r24, Y+3	; 0x03
    8294:	9c 81       	ldd	r25, Y+4	; 0x04
    8296:	fc 01       	movw	r30, r24
    8298:	86 89       	ldd	r24, Z+22	; 0x16
    829a:	97 89       	ldd	r25, Z+23	; 0x17
    829c:	fc 01       	movw	r30, r24
    829e:	80 81       	ld	r24, Z
    82a0:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    82a2:	8b 81       	ldd	r24, Y+3	; 0x03
    82a4:	9c 81       	ldd	r25, Y+4	; 0x04
    82a6:	fc 01       	movw	r30, r24
    82a8:	81 8d       	ldd	r24, Z+25	; 0x19
    82aa:	8f 5f       	subi	r24, 0xFF	; 255
    82ac:	8f 73       	andi	r24, 0x3F	; 63
    82ae:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    82b0:	8b 81       	ldd	r24, Y+3	; 0x03
    82b2:	9c 81       	ldd	r25, Y+4	; 0x04
    82b4:	fc 01       	movw	r30, r24
    82b6:	22 8d       	ldd	r18, Z+26	; 0x1a
    82b8:	81 e0       	ldi	r24, 0x01	; 1
    82ba:	9a 81       	ldd	r25, Y+2	; 0x02
    82bc:	29 17       	cp	r18, r25
    82be:	09 f4       	brne	.+2      	; 0x82c2 <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
    82c0:	80 e0       	ldi	r24, 0x00	; 0
    82c2:	88 23       	and	r24, r24
    82c4:	d9 f0       	breq	.+54     	; 0x82fc <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
    82c6:	8b 81       	ldd	r24, Y+3	; 0x03
    82c8:	9c 81       	ldd	r25, Y+4	; 0x04
    82ca:	fc 01       	movw	r30, r24
    82cc:	81 8d       	ldd	r24, Z+25	; 0x19
    82ce:	88 2f       	mov	r24, r24
    82d0:	90 e0       	ldi	r25, 0x00	; 0
    82d2:	2b 81       	ldd	r18, Y+3	; 0x03
    82d4:	3c 81       	ldd	r19, Y+4	; 0x04
    82d6:	82 0f       	add	r24, r18
    82d8:	93 1f       	adc	r25, r19
    82da:	4d 96       	adiw	r24, 0x1d	; 29
    82dc:	29 81       	ldd	r18, Y+1	; 0x01
    82de:	fc 01       	movw	r30, r24
    82e0:	20 83       	st	Z, r18
      _rx_buffer_head = i;
    82e2:	8b 81       	ldd	r24, Y+3	; 0x03
    82e4:	9c 81       	ldd	r25, Y+4	; 0x04
    82e6:	2a 81       	ldd	r18, Y+2	; 0x02
    82e8:	fc 01       	movw	r30, r24
    82ea:	21 8f       	std	Z+25, r18	; 0x19
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
  };
}
    82ec:	07 c0       	rjmp	.+14     	; 0x82fc <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
      _rx_buffer[_rx_buffer_head] = c;
      _rx_buffer_head = i;
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    82ee:	8b 81       	ldd	r24, Y+3	; 0x03
    82f0:	9c 81       	ldd	r25, Y+4	; 0x04
    82f2:	fc 01       	movw	r30, r24
    82f4:	86 89       	ldd	r24, Z+22	; 0x16
    82f6:	97 89       	ldd	r25, Z+23	; 0x17
    82f8:	fc 01       	movw	r30, r24
    82fa:	80 81       	ld	r24, Z
  };
}
    82fc:	00 00       	nop
    82fe:	0f 90       	pop	r0
    8300:	0f 90       	pop	r0
    8302:	0f 90       	pop	r0
    8304:	0f 90       	pop	r0
    8306:	df 91       	pop	r29
    8308:	cf 91       	pop	r28
    830a:	08 95       	ret

0000830c <_ZN9PrintableC1Ev>:
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
    830c:	cf 93       	push	r28
    830e:	df 93       	push	r29
    8310:	1f 92       	push	r1
    8312:	1f 92       	push	r1
    8314:	cd b7       	in	r28, 0x3d	; 61
    8316:	de b7       	in	r29, 0x3e	; 62
    8318:	9a 83       	std	Y+2, r25	; 0x02
    831a:	89 83       	std	Y+1, r24	; 0x01
    831c:	23 e9       	ldi	r18, 0x93	; 147
    831e:	33 e0       	ldi	r19, 0x03	; 3
    8320:	89 81       	ldd	r24, Y+1	; 0x01
    8322:	9a 81       	ldd	r25, Y+2	; 0x02
    8324:	fc 01       	movw	r30, r24
    8326:	31 83       	std	Z+1, r19	; 0x01
    8328:	20 83       	st	Z, r18
    832a:	00 00       	nop
    832c:	0f 90       	pop	r0
    832e:	0f 90       	pop	r0
    8330:	df 91       	pop	r29
    8332:	cf 91       	pop	r28
    8334:	08 95       	ret

00008336 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    8336:	cf 93       	push	r28
    8338:	df 93       	push	r29
    833a:	1f 92       	push	r1
    833c:	1f 92       	push	r1
    833e:	cd b7       	in	r28, 0x3d	; 61
    8340:	de b7       	in	r29, 0x3e	; 62
    8342:	9a 83       	std	Y+2, r25	; 0x02
    8344:	89 83       	std	Y+1, r24	; 0x01
    8346:	89 81       	ldd	r24, Y+1	; 0x01
    8348:	9a 81       	ldd	r25, Y+2	; 0x02
    834a:	fc 01       	movw	r30, r24
    834c:	84 81       	ldd	r24, Z+4	; 0x04
    834e:	95 81       	ldd	r25, Z+5	; 0x05
    8350:	0f 90       	pop	r0
    8352:	0f 90       	pop	r0
    8354:	df 91       	pop	r29
    8356:	cf 91       	pop	r28
    8358:	08 95       	ret

0000835a <_ZNK6String5c_strEv>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    835a:	cf 93       	push	r28
    835c:	df 93       	push	r29
    835e:	1f 92       	push	r1
    8360:	1f 92       	push	r1
    8362:	cd b7       	in	r28, 0x3d	; 61
    8364:	de b7       	in	r29, 0x3e	; 62
    8366:	9a 83       	std	Y+2, r25	; 0x02
    8368:	89 83       	std	Y+1, r24	; 0x01
    836a:	89 81       	ldd	r24, Y+1	; 0x01
    836c:	9a 81       	ldd	r25, Y+2	; 0x02
    836e:	fc 01       	movw	r30, r24
    8370:	80 81       	ld	r24, Z
    8372:	91 81       	ldd	r25, Z+1	; 0x01
    8374:	0f 90       	pop	r0
    8376:	0f 90       	pop	r0
    8378:	df 91       	pop	r29
    837a:	cf 91       	pop	r28
    837c:	08 95       	ret

0000837e <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    837e:	0f 93       	push	r16
    8380:	1f 93       	push	r17
    8382:	cf 93       	push	r28
    8384:	df 93       	push	r29
    8386:	00 d0       	rcall	.+0      	; 0x8388 <_ZN5Print5writeEPKc+0xa>
    8388:	1f 92       	push	r1
    838a:	cd b7       	in	r28, 0x3d	; 61
    838c:	de b7       	in	r29, 0x3e	; 62
    838e:	9a 83       	std	Y+2, r25	; 0x02
    8390:	89 83       	std	Y+1, r24	; 0x01
    8392:	7c 83       	std	Y+4, r23	; 0x04
    8394:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
    8396:	8b 81       	ldd	r24, Y+3	; 0x03
    8398:	9c 81       	ldd	r25, Y+4	; 0x04
    839a:	89 2b       	or	r24, r25
    839c:	19 f4       	brne	.+6      	; 0x83a4 <_ZN5Print5writeEPKc+0x26>
    839e:	80 e0       	ldi	r24, 0x00	; 0
    83a0:	90 e0       	ldi	r25, 0x00	; 0
    83a2:	15 c0       	rjmp	.+42     	; 0x83ce <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
    83a4:	89 81       	ldd	r24, Y+1	; 0x01
    83a6:	9a 81       	ldd	r25, Y+2	; 0x02
    83a8:	fc 01       	movw	r30, r24
    83aa:	80 81       	ld	r24, Z
    83ac:	91 81       	ldd	r25, Z+1	; 0x01
    83ae:	02 96       	adiw	r24, 0x02	; 2
    83b0:	fc 01       	movw	r30, r24
    83b2:	00 81       	ld	r16, Z
    83b4:	11 81       	ldd	r17, Z+1	; 0x01
    83b6:	8b 81       	ldd	r24, Y+3	; 0x03
    83b8:	9c 81       	ldd	r25, Y+4	; 0x04
    83ba:	0e 94 07 49 	call	0x920e	; 0x920e <strlen>
    83be:	ac 01       	movw	r20, r24
    83c0:	2b 81       	ldd	r18, Y+3	; 0x03
    83c2:	3c 81       	ldd	r19, Y+4	; 0x04
    83c4:	89 81       	ldd	r24, Y+1	; 0x01
    83c6:	9a 81       	ldd	r25, Y+2	; 0x02
    83c8:	b9 01       	movw	r22, r18
    83ca:	f8 01       	movw	r30, r16
    83cc:	19 95       	eicall
    }
    83ce:	0f 90       	pop	r0
    83d0:	0f 90       	pop	r0
    83d2:	0f 90       	pop	r0
    83d4:	0f 90       	pop	r0
    83d6:	df 91       	pop	r29
    83d8:	cf 91       	pop	r28
    83da:	1f 91       	pop	r17
    83dc:	0f 91       	pop	r16
    83de:	08 95       	ret

000083e0 <_ZN5Print5writeEPKcj>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
    83e0:	cf 93       	push	r28
    83e2:	df 93       	push	r29
    83e4:	00 d0       	rcall	.+0      	; 0x83e6 <_ZN5Print5writeEPKcj+0x6>
    83e6:	00 d0       	rcall	.+0      	; 0x83e8 <_ZN5Print5writeEPKcj+0x8>
    83e8:	cd b7       	in	r28, 0x3d	; 61
    83ea:	de b7       	in	r29, 0x3e	; 62
    83ec:	9a 83       	std	Y+2, r25	; 0x02
    83ee:	89 83       	std	Y+1, r24	; 0x01
    83f0:	7c 83       	std	Y+4, r23	; 0x04
    83f2:	6b 83       	std	Y+3, r22	; 0x03
    83f4:	5e 83       	std	Y+6, r21	; 0x06
    83f6:	4d 83       	std	Y+5, r20	; 0x05
      return write((const uint8_t *)buffer, size);
    83f8:	89 81       	ldd	r24, Y+1	; 0x01
    83fa:	9a 81       	ldd	r25, Y+2	; 0x02
    83fc:	fc 01       	movw	r30, r24
    83fe:	80 81       	ld	r24, Z
    8400:	91 81       	ldd	r25, Z+1	; 0x01
    8402:	02 96       	adiw	r24, 0x02	; 2
    8404:	fc 01       	movw	r30, r24
    8406:	20 81       	ld	r18, Z
    8408:	31 81       	ldd	r19, Z+1	; 0x01
    840a:	4d 81       	ldd	r20, Y+5	; 0x05
    840c:	5e 81       	ldd	r21, Y+6	; 0x06
    840e:	6b 81       	ldd	r22, Y+3	; 0x03
    8410:	7c 81       	ldd	r23, Y+4	; 0x04
    8412:	89 81       	ldd	r24, Y+1	; 0x01
    8414:	9a 81       	ldd	r25, Y+2	; 0x02
    8416:	f9 01       	movw	r30, r18
    8418:	19 95       	eicall
    }
    841a:	26 96       	adiw	r28, 0x06	; 6
    841c:	0f b6       	in	r0, 0x3f	; 63
    841e:	f8 94       	cli
    8420:	de bf       	out	0x3e, r29	; 62
    8422:	0f be       	out	0x3f, r0	; 63
    8424:	cd bf       	out	0x3d, r28	; 61
    8426:	df 91       	pop	r29
    8428:	cf 91       	pop	r28
    842a:	08 95       	ret

0000842c <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    842c:	cf 93       	push	r28
    842e:	df 93       	push	r29
    8430:	00 d0       	rcall	.+0      	; 0x8432 <_ZN6StringpLEc+0x6>
    8432:	cd b7       	in	r28, 0x3d	; 61
    8434:	de b7       	in	r29, 0x3e	; 62
    8436:	9a 83       	std	Y+2, r25	; 0x02
    8438:	89 83       	std	Y+1, r24	; 0x01
    843a:	6b 83       	std	Y+3, r22	; 0x03
    843c:	89 81       	ldd	r24, Y+1	; 0x01
    843e:	9a 81       	ldd	r25, Y+2	; 0x02
    8440:	6b 81       	ldd	r22, Y+3	; 0x03
    8442:	0e 94 b4 31 	call	0x6368	; 0x6368 <_ZN6String6concatEc>
    8446:	89 81       	ldd	r24, Y+1	; 0x01
    8448:	9a 81       	ldd	r25, Y+2	; 0x02
    844a:	0f 90       	pop	r0
    844c:	0f 90       	pop	r0
    844e:	0f 90       	pop	r0
    8450:	df 91       	pop	r29
    8452:	cf 91       	pop	r28
    8454:	08 95       	ret
#ifdef  __DOXYGEN__
extern char *itoa(int val, char *s, int radix);
#else
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    8456:	cf 93       	push	r28
    8458:	df 93       	push	r29
    845a:	00 d0       	rcall	.+0      	; 0x845c <_ZN6StringpLEc+0x30>
    845c:	00 d0       	rcall	.+0      	; 0x845e <_ZN6StringpLEc+0x32>
    845e:	cd b7       	in	r28, 0x3d	; 61
    8460:	de b7       	in	r29, 0x3e	; 62
    8462:	9a 83       	std	Y+2, r25	; 0x02
    8464:	89 83       	std	Y+1, r24	; 0x01
    8466:	7c 83       	std	Y+4, r23	; 0x04
    8468:	6b 83       	std	Y+3, r22	; 0x03
    846a:	5e 83       	std	Y+6, r21	; 0x06
    846c:	4d 83       	std	Y+5, r20	; 0x05
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    846e:	4d 81       	ldd	r20, Y+5	; 0x05
    8470:	5e 81       	ldd	r21, Y+6	; 0x06
    8472:	2b 81       	ldd	r18, Y+3	; 0x03
    8474:	3c 81       	ldd	r19, Y+4	; 0x04
    8476:	89 81       	ldd	r24, Y+1	; 0x01
    8478:	9a 81       	ldd	r25, Y+2	; 0x02
    847a:	b9 01       	movw	r22, r18
    847c:	0e 94 52 49 	call	0x92a4	; 0x92a4 <itoa>
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    }
}
    8480:	26 96       	adiw	r28, 0x06	; 6
    8482:	0f b6       	in	r0, 0x3f	; 63
    8484:	f8 94       	cli
    8486:	de bf       	out	0x3e, r29	; 62
    8488:	0f be       	out	0x3f, r0	; 63
    848a:	cd bf       	out	0x3d, r28	; 61
    848c:	df 91       	pop	r29
    848e:	cf 91       	pop	r28
    8490:	08 95       	ret
#ifdef  __DOXYGEN__
extern char *ltoa(long val, char *s, int radix);
#else
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    8492:	cf 93       	push	r28
    8494:	df 93       	push	r29
    8496:	cd b7       	in	r28, 0x3d	; 61
    8498:	de b7       	in	r29, 0x3e	; 62
    849a:	28 97       	sbiw	r28, 0x08	; 8
    849c:	0f b6       	in	r0, 0x3f	; 63
    849e:	f8 94       	cli
    84a0:	de bf       	out	0x3e, r29	; 62
    84a2:	0f be       	out	0x3f, r0	; 63
    84a4:	cd bf       	out	0x3d, r28	; 61
    84a6:	69 83       	std	Y+1, r22	; 0x01
    84a8:	7a 83       	std	Y+2, r23	; 0x02
    84aa:	8b 83       	std	Y+3, r24	; 0x03
    84ac:	9c 83       	std	Y+4, r25	; 0x04
    84ae:	5e 83       	std	Y+6, r21	; 0x06
    84b0:	4d 83       	std	Y+5, r20	; 0x05
    84b2:	38 87       	std	Y+8, r19	; 0x08
    84b4:	2f 83       	std	Y+7, r18	; 0x07
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    84b6:	2f 81       	ldd	r18, Y+7	; 0x07
    84b8:	38 85       	ldd	r19, Y+8	; 0x08
    84ba:	4d 81       	ldd	r20, Y+5	; 0x05
    84bc:	5e 81       	ldd	r21, Y+6	; 0x06
    84be:	89 81       	ldd	r24, Y+1	; 0x01
    84c0:	9a 81       	ldd	r25, Y+2	; 0x02
    84c2:	ab 81       	ldd	r26, Y+3	; 0x03
    84c4:	bc 81       	ldd	r27, Y+4	; 0x04
    84c6:	bc 01       	movw	r22, r24
    84c8:	cd 01       	movw	r24, r26
    84ca:	0e 94 68 49 	call	0x92d0	; 0x92d0 <ltoa>
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    }
}
    84ce:	28 96       	adiw	r28, 0x08	; 8
    84d0:	0f b6       	in	r0, 0x3f	; 63
    84d2:	f8 94       	cli
    84d4:	de bf       	out	0x3e, r29	; 62
    84d6:	0f be       	out	0x3f, r0	; 63
    84d8:	cd bf       	out	0x3d, r28	; 61
    84da:	df 91       	pop	r29
    84dc:	cf 91       	pop	r28
    84de:	08 95       	ret
#ifdef  __DOXYGEN__
extern char *utoa(unsigned int val, char *s, int radix);
#else
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    84e0:	cf 93       	push	r28
    84e2:	df 93       	push	r29
    84e4:	00 d0       	rcall	.+0      	; 0x84e6 <_ZN6StringpLEc+0xba>
    84e6:	00 d0       	rcall	.+0      	; 0x84e8 <_ZN6StringpLEc+0xbc>
    84e8:	cd b7       	in	r28, 0x3d	; 61
    84ea:	de b7       	in	r29, 0x3e	; 62
    84ec:	9a 83       	std	Y+2, r25	; 0x02
    84ee:	89 83       	std	Y+1, r24	; 0x01
    84f0:	7c 83       	std	Y+4, r23	; 0x04
    84f2:	6b 83       	std	Y+3, r22	; 0x03
    84f4:	5e 83       	std	Y+6, r21	; 0x06
    84f6:	4d 83       	std	Y+5, r20	; 0x05
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    84f8:	4d 81       	ldd	r20, Y+5	; 0x05
    84fa:	5e 81       	ldd	r21, Y+6	; 0x06
    84fc:	2b 81       	ldd	r18, Y+3	; 0x03
    84fe:	3c 81       	ldd	r19, Y+4	; 0x04
    8500:	89 81       	ldd	r24, Y+1	; 0x01
    8502:	9a 81       	ldd	r25, Y+2	; 0x02
    8504:	b9 01       	movw	r22, r18
    8506:	0e 94 c4 49 	call	0x9388	; 0x9388 <utoa>
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    }
}
    850a:	26 96       	adiw	r28, 0x06	; 6
    850c:	0f b6       	in	r0, 0x3f	; 63
    850e:	f8 94       	cli
    8510:	de bf       	out	0x3e, r29	; 62
    8512:	0f be       	out	0x3f, r0	; 63
    8514:	cd bf       	out	0x3d, r28	; 61
    8516:	df 91       	pop	r29
    8518:	cf 91       	pop	r28
    851a:	08 95       	ret
#ifdef  __DOXYGEN__
extern char *ultoa(unsigned long val, char *s, int radix);
#else
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    851c:	cf 93       	push	r28
    851e:	df 93       	push	r29
    8520:	cd b7       	in	r28, 0x3d	; 61
    8522:	de b7       	in	r29, 0x3e	; 62
    8524:	28 97       	sbiw	r28, 0x08	; 8
    8526:	0f b6       	in	r0, 0x3f	; 63
    8528:	f8 94       	cli
    852a:	de bf       	out	0x3e, r29	; 62
    852c:	0f be       	out	0x3f, r0	; 63
    852e:	cd bf       	out	0x3d, r28	; 61
    8530:	69 83       	std	Y+1, r22	; 0x01
    8532:	7a 83       	std	Y+2, r23	; 0x02
    8534:	8b 83       	std	Y+3, r24	; 0x03
    8536:	9c 83       	std	Y+4, r25	; 0x04
    8538:	5e 83       	std	Y+6, r21	; 0x06
    853a:	4d 83       	std	Y+5, r20	; 0x05
    853c:	38 87       	std	Y+8, r19	; 0x08
    853e:	2f 83       	std	Y+7, r18	; 0x07
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    8540:	2f 81       	ldd	r18, Y+7	; 0x07
    8542:	38 85       	ldd	r19, Y+8	; 0x08
    8544:	4d 81       	ldd	r20, Y+5	; 0x05
    8546:	5e 81       	ldd	r21, Y+6	; 0x06
    8548:	89 81       	ldd	r24, Y+1	; 0x01
    854a:	9a 81       	ldd	r25, Y+2	; 0x02
    854c:	ab 81       	ldd	r26, Y+3	; 0x03
    854e:	bc 81       	ldd	r27, Y+4	; 0x04
    8550:	bc 01       	movw	r22, r24
    8552:	cd 01       	movw	r24, r26
    8554:	0e 94 97 49 	call	0x932e	; 0x932e <ultoa>
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    }
}
    8558:	28 96       	adiw	r28, 0x08	; 8
    855a:	0f b6       	in	r0, 0x3f	; 63
    855c:	f8 94       	cli
    855e:	de bf       	out	0x3e, r29	; 62
    8560:	0f be       	out	0x3f, r0	; 63
    8562:	cd bf       	out	0x3d, r28	; 61
    8564:	df 91       	pop	r29
    8566:	cf 91       	pop	r28
    8568:	08 95       	ret

0000856a <_ZN6String4initEv>:
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
    856a:	cf 93       	push	r28
    856c:	df 93       	push	r29
    856e:	1f 92       	push	r1
    8570:	1f 92       	push	r1
    8572:	cd b7       	in	r28, 0x3d	; 61
    8574:	de b7       	in	r29, 0x3e	; 62
    8576:	9a 83       	std	Y+2, r25	; 0x02
    8578:	89 83       	std	Y+1, r24	; 0x01
	buffer = NULL;
    857a:	89 81       	ldd	r24, Y+1	; 0x01
    857c:	9a 81       	ldd	r25, Y+2	; 0x02
    857e:	fc 01       	movw	r30, r24
    8580:	11 82       	std	Z+1, r1	; 0x01
    8582:	10 82       	st	Z, r1
	capacity = 0;
    8584:	89 81       	ldd	r24, Y+1	; 0x01
    8586:	9a 81       	ldd	r25, Y+2	; 0x02
    8588:	fc 01       	movw	r30, r24
    858a:	13 82       	std	Z+3, r1	; 0x03
    858c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    858e:	89 81       	ldd	r24, Y+1	; 0x01
    8590:	9a 81       	ldd	r25, Y+2	; 0x02
    8592:	fc 01       	movw	r30, r24
    8594:	15 82       	std	Z+5, r1	; 0x05
    8596:	14 82       	std	Z+4, r1	; 0x04
}
    8598:	00 00       	nop
    859a:	0f 90       	pop	r0
    859c:	0f 90       	pop	r0
    859e:	df 91       	pop	r29
    85a0:	cf 91       	pop	r28
    85a2:	08 95       	ret

000085a4 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    85a4:	cf 93       	push	r28
    85a6:	df 93       	push	r29
    85a8:	00 d0       	rcall	.+0      	; 0x85aa <_ZN14HardwareSerial5beginEm+0x6>
    85aa:	00 d0       	rcall	.+0      	; 0x85ac <_ZN14HardwareSerial5beginEm+0x8>
    85ac:	cd b7       	in	r28, 0x3d	; 61
    85ae:	de b7       	in	r29, 0x3e	; 62
    85b0:	9a 83       	std	Y+2, r25	; 0x02
    85b2:	89 83       	std	Y+1, r24	; 0x01
    85b4:	4b 83       	std	Y+3, r20	; 0x03
    85b6:	5c 83       	std	Y+4, r21	; 0x04
    85b8:	6d 83       	std	Y+5, r22	; 0x05
    85ba:	7e 83       	std	Y+6, r23	; 0x06
    85bc:	8b 81       	ldd	r24, Y+3	; 0x03
    85be:	9c 81       	ldd	r25, Y+4	; 0x04
    85c0:	ad 81       	ldd	r26, Y+5	; 0x05
    85c2:	be 81       	ldd	r27, Y+6	; 0x06
    85c4:	e9 81       	ldd	r30, Y+1	; 0x01
    85c6:	fa 81       	ldd	r31, Y+2	; 0x02
    85c8:	26 e0       	ldi	r18, 0x06	; 6
    85ca:	ac 01       	movw	r20, r24
    85cc:	bd 01       	movw	r22, r26
    85ce:	cf 01       	movw	r24, r30
    85d0:	0e 94 1b 03 	call	0x636	; 0x636 <_ZN14HardwareSerial5beginEmh>
    85d4:	00 00       	nop
    85d6:	26 96       	adiw	r28, 0x06	; 6
    85d8:	0f b6       	in	r0, 0x3f	; 63
    85da:	f8 94       	cli
    85dc:	de bf       	out	0x3e, r29	; 62
    85de:	0f be       	out	0x3f, r0	; 63
    85e0:	cd bf       	out	0x3d, r28	; 61
    85e2:	df 91       	pop	r29
    85e4:	cf 91       	pop	r28
    85e6:	08 95       	ret

000085e8 <__mulsi3>:
    85e8:	db 01       	movw	r26, r22
    85ea:	8f 93       	push	r24
    85ec:	9f 93       	push	r25
    85ee:	0e 94 4d 43 	call	0x869a	; 0x869a <__muluhisi3>
    85f2:	bf 91       	pop	r27
    85f4:	af 91       	pop	r26
    85f6:	a2 9f       	mul	r26, r18
    85f8:	80 0d       	add	r24, r0
    85fa:	91 1d       	adc	r25, r1
    85fc:	a3 9f       	mul	r26, r19
    85fe:	90 0d       	add	r25, r0
    8600:	b2 9f       	mul	r27, r18
    8602:	90 0d       	add	r25, r0
    8604:	11 24       	eor	r1, r1
    8606:	08 95       	ret

00008608 <__udivmodsi4>:
    8608:	a1 e2       	ldi	r26, 0x21	; 33
    860a:	1a 2e       	mov	r1, r26
    860c:	aa 1b       	sub	r26, r26
    860e:	bb 1b       	sub	r27, r27
    8610:	fd 01       	movw	r30, r26
    8612:	0d c0       	rjmp	.+26     	; 0x862e <__udivmodsi4_ep>

00008614 <__udivmodsi4_loop>:
    8614:	aa 1f       	adc	r26, r26
    8616:	bb 1f       	adc	r27, r27
    8618:	ee 1f       	adc	r30, r30
    861a:	ff 1f       	adc	r31, r31
    861c:	a2 17       	cp	r26, r18
    861e:	b3 07       	cpc	r27, r19
    8620:	e4 07       	cpc	r30, r20
    8622:	f5 07       	cpc	r31, r21
    8624:	20 f0       	brcs	.+8      	; 0x862e <__udivmodsi4_ep>
    8626:	a2 1b       	sub	r26, r18
    8628:	b3 0b       	sbc	r27, r19
    862a:	e4 0b       	sbc	r30, r20
    862c:	f5 0b       	sbc	r31, r21

0000862e <__udivmodsi4_ep>:
    862e:	66 1f       	adc	r22, r22
    8630:	77 1f       	adc	r23, r23
    8632:	88 1f       	adc	r24, r24
    8634:	99 1f       	adc	r25, r25
    8636:	1a 94       	dec	r1
    8638:	69 f7       	brne	.-38     	; 0x8614 <__udivmodsi4_loop>
    863a:	60 95       	com	r22
    863c:	70 95       	com	r23
    863e:	80 95       	com	r24
    8640:	90 95       	com	r25
    8642:	9b 01       	movw	r18, r22
    8644:	ac 01       	movw	r20, r24
    8646:	bd 01       	movw	r22, r26
    8648:	cf 01       	movw	r24, r30
    864a:	08 95       	ret

0000864c <__divmodsi4>:
    864c:	05 2e       	mov	r0, r21
    864e:	97 fb       	bst	r25, 7
    8650:	1e f4       	brtc	.+6      	; 0x8658 <__divmodsi4+0xc>
    8652:	00 94       	com	r0
    8654:	0e 94 3d 43 	call	0x867a	; 0x867a <__negsi2>
    8658:	57 fd       	sbrc	r21, 7
    865a:	07 d0       	rcall	.+14     	; 0x866a <__divmodsi4_neg2>
    865c:	0e 94 04 43 	call	0x8608	; 0x8608 <__udivmodsi4>
    8660:	07 fc       	sbrc	r0, 7
    8662:	03 d0       	rcall	.+6      	; 0x866a <__divmodsi4_neg2>
    8664:	4e f4       	brtc	.+18     	; 0x8678 <__divmodsi4_exit>
    8666:	0c 94 3d 43 	jmp	0x867a	; 0x867a <__negsi2>

0000866a <__divmodsi4_neg2>:
    866a:	50 95       	com	r21
    866c:	40 95       	com	r20
    866e:	30 95       	com	r19
    8670:	21 95       	neg	r18
    8672:	3f 4f       	sbci	r19, 0xFF	; 255
    8674:	4f 4f       	sbci	r20, 0xFF	; 255
    8676:	5f 4f       	sbci	r21, 0xFF	; 255

00008678 <__divmodsi4_exit>:
    8678:	08 95       	ret

0000867a <__negsi2>:
    867a:	90 95       	com	r25
    867c:	80 95       	com	r24
    867e:	70 95       	com	r23
    8680:	61 95       	neg	r22
    8682:	7f 4f       	sbci	r23, 0xFF	; 255
    8684:	8f 4f       	sbci	r24, 0xFF	; 255
    8686:	9f 4f       	sbci	r25, 0xFF	; 255
    8688:	08 95       	ret

0000868a <__tablejump2__>:
    868a:	ee 0f       	add	r30, r30
    868c:	ff 1f       	adc	r31, r31
    868e:	88 1f       	adc	r24, r24
    8690:	8b bf       	out	0x3b, r24	; 59
    8692:	07 90       	elpm	r0, Z+
    8694:	f6 91       	elpm	r31, Z
    8696:	e0 2d       	mov	r30, r0
    8698:	19 94       	eijmp

0000869a <__muluhisi3>:
    869a:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__umulhisi3>
    869e:	a5 9f       	mul	r26, r21
    86a0:	90 0d       	add	r25, r0
    86a2:	b4 9f       	mul	r27, r20
    86a4:	90 0d       	add	r25, r0
    86a6:	a4 9f       	mul	r26, r20
    86a8:	80 0d       	add	r24, r0
    86aa:	91 1d       	adc	r25, r1
    86ac:	11 24       	eor	r1, r1
    86ae:	08 95       	ret

000086b0 <__umulhisi3>:
    86b0:	a2 9f       	mul	r26, r18
    86b2:	b0 01       	movw	r22, r0
    86b4:	b3 9f       	mul	r27, r19
    86b6:	c0 01       	movw	r24, r0
    86b8:	a3 9f       	mul	r26, r19
    86ba:	70 0d       	add	r23, r0
    86bc:	81 1d       	adc	r24, r1
    86be:	11 24       	eor	r1, r1
    86c0:	91 1d       	adc	r25, r1
    86c2:	b2 9f       	mul	r27, r18
    86c4:	70 0d       	add	r23, r0
    86c6:	81 1d       	adc	r24, r1
    86c8:	11 24       	eor	r1, r1
    86ca:	91 1d       	adc	r25, r1
    86cc:	08 95       	ret

000086ce <__subsf3>:
    86ce:	50 58       	subi	r21, 0x80	; 128

000086d0 <__addsf3>:
    86d0:	bb 27       	eor	r27, r27
    86d2:	aa 27       	eor	r26, r26
    86d4:	0e 94 7f 43 	call	0x86fe	; 0x86fe <__addsf3x>
    86d8:	0c 94 f2 44 	jmp	0x89e4	; 0x89e4 <__fp_round>
    86dc:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <__fp_pscA>
    86e0:	38 f0       	brcs	.+14     	; 0x86f0 <__addsf3+0x20>
    86e2:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <__fp_pscB>
    86e6:	20 f0       	brcs	.+8      	; 0x86f0 <__addsf3+0x20>
    86e8:	39 f4       	brne	.+14     	; 0x86f8 <__addsf3+0x28>
    86ea:	9f 3f       	cpi	r25, 0xFF	; 255
    86ec:	19 f4       	brne	.+6      	; 0x86f4 <__addsf3+0x24>
    86ee:	26 f4       	brtc	.+8      	; 0x86f8 <__addsf3+0x28>
    86f0:	0c 94 e1 44 	jmp	0x89c2	; 0x89c2 <__fp_nan>
    86f4:	0e f4       	brtc	.+2      	; 0x86f8 <__addsf3+0x28>
    86f6:	e0 95       	com	r30
    86f8:	e7 fb       	bst	r30, 7
    86fa:	0c 94 db 44 	jmp	0x89b6	; 0x89b6 <__fp_inf>

000086fe <__addsf3x>:
    86fe:	e9 2f       	mov	r30, r25
    8700:	0e 94 03 45 	call	0x8a06	; 0x8a06 <__fp_split3>
    8704:	58 f3       	brcs	.-42     	; 0x86dc <__addsf3+0xc>
    8706:	ba 17       	cp	r27, r26
    8708:	62 07       	cpc	r22, r18
    870a:	73 07       	cpc	r23, r19
    870c:	84 07       	cpc	r24, r20
    870e:	95 07       	cpc	r25, r21
    8710:	20 f0       	brcs	.+8      	; 0x871a <__addsf3x+0x1c>
    8712:	79 f4       	brne	.+30     	; 0x8732 <__addsf3x+0x34>
    8714:	a6 f5       	brtc	.+104    	; 0x877e <__addsf3x+0x80>
    8716:	0c 94 25 45 	jmp	0x8a4a	; 0x8a4a <__fp_zero>
    871a:	0e f4       	brtc	.+2      	; 0x871e <__addsf3x+0x20>
    871c:	e0 95       	com	r30
    871e:	0b 2e       	mov	r0, r27
    8720:	ba 2f       	mov	r27, r26
    8722:	a0 2d       	mov	r26, r0
    8724:	0b 01       	movw	r0, r22
    8726:	b9 01       	movw	r22, r18
    8728:	90 01       	movw	r18, r0
    872a:	0c 01       	movw	r0, r24
    872c:	ca 01       	movw	r24, r20
    872e:	a0 01       	movw	r20, r0
    8730:	11 24       	eor	r1, r1
    8732:	ff 27       	eor	r31, r31
    8734:	59 1b       	sub	r21, r25
    8736:	99 f0       	breq	.+38     	; 0x875e <__addsf3x+0x60>
    8738:	59 3f       	cpi	r21, 0xF9	; 249
    873a:	50 f4       	brcc	.+20     	; 0x8750 <__addsf3x+0x52>
    873c:	50 3e       	cpi	r21, 0xE0	; 224
    873e:	68 f1       	brcs	.+90     	; 0x879a <__addsf3x+0x9c>
    8740:	1a 16       	cp	r1, r26
    8742:	f0 40       	sbci	r31, 0x00	; 0
    8744:	a2 2f       	mov	r26, r18
    8746:	23 2f       	mov	r18, r19
    8748:	34 2f       	mov	r19, r20
    874a:	44 27       	eor	r20, r20
    874c:	58 5f       	subi	r21, 0xF8	; 248
    874e:	f3 cf       	rjmp	.-26     	; 0x8736 <__addsf3x+0x38>
    8750:	46 95       	lsr	r20
    8752:	37 95       	ror	r19
    8754:	27 95       	ror	r18
    8756:	a7 95       	ror	r26
    8758:	f0 40       	sbci	r31, 0x00	; 0
    875a:	53 95       	inc	r21
    875c:	c9 f7       	brne	.-14     	; 0x8750 <__addsf3x+0x52>
    875e:	7e f4       	brtc	.+30     	; 0x877e <__addsf3x+0x80>
    8760:	1f 16       	cp	r1, r31
    8762:	ba 0b       	sbc	r27, r26
    8764:	62 0b       	sbc	r22, r18
    8766:	73 0b       	sbc	r23, r19
    8768:	84 0b       	sbc	r24, r20
    876a:	ba f0       	brmi	.+46     	; 0x879a <__addsf3x+0x9c>
    876c:	91 50       	subi	r25, 0x01	; 1
    876e:	a1 f0       	breq	.+40     	; 0x8798 <__addsf3x+0x9a>
    8770:	ff 0f       	add	r31, r31
    8772:	bb 1f       	adc	r27, r27
    8774:	66 1f       	adc	r22, r22
    8776:	77 1f       	adc	r23, r23
    8778:	88 1f       	adc	r24, r24
    877a:	c2 f7       	brpl	.-16     	; 0x876c <__addsf3x+0x6e>
    877c:	0e c0       	rjmp	.+28     	; 0x879a <__addsf3x+0x9c>
    877e:	ba 0f       	add	r27, r26
    8780:	62 1f       	adc	r22, r18
    8782:	73 1f       	adc	r23, r19
    8784:	84 1f       	adc	r24, r20
    8786:	48 f4       	brcc	.+18     	; 0x879a <__addsf3x+0x9c>
    8788:	87 95       	ror	r24
    878a:	77 95       	ror	r23
    878c:	67 95       	ror	r22
    878e:	b7 95       	ror	r27
    8790:	f7 95       	ror	r31
    8792:	9e 3f       	cpi	r25, 0xFE	; 254
    8794:	08 f0       	brcs	.+2      	; 0x8798 <__addsf3x+0x9a>
    8796:	b0 cf       	rjmp	.-160    	; 0x86f8 <__addsf3+0x28>
    8798:	93 95       	inc	r25
    879a:	88 0f       	add	r24, r24
    879c:	08 f0       	brcs	.+2      	; 0x87a0 <__addsf3x+0xa2>
    879e:	99 27       	eor	r25, r25
    87a0:	ee 0f       	add	r30, r30
    87a2:	97 95       	ror	r25
    87a4:	87 95       	ror	r24
    87a6:	08 95       	ret

000087a8 <__cmpsf2>:
    87a8:	0e 94 b7 44 	call	0x896e	; 0x896e <__fp_cmp>
    87ac:	08 f4       	brcc	.+2      	; 0x87b0 <__cmpsf2+0x8>
    87ae:	81 e0       	ldi	r24, 0x01	; 1
    87b0:	08 95       	ret

000087b2 <__divsf3>:
    87b2:	0e 94 ed 43 	call	0x87da	; 0x87da <__divsf3x>
    87b6:	0c 94 f2 44 	jmp	0x89e4	; 0x89e4 <__fp_round>
    87ba:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <__fp_pscB>
    87be:	58 f0       	brcs	.+22     	; 0x87d6 <__divsf3+0x24>
    87c0:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <__fp_pscA>
    87c4:	40 f0       	brcs	.+16     	; 0x87d6 <__divsf3+0x24>
    87c6:	29 f4       	brne	.+10     	; 0x87d2 <__divsf3+0x20>
    87c8:	5f 3f       	cpi	r21, 0xFF	; 255
    87ca:	29 f0       	breq	.+10     	; 0x87d6 <__divsf3+0x24>
    87cc:	0c 94 db 44 	jmp	0x89b6	; 0x89b6 <__fp_inf>
    87d0:	51 11       	cpse	r21, r1
    87d2:	0c 94 26 45 	jmp	0x8a4c	; 0x8a4c <__fp_szero>
    87d6:	0c 94 e1 44 	jmp	0x89c2	; 0x89c2 <__fp_nan>

000087da <__divsf3x>:
    87da:	0e 94 03 45 	call	0x8a06	; 0x8a06 <__fp_split3>
    87de:	68 f3       	brcs	.-38     	; 0x87ba <__divsf3+0x8>

000087e0 <__divsf3_pse>:
    87e0:	99 23       	and	r25, r25
    87e2:	b1 f3       	breq	.-20     	; 0x87d0 <__divsf3+0x1e>
    87e4:	55 23       	and	r21, r21
    87e6:	91 f3       	breq	.-28     	; 0x87cc <__divsf3+0x1a>
    87e8:	95 1b       	sub	r25, r21
    87ea:	55 0b       	sbc	r21, r21
    87ec:	bb 27       	eor	r27, r27
    87ee:	aa 27       	eor	r26, r26
    87f0:	62 17       	cp	r22, r18
    87f2:	73 07       	cpc	r23, r19
    87f4:	84 07       	cpc	r24, r20
    87f6:	38 f0       	brcs	.+14     	; 0x8806 <__divsf3_pse+0x26>
    87f8:	9f 5f       	subi	r25, 0xFF	; 255
    87fa:	5f 4f       	sbci	r21, 0xFF	; 255
    87fc:	22 0f       	add	r18, r18
    87fe:	33 1f       	adc	r19, r19
    8800:	44 1f       	adc	r20, r20
    8802:	aa 1f       	adc	r26, r26
    8804:	a9 f3       	breq	.-22     	; 0x87f0 <__divsf3_pse+0x10>
    8806:	35 d0       	rcall	.+106    	; 0x8872 <__divsf3_pse+0x92>
    8808:	0e 2e       	mov	r0, r30
    880a:	3a f0       	brmi	.+14     	; 0x881a <__divsf3_pse+0x3a>
    880c:	e0 e8       	ldi	r30, 0x80	; 128
    880e:	32 d0       	rcall	.+100    	; 0x8874 <__divsf3_pse+0x94>
    8810:	91 50       	subi	r25, 0x01	; 1
    8812:	50 40       	sbci	r21, 0x00	; 0
    8814:	e6 95       	lsr	r30
    8816:	00 1c       	adc	r0, r0
    8818:	ca f7       	brpl	.-14     	; 0x880c <__divsf3_pse+0x2c>
    881a:	2b d0       	rcall	.+86     	; 0x8872 <__divsf3_pse+0x92>
    881c:	fe 2f       	mov	r31, r30
    881e:	29 d0       	rcall	.+82     	; 0x8872 <__divsf3_pse+0x92>
    8820:	66 0f       	add	r22, r22
    8822:	77 1f       	adc	r23, r23
    8824:	88 1f       	adc	r24, r24
    8826:	bb 1f       	adc	r27, r27
    8828:	26 17       	cp	r18, r22
    882a:	37 07       	cpc	r19, r23
    882c:	48 07       	cpc	r20, r24
    882e:	ab 07       	cpc	r26, r27
    8830:	b0 e8       	ldi	r27, 0x80	; 128
    8832:	09 f0       	breq	.+2      	; 0x8836 <__divsf3_pse+0x56>
    8834:	bb 0b       	sbc	r27, r27
    8836:	80 2d       	mov	r24, r0
    8838:	bf 01       	movw	r22, r30
    883a:	ff 27       	eor	r31, r31
    883c:	93 58       	subi	r25, 0x83	; 131
    883e:	5f 4f       	sbci	r21, 0xFF	; 255
    8840:	3a f0       	brmi	.+14     	; 0x8850 <__divsf3_pse+0x70>
    8842:	9e 3f       	cpi	r25, 0xFE	; 254
    8844:	51 05       	cpc	r21, r1
    8846:	78 f0       	brcs	.+30     	; 0x8866 <__divsf3_pse+0x86>
    8848:	0c 94 db 44 	jmp	0x89b6	; 0x89b6 <__fp_inf>
    884c:	0c 94 26 45 	jmp	0x8a4c	; 0x8a4c <__fp_szero>
    8850:	5f 3f       	cpi	r21, 0xFF	; 255
    8852:	e4 f3       	brlt	.-8      	; 0x884c <__divsf3_pse+0x6c>
    8854:	98 3e       	cpi	r25, 0xE8	; 232
    8856:	d4 f3       	brlt	.-12     	; 0x884c <__divsf3_pse+0x6c>
    8858:	86 95       	lsr	r24
    885a:	77 95       	ror	r23
    885c:	67 95       	ror	r22
    885e:	b7 95       	ror	r27
    8860:	f7 95       	ror	r31
    8862:	9f 5f       	subi	r25, 0xFF	; 255
    8864:	c9 f7       	brne	.-14     	; 0x8858 <__divsf3_pse+0x78>
    8866:	88 0f       	add	r24, r24
    8868:	91 1d       	adc	r25, r1
    886a:	96 95       	lsr	r25
    886c:	87 95       	ror	r24
    886e:	97 f9       	bld	r25, 7
    8870:	08 95       	ret
    8872:	e1 e0       	ldi	r30, 0x01	; 1
    8874:	66 0f       	add	r22, r22
    8876:	77 1f       	adc	r23, r23
    8878:	88 1f       	adc	r24, r24
    887a:	bb 1f       	adc	r27, r27
    887c:	62 17       	cp	r22, r18
    887e:	73 07       	cpc	r23, r19
    8880:	84 07       	cpc	r24, r20
    8882:	ba 07       	cpc	r27, r26
    8884:	20 f0       	brcs	.+8      	; 0x888e <__divsf3_pse+0xae>
    8886:	62 1b       	sub	r22, r18
    8888:	73 0b       	sbc	r23, r19
    888a:	84 0b       	sbc	r24, r20
    888c:	ba 0b       	sbc	r27, r26
    888e:	ee 1f       	adc	r30, r30
    8890:	88 f7       	brcc	.-30     	; 0x8874 <__divsf3_pse+0x94>
    8892:	e0 95       	com	r30
    8894:	08 95       	ret

00008896 <__fixunssfsi>:
    8896:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <__fp_splitA>
    889a:	88 f0       	brcs	.+34     	; 0x88be <__fixunssfsi+0x28>
    889c:	9f 57       	subi	r25, 0x7F	; 127
    889e:	98 f0       	brcs	.+38     	; 0x88c6 <__fixunssfsi+0x30>
    88a0:	b9 2f       	mov	r27, r25
    88a2:	99 27       	eor	r25, r25
    88a4:	b7 51       	subi	r27, 0x17	; 23
    88a6:	b0 f0       	brcs	.+44     	; 0x88d4 <__fixunssfsi+0x3e>
    88a8:	e1 f0       	breq	.+56     	; 0x88e2 <__fixunssfsi+0x4c>
    88aa:	66 0f       	add	r22, r22
    88ac:	77 1f       	adc	r23, r23
    88ae:	88 1f       	adc	r24, r24
    88b0:	99 1f       	adc	r25, r25
    88b2:	1a f0       	brmi	.+6      	; 0x88ba <__fixunssfsi+0x24>
    88b4:	ba 95       	dec	r27
    88b6:	c9 f7       	brne	.-14     	; 0x88aa <__fixunssfsi+0x14>
    88b8:	14 c0       	rjmp	.+40     	; 0x88e2 <__fixunssfsi+0x4c>
    88ba:	b1 30       	cpi	r27, 0x01	; 1
    88bc:	91 f0       	breq	.+36     	; 0x88e2 <__fixunssfsi+0x4c>
    88be:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <__fp_zero>
    88c2:	b1 e0       	ldi	r27, 0x01	; 1
    88c4:	08 95       	ret
    88c6:	0c 94 25 45 	jmp	0x8a4a	; 0x8a4a <__fp_zero>
    88ca:	67 2f       	mov	r22, r23
    88cc:	78 2f       	mov	r23, r24
    88ce:	88 27       	eor	r24, r24
    88d0:	b8 5f       	subi	r27, 0xF8	; 248
    88d2:	39 f0       	breq	.+14     	; 0x88e2 <__fixunssfsi+0x4c>
    88d4:	b9 3f       	cpi	r27, 0xF9	; 249
    88d6:	cc f3       	brlt	.-14     	; 0x88ca <__fixunssfsi+0x34>
    88d8:	86 95       	lsr	r24
    88da:	77 95       	ror	r23
    88dc:	67 95       	ror	r22
    88de:	b3 95       	inc	r27
    88e0:	d9 f7       	brne	.-10     	; 0x88d8 <__fixunssfsi+0x42>
    88e2:	3e f4       	brtc	.+14     	; 0x88f2 <__fixunssfsi+0x5c>
    88e4:	90 95       	com	r25
    88e6:	80 95       	com	r24
    88e8:	70 95       	com	r23
    88ea:	61 95       	neg	r22
    88ec:	7f 4f       	sbci	r23, 0xFF	; 255
    88ee:	8f 4f       	sbci	r24, 0xFF	; 255
    88f0:	9f 4f       	sbci	r25, 0xFF	; 255
    88f2:	08 95       	ret

000088f4 <__floatunsisf>:
    88f4:	e8 94       	clt
    88f6:	09 c0       	rjmp	.+18     	; 0x890a <__floatsisf+0x12>

000088f8 <__floatsisf>:
    88f8:	97 fb       	bst	r25, 7
    88fa:	3e f4       	brtc	.+14     	; 0x890a <__floatsisf+0x12>
    88fc:	90 95       	com	r25
    88fe:	80 95       	com	r24
    8900:	70 95       	com	r23
    8902:	61 95       	neg	r22
    8904:	7f 4f       	sbci	r23, 0xFF	; 255
    8906:	8f 4f       	sbci	r24, 0xFF	; 255
    8908:	9f 4f       	sbci	r25, 0xFF	; 255
    890a:	99 23       	and	r25, r25
    890c:	a9 f0       	breq	.+42     	; 0x8938 <__floatsisf+0x40>
    890e:	f9 2f       	mov	r31, r25
    8910:	96 e9       	ldi	r25, 0x96	; 150
    8912:	bb 27       	eor	r27, r27
    8914:	93 95       	inc	r25
    8916:	f6 95       	lsr	r31
    8918:	87 95       	ror	r24
    891a:	77 95       	ror	r23
    891c:	67 95       	ror	r22
    891e:	b7 95       	ror	r27
    8920:	f1 11       	cpse	r31, r1
    8922:	f8 cf       	rjmp	.-16     	; 0x8914 <__floatsisf+0x1c>
    8924:	fa f4       	brpl	.+62     	; 0x8964 <__floatsisf+0x6c>
    8926:	bb 0f       	add	r27, r27
    8928:	11 f4       	brne	.+4      	; 0x892e <__floatsisf+0x36>
    892a:	60 ff       	sbrs	r22, 0
    892c:	1b c0       	rjmp	.+54     	; 0x8964 <__floatsisf+0x6c>
    892e:	6f 5f       	subi	r22, 0xFF	; 255
    8930:	7f 4f       	sbci	r23, 0xFF	; 255
    8932:	8f 4f       	sbci	r24, 0xFF	; 255
    8934:	9f 4f       	sbci	r25, 0xFF	; 255
    8936:	16 c0       	rjmp	.+44     	; 0x8964 <__floatsisf+0x6c>
    8938:	88 23       	and	r24, r24
    893a:	11 f0       	breq	.+4      	; 0x8940 <__floatsisf+0x48>
    893c:	96 e9       	ldi	r25, 0x96	; 150
    893e:	11 c0       	rjmp	.+34     	; 0x8962 <__floatsisf+0x6a>
    8940:	77 23       	and	r23, r23
    8942:	21 f0       	breq	.+8      	; 0x894c <__floatsisf+0x54>
    8944:	9e e8       	ldi	r25, 0x8E	; 142
    8946:	87 2f       	mov	r24, r23
    8948:	76 2f       	mov	r23, r22
    894a:	05 c0       	rjmp	.+10     	; 0x8956 <__floatsisf+0x5e>
    894c:	66 23       	and	r22, r22
    894e:	71 f0       	breq	.+28     	; 0x896c <__floatsisf+0x74>
    8950:	96 e8       	ldi	r25, 0x86	; 134
    8952:	86 2f       	mov	r24, r22
    8954:	70 e0       	ldi	r23, 0x00	; 0
    8956:	60 e0       	ldi	r22, 0x00	; 0
    8958:	2a f0       	brmi	.+10     	; 0x8964 <__floatsisf+0x6c>
    895a:	9a 95       	dec	r25
    895c:	66 0f       	add	r22, r22
    895e:	77 1f       	adc	r23, r23
    8960:	88 1f       	adc	r24, r24
    8962:	da f7       	brpl	.-10     	; 0x895a <__floatsisf+0x62>
    8964:	88 0f       	add	r24, r24
    8966:	96 95       	lsr	r25
    8968:	87 95       	ror	r24
    896a:	97 f9       	bld	r25, 7
    896c:	08 95       	ret

0000896e <__fp_cmp>:
    896e:	99 0f       	add	r25, r25
    8970:	00 08       	sbc	r0, r0
    8972:	55 0f       	add	r21, r21
    8974:	aa 0b       	sbc	r26, r26
    8976:	e0 e8       	ldi	r30, 0x80	; 128
    8978:	fe ef       	ldi	r31, 0xFE	; 254
    897a:	16 16       	cp	r1, r22
    897c:	17 06       	cpc	r1, r23
    897e:	e8 07       	cpc	r30, r24
    8980:	f9 07       	cpc	r31, r25
    8982:	c0 f0       	brcs	.+48     	; 0x89b4 <__fp_cmp+0x46>
    8984:	12 16       	cp	r1, r18
    8986:	13 06       	cpc	r1, r19
    8988:	e4 07       	cpc	r30, r20
    898a:	f5 07       	cpc	r31, r21
    898c:	98 f0       	brcs	.+38     	; 0x89b4 <__fp_cmp+0x46>
    898e:	62 1b       	sub	r22, r18
    8990:	73 0b       	sbc	r23, r19
    8992:	84 0b       	sbc	r24, r20
    8994:	95 0b       	sbc	r25, r21
    8996:	39 f4       	brne	.+14     	; 0x89a6 <__fp_cmp+0x38>
    8998:	0a 26       	eor	r0, r26
    899a:	61 f0       	breq	.+24     	; 0x89b4 <__fp_cmp+0x46>
    899c:	23 2b       	or	r18, r19
    899e:	24 2b       	or	r18, r20
    89a0:	25 2b       	or	r18, r21
    89a2:	21 f4       	brne	.+8      	; 0x89ac <__fp_cmp+0x3e>
    89a4:	08 95       	ret
    89a6:	0a 26       	eor	r0, r26
    89a8:	09 f4       	brne	.+2      	; 0x89ac <__fp_cmp+0x3e>
    89aa:	a1 40       	sbci	r26, 0x01	; 1
    89ac:	a6 95       	lsr	r26
    89ae:	8f ef       	ldi	r24, 0xFF	; 255
    89b0:	81 1d       	adc	r24, r1
    89b2:	81 1d       	adc	r24, r1
    89b4:	08 95       	ret

000089b6 <__fp_inf>:
    89b6:	97 f9       	bld	r25, 7
    89b8:	9f 67       	ori	r25, 0x7F	; 127
    89ba:	80 e8       	ldi	r24, 0x80	; 128
    89bc:	70 e0       	ldi	r23, 0x00	; 0
    89be:	60 e0       	ldi	r22, 0x00	; 0
    89c0:	08 95       	ret

000089c2 <__fp_nan>:
    89c2:	9f ef       	ldi	r25, 0xFF	; 255
    89c4:	80 ec       	ldi	r24, 0xC0	; 192
    89c6:	08 95       	ret

000089c8 <__fp_pscA>:
    89c8:	00 24       	eor	r0, r0
    89ca:	0a 94       	dec	r0
    89cc:	16 16       	cp	r1, r22
    89ce:	17 06       	cpc	r1, r23
    89d0:	18 06       	cpc	r1, r24
    89d2:	09 06       	cpc	r0, r25
    89d4:	08 95       	ret

000089d6 <__fp_pscB>:
    89d6:	00 24       	eor	r0, r0
    89d8:	0a 94       	dec	r0
    89da:	12 16       	cp	r1, r18
    89dc:	13 06       	cpc	r1, r19
    89de:	14 06       	cpc	r1, r20
    89e0:	05 06       	cpc	r0, r21
    89e2:	08 95       	ret

000089e4 <__fp_round>:
    89e4:	09 2e       	mov	r0, r25
    89e6:	03 94       	inc	r0
    89e8:	00 0c       	add	r0, r0
    89ea:	11 f4       	brne	.+4      	; 0x89f0 <__fp_round+0xc>
    89ec:	88 23       	and	r24, r24
    89ee:	52 f0       	brmi	.+20     	; 0x8a04 <__fp_round+0x20>
    89f0:	bb 0f       	add	r27, r27
    89f2:	40 f4       	brcc	.+16     	; 0x8a04 <__fp_round+0x20>
    89f4:	bf 2b       	or	r27, r31
    89f6:	11 f4       	brne	.+4      	; 0x89fc <__fp_round+0x18>
    89f8:	60 ff       	sbrs	r22, 0
    89fa:	04 c0       	rjmp	.+8      	; 0x8a04 <__fp_round+0x20>
    89fc:	6f 5f       	subi	r22, 0xFF	; 255
    89fe:	7f 4f       	sbci	r23, 0xFF	; 255
    8a00:	8f 4f       	sbci	r24, 0xFF	; 255
    8a02:	9f 4f       	sbci	r25, 0xFF	; 255
    8a04:	08 95       	ret

00008a06 <__fp_split3>:
    8a06:	57 fd       	sbrc	r21, 7
    8a08:	90 58       	subi	r25, 0x80	; 128
    8a0a:	44 0f       	add	r20, r20
    8a0c:	55 1f       	adc	r21, r21
    8a0e:	59 f0       	breq	.+22     	; 0x8a26 <__fp_splitA+0x10>
    8a10:	5f 3f       	cpi	r21, 0xFF	; 255
    8a12:	71 f0       	breq	.+28     	; 0x8a30 <__fp_splitA+0x1a>
    8a14:	47 95       	ror	r20

00008a16 <__fp_splitA>:
    8a16:	88 0f       	add	r24, r24
    8a18:	97 fb       	bst	r25, 7
    8a1a:	99 1f       	adc	r25, r25
    8a1c:	61 f0       	breq	.+24     	; 0x8a36 <__fp_splitA+0x20>
    8a1e:	9f 3f       	cpi	r25, 0xFF	; 255
    8a20:	79 f0       	breq	.+30     	; 0x8a40 <__fp_splitA+0x2a>
    8a22:	87 95       	ror	r24
    8a24:	08 95       	ret
    8a26:	12 16       	cp	r1, r18
    8a28:	13 06       	cpc	r1, r19
    8a2a:	14 06       	cpc	r1, r20
    8a2c:	55 1f       	adc	r21, r21
    8a2e:	f2 cf       	rjmp	.-28     	; 0x8a14 <__fp_split3+0xe>
    8a30:	46 95       	lsr	r20
    8a32:	f1 df       	rcall	.-30     	; 0x8a16 <__fp_splitA>
    8a34:	08 c0       	rjmp	.+16     	; 0x8a46 <__fp_splitA+0x30>
    8a36:	16 16       	cp	r1, r22
    8a38:	17 06       	cpc	r1, r23
    8a3a:	18 06       	cpc	r1, r24
    8a3c:	99 1f       	adc	r25, r25
    8a3e:	f1 cf       	rjmp	.-30     	; 0x8a22 <__fp_splitA+0xc>
    8a40:	86 95       	lsr	r24
    8a42:	71 05       	cpc	r23, r1
    8a44:	61 05       	cpc	r22, r1
    8a46:	08 94       	sec
    8a48:	08 95       	ret

00008a4a <__fp_zero>:
    8a4a:	e8 94       	clt

00008a4c <__fp_szero>:
    8a4c:	bb 27       	eor	r27, r27
    8a4e:	66 27       	eor	r22, r22
    8a50:	77 27       	eor	r23, r23
    8a52:	cb 01       	movw	r24, r22
    8a54:	97 f9       	bld	r25, 7
    8a56:	08 95       	ret

00008a58 <__gesf2>:
    8a58:	0e 94 b7 44 	call	0x896e	; 0x896e <__fp_cmp>
    8a5c:	08 f4       	brcc	.+2      	; 0x8a60 <__gesf2+0x8>
    8a5e:	8f ef       	ldi	r24, 0xFF	; 255
    8a60:	08 95       	ret

00008a62 <__mulsf3>:
    8a62:	0e 94 44 45 	call	0x8a88	; 0x8a88 <__mulsf3x>
    8a66:	0c 94 f2 44 	jmp	0x89e4	; 0x89e4 <__fp_round>
    8a6a:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <__fp_pscA>
    8a6e:	38 f0       	brcs	.+14     	; 0x8a7e <__mulsf3+0x1c>
    8a70:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <__fp_pscB>
    8a74:	20 f0       	brcs	.+8      	; 0x8a7e <__mulsf3+0x1c>
    8a76:	95 23       	and	r25, r21
    8a78:	11 f0       	breq	.+4      	; 0x8a7e <__mulsf3+0x1c>
    8a7a:	0c 94 db 44 	jmp	0x89b6	; 0x89b6 <__fp_inf>
    8a7e:	0c 94 e1 44 	jmp	0x89c2	; 0x89c2 <__fp_nan>
    8a82:	11 24       	eor	r1, r1
    8a84:	0c 94 26 45 	jmp	0x8a4c	; 0x8a4c <__fp_szero>

00008a88 <__mulsf3x>:
    8a88:	0e 94 03 45 	call	0x8a06	; 0x8a06 <__fp_split3>
    8a8c:	70 f3       	brcs	.-36     	; 0x8a6a <__mulsf3+0x8>

00008a8e <__mulsf3_pse>:
    8a8e:	95 9f       	mul	r25, r21
    8a90:	c1 f3       	breq	.-16     	; 0x8a82 <__mulsf3+0x20>
    8a92:	95 0f       	add	r25, r21
    8a94:	50 e0       	ldi	r21, 0x00	; 0
    8a96:	55 1f       	adc	r21, r21
    8a98:	62 9f       	mul	r22, r18
    8a9a:	f0 01       	movw	r30, r0
    8a9c:	72 9f       	mul	r23, r18
    8a9e:	bb 27       	eor	r27, r27
    8aa0:	f0 0d       	add	r31, r0
    8aa2:	b1 1d       	adc	r27, r1
    8aa4:	63 9f       	mul	r22, r19
    8aa6:	aa 27       	eor	r26, r26
    8aa8:	f0 0d       	add	r31, r0
    8aaa:	b1 1d       	adc	r27, r1
    8aac:	aa 1f       	adc	r26, r26
    8aae:	64 9f       	mul	r22, r20
    8ab0:	66 27       	eor	r22, r22
    8ab2:	b0 0d       	add	r27, r0
    8ab4:	a1 1d       	adc	r26, r1
    8ab6:	66 1f       	adc	r22, r22
    8ab8:	82 9f       	mul	r24, r18
    8aba:	22 27       	eor	r18, r18
    8abc:	b0 0d       	add	r27, r0
    8abe:	a1 1d       	adc	r26, r1
    8ac0:	62 1f       	adc	r22, r18
    8ac2:	73 9f       	mul	r23, r19
    8ac4:	b0 0d       	add	r27, r0
    8ac6:	a1 1d       	adc	r26, r1
    8ac8:	62 1f       	adc	r22, r18
    8aca:	83 9f       	mul	r24, r19
    8acc:	a0 0d       	add	r26, r0
    8ace:	61 1d       	adc	r22, r1
    8ad0:	22 1f       	adc	r18, r18
    8ad2:	74 9f       	mul	r23, r20
    8ad4:	33 27       	eor	r19, r19
    8ad6:	a0 0d       	add	r26, r0
    8ad8:	61 1d       	adc	r22, r1
    8ada:	23 1f       	adc	r18, r19
    8adc:	84 9f       	mul	r24, r20
    8ade:	60 0d       	add	r22, r0
    8ae0:	21 1d       	adc	r18, r1
    8ae2:	82 2f       	mov	r24, r18
    8ae4:	76 2f       	mov	r23, r22
    8ae6:	6a 2f       	mov	r22, r26
    8ae8:	11 24       	eor	r1, r1
    8aea:	9f 57       	subi	r25, 0x7F	; 127
    8aec:	50 40       	sbci	r21, 0x00	; 0
    8aee:	9a f0       	brmi	.+38     	; 0x8b16 <__mulsf3_pse+0x88>
    8af0:	f1 f0       	breq	.+60     	; 0x8b2e <__mulsf3_pse+0xa0>
    8af2:	88 23       	and	r24, r24
    8af4:	4a f0       	brmi	.+18     	; 0x8b08 <__mulsf3_pse+0x7a>
    8af6:	ee 0f       	add	r30, r30
    8af8:	ff 1f       	adc	r31, r31
    8afa:	bb 1f       	adc	r27, r27
    8afc:	66 1f       	adc	r22, r22
    8afe:	77 1f       	adc	r23, r23
    8b00:	88 1f       	adc	r24, r24
    8b02:	91 50       	subi	r25, 0x01	; 1
    8b04:	50 40       	sbci	r21, 0x00	; 0
    8b06:	a9 f7       	brne	.-22     	; 0x8af2 <__mulsf3_pse+0x64>
    8b08:	9e 3f       	cpi	r25, 0xFE	; 254
    8b0a:	51 05       	cpc	r21, r1
    8b0c:	80 f0       	brcs	.+32     	; 0x8b2e <__mulsf3_pse+0xa0>
    8b0e:	0c 94 db 44 	jmp	0x89b6	; 0x89b6 <__fp_inf>
    8b12:	0c 94 26 45 	jmp	0x8a4c	; 0x8a4c <__fp_szero>
    8b16:	5f 3f       	cpi	r21, 0xFF	; 255
    8b18:	e4 f3       	brlt	.-8      	; 0x8b12 <__mulsf3_pse+0x84>
    8b1a:	98 3e       	cpi	r25, 0xE8	; 232
    8b1c:	d4 f3       	brlt	.-12     	; 0x8b12 <__mulsf3_pse+0x84>
    8b1e:	86 95       	lsr	r24
    8b20:	77 95       	ror	r23
    8b22:	67 95       	ror	r22
    8b24:	b7 95       	ror	r27
    8b26:	f7 95       	ror	r31
    8b28:	e7 95       	ror	r30
    8b2a:	9f 5f       	subi	r25, 0xFF	; 255
    8b2c:	c1 f7       	brne	.-16     	; 0x8b1e <__mulsf3_pse+0x90>
    8b2e:	fe 2b       	or	r31, r30
    8b30:	88 0f       	add	r24, r24
    8b32:	91 1d       	adc	r25, r1
    8b34:	96 95       	lsr	r25
    8b36:	87 95       	ror	r24
    8b38:	97 f9       	bld	r25, 7
    8b3a:	08 95       	ret

00008b3c <__unordsf2>:
    8b3c:	0e 94 b7 44 	call	0x896e	; 0x896e <__fp_cmp>
    8b40:	88 0b       	sbc	r24, r24
    8b42:	99 0b       	sbc	r25, r25
    8b44:	08 95       	ret

00008b46 <dtostrf>:
    8b46:	ef 92       	push	r14
    8b48:	0f 93       	push	r16
    8b4a:	1f 93       	push	r17
    8b4c:	cf 93       	push	r28
    8b4e:	df 93       	push	r29
    8b50:	e8 01       	movw	r28, r16
    8b52:	47 fd       	sbrc	r20, 7
    8b54:	02 c0       	rjmp	.+4      	; 0x8b5a <dtostrf+0x14>
    8b56:	34 e0       	ldi	r19, 0x04	; 4
    8b58:	01 c0       	rjmp	.+2      	; 0x8b5c <dtostrf+0x16>
    8b5a:	34 e1       	ldi	r19, 0x14	; 20
    8b5c:	04 2e       	mov	r0, r20
    8b5e:	00 0c       	add	r0, r0
    8b60:	55 0b       	sbc	r21, r21
    8b62:	57 ff       	sbrs	r21, 7
    8b64:	03 c0       	rjmp	.+6      	; 0x8b6c <dtostrf+0x26>
    8b66:	51 95       	neg	r21
    8b68:	41 95       	neg	r20
    8b6a:	51 09       	sbc	r21, r1
    8b6c:	e3 2e       	mov	r14, r19
    8b6e:	02 2f       	mov	r16, r18
    8b70:	24 2f       	mov	r18, r20
    8b72:	ae 01       	movw	r20, r28
    8b74:	0e 94 07 4c 	call	0x980e	; 0x980e <dtoa_prf>
    8b78:	ce 01       	movw	r24, r28
    8b7a:	df 91       	pop	r29
    8b7c:	cf 91       	pop	r28
    8b7e:	1f 91       	pop	r17
    8b80:	0f 91       	pop	r16
    8b82:	ef 90       	pop	r14
    8b84:	08 95       	ret

00008b86 <malloc>:
    8b86:	0f 93       	push	r16
    8b88:	1f 93       	push	r17
    8b8a:	cf 93       	push	r28
    8b8c:	df 93       	push	r29
    8b8e:	82 30       	cpi	r24, 0x02	; 2
    8b90:	91 05       	cpc	r25, r1
    8b92:	10 f4       	brcc	.+4      	; 0x8b98 <malloc+0x12>
    8b94:	82 e0       	ldi	r24, 0x02	; 2
    8b96:	90 e0       	ldi	r25, 0x00	; 0
    8b98:	e0 91 53 06 	lds	r30, 0x0653	; 0x800653 <__flp>
    8b9c:	f0 91 54 06 	lds	r31, 0x0654	; 0x800654 <__flp+0x1>
    8ba0:	20 e0       	ldi	r18, 0x00	; 0
    8ba2:	30 e0       	ldi	r19, 0x00	; 0
    8ba4:	a0 e0       	ldi	r26, 0x00	; 0
    8ba6:	b0 e0       	ldi	r27, 0x00	; 0
    8ba8:	30 97       	sbiw	r30, 0x00	; 0
    8baa:	19 f1       	breq	.+70     	; 0x8bf2 <malloc+0x6c>
    8bac:	40 81       	ld	r20, Z
    8bae:	51 81       	ldd	r21, Z+1	; 0x01
    8bb0:	02 81       	ldd	r16, Z+2	; 0x02
    8bb2:	13 81       	ldd	r17, Z+3	; 0x03
    8bb4:	48 17       	cp	r20, r24
    8bb6:	59 07       	cpc	r21, r25
    8bb8:	c8 f0       	brcs	.+50     	; 0x8bec <malloc+0x66>
    8bba:	84 17       	cp	r24, r20
    8bbc:	95 07       	cpc	r25, r21
    8bbe:	69 f4       	brne	.+26     	; 0x8bda <malloc+0x54>
    8bc0:	10 97       	sbiw	r26, 0x00	; 0
    8bc2:	31 f0       	breq	.+12     	; 0x8bd0 <malloc+0x4a>
    8bc4:	12 96       	adiw	r26, 0x02	; 2
    8bc6:	0c 93       	st	X, r16
    8bc8:	12 97       	sbiw	r26, 0x02	; 2
    8bca:	13 96       	adiw	r26, 0x03	; 3
    8bcc:	1c 93       	st	X, r17
    8bce:	27 c0       	rjmp	.+78     	; 0x8c1e <malloc+0x98>
    8bd0:	00 93 53 06 	sts	0x0653, r16	; 0x800653 <__flp>
    8bd4:	10 93 54 06 	sts	0x0654, r17	; 0x800654 <__flp+0x1>
    8bd8:	22 c0       	rjmp	.+68     	; 0x8c1e <malloc+0x98>
    8bda:	21 15       	cp	r18, r1
    8bdc:	31 05       	cpc	r19, r1
    8bde:	19 f0       	breq	.+6      	; 0x8be6 <malloc+0x60>
    8be0:	42 17       	cp	r20, r18
    8be2:	53 07       	cpc	r21, r19
    8be4:	18 f4       	brcc	.+6      	; 0x8bec <malloc+0x66>
    8be6:	9a 01       	movw	r18, r20
    8be8:	bd 01       	movw	r22, r26
    8bea:	ef 01       	movw	r28, r30
    8bec:	df 01       	movw	r26, r30
    8bee:	f8 01       	movw	r30, r16
    8bf0:	db cf       	rjmp	.-74     	; 0x8ba8 <malloc+0x22>
    8bf2:	21 15       	cp	r18, r1
    8bf4:	31 05       	cpc	r19, r1
    8bf6:	f9 f0       	breq	.+62     	; 0x8c36 <malloc+0xb0>
    8bf8:	28 1b       	sub	r18, r24
    8bfa:	39 0b       	sbc	r19, r25
    8bfc:	24 30       	cpi	r18, 0x04	; 4
    8bfe:	31 05       	cpc	r19, r1
    8c00:	80 f4       	brcc	.+32     	; 0x8c22 <malloc+0x9c>
    8c02:	8a 81       	ldd	r24, Y+2	; 0x02
    8c04:	9b 81       	ldd	r25, Y+3	; 0x03
    8c06:	61 15       	cp	r22, r1
    8c08:	71 05       	cpc	r23, r1
    8c0a:	21 f0       	breq	.+8      	; 0x8c14 <malloc+0x8e>
    8c0c:	fb 01       	movw	r30, r22
    8c0e:	93 83       	std	Z+3, r25	; 0x03
    8c10:	82 83       	std	Z+2, r24	; 0x02
    8c12:	04 c0       	rjmp	.+8      	; 0x8c1c <malloc+0x96>
    8c14:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <__flp+0x1>
    8c18:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <__flp>
    8c1c:	fe 01       	movw	r30, r28
    8c1e:	32 96       	adiw	r30, 0x02	; 2
    8c20:	44 c0       	rjmp	.+136    	; 0x8caa <malloc+0x124>
    8c22:	fe 01       	movw	r30, r28
    8c24:	e2 0f       	add	r30, r18
    8c26:	f3 1f       	adc	r31, r19
    8c28:	81 93       	st	Z+, r24
    8c2a:	91 93       	st	Z+, r25
    8c2c:	22 50       	subi	r18, 0x02	; 2
    8c2e:	31 09       	sbc	r19, r1
    8c30:	39 83       	std	Y+1, r19	; 0x01
    8c32:	28 83       	st	Y, r18
    8c34:	3a c0       	rjmp	.+116    	; 0x8caa <malloc+0x124>
    8c36:	20 91 51 06 	lds	r18, 0x0651	; 0x800651 <__brkval>
    8c3a:	30 91 52 06 	lds	r19, 0x0652	; 0x800652 <__brkval+0x1>
    8c3e:	23 2b       	or	r18, r19
    8c40:	41 f4       	brne	.+16     	; 0x8c52 <malloc+0xcc>
    8c42:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__malloc_heap_start>
    8c46:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__malloc_heap_start+0x1>
    8c4a:	30 93 52 06 	sts	0x0652, r19	; 0x800652 <__brkval+0x1>
    8c4e:	20 93 51 06 	sts	0x0651, r18	; 0x800651 <__brkval>
    8c52:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_end>
    8c56:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
    8c5a:	21 15       	cp	r18, r1
    8c5c:	31 05       	cpc	r19, r1
    8c5e:	41 f4       	brne	.+16     	; 0x8c70 <malloc+0xea>
    8c60:	2d b7       	in	r18, 0x3d	; 61
    8c62:	3e b7       	in	r19, 0x3e	; 62
    8c64:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
    8c68:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
    8c6c:	24 1b       	sub	r18, r20
    8c6e:	35 0b       	sbc	r19, r21
    8c70:	e0 91 51 06 	lds	r30, 0x0651	; 0x800651 <__brkval>
    8c74:	f0 91 52 06 	lds	r31, 0x0652	; 0x800652 <__brkval+0x1>
    8c78:	e2 17       	cp	r30, r18
    8c7a:	f3 07       	cpc	r31, r19
    8c7c:	a0 f4       	brcc	.+40     	; 0x8ca6 <malloc+0x120>
    8c7e:	2e 1b       	sub	r18, r30
    8c80:	3f 0b       	sbc	r19, r31
    8c82:	28 17       	cp	r18, r24
    8c84:	39 07       	cpc	r19, r25
    8c86:	78 f0       	brcs	.+30     	; 0x8ca6 <malloc+0x120>
    8c88:	ac 01       	movw	r20, r24
    8c8a:	4e 5f       	subi	r20, 0xFE	; 254
    8c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    8c8e:	24 17       	cp	r18, r20
    8c90:	35 07       	cpc	r19, r21
    8c92:	48 f0       	brcs	.+18     	; 0x8ca6 <malloc+0x120>
    8c94:	4e 0f       	add	r20, r30
    8c96:	5f 1f       	adc	r21, r31
    8c98:	50 93 52 06 	sts	0x0652, r21	; 0x800652 <__brkval+0x1>
    8c9c:	40 93 51 06 	sts	0x0651, r20	; 0x800651 <__brkval>
    8ca0:	81 93       	st	Z+, r24
    8ca2:	91 93       	st	Z+, r25
    8ca4:	02 c0       	rjmp	.+4      	; 0x8caa <malloc+0x124>
    8ca6:	e0 e0       	ldi	r30, 0x00	; 0
    8ca8:	f0 e0       	ldi	r31, 0x00	; 0
    8caa:	cf 01       	movw	r24, r30
    8cac:	df 91       	pop	r29
    8cae:	cf 91       	pop	r28
    8cb0:	1f 91       	pop	r17
    8cb2:	0f 91       	pop	r16
    8cb4:	08 95       	ret

00008cb6 <free>:
    8cb6:	cf 93       	push	r28
    8cb8:	df 93       	push	r29
    8cba:	00 97       	sbiw	r24, 0x00	; 0
    8cbc:	09 f4       	brne	.+2      	; 0x8cc0 <free+0xa>
    8cbe:	81 c0       	rjmp	.+258    	; 0x8dc2 <free+0x10c>
    8cc0:	fc 01       	movw	r30, r24
    8cc2:	32 97       	sbiw	r30, 0x02	; 2
    8cc4:	13 82       	std	Z+3, r1	; 0x03
    8cc6:	12 82       	std	Z+2, r1	; 0x02
    8cc8:	a0 91 53 06 	lds	r26, 0x0653	; 0x800653 <__flp>
    8ccc:	b0 91 54 06 	lds	r27, 0x0654	; 0x800654 <__flp+0x1>
    8cd0:	10 97       	sbiw	r26, 0x00	; 0
    8cd2:	81 f4       	brne	.+32     	; 0x8cf4 <free+0x3e>
    8cd4:	20 81       	ld	r18, Z
    8cd6:	31 81       	ldd	r19, Z+1	; 0x01
    8cd8:	82 0f       	add	r24, r18
    8cda:	93 1f       	adc	r25, r19
    8cdc:	20 91 51 06 	lds	r18, 0x0651	; 0x800651 <__brkval>
    8ce0:	30 91 52 06 	lds	r19, 0x0652	; 0x800652 <__brkval+0x1>
    8ce4:	28 17       	cp	r18, r24
    8ce6:	39 07       	cpc	r19, r25
    8ce8:	51 f5       	brne	.+84     	; 0x8d3e <free+0x88>
    8cea:	f0 93 52 06 	sts	0x0652, r31	; 0x800652 <__brkval+0x1>
    8cee:	e0 93 51 06 	sts	0x0651, r30	; 0x800651 <__brkval>
    8cf2:	67 c0       	rjmp	.+206    	; 0x8dc2 <free+0x10c>
    8cf4:	ed 01       	movw	r28, r26
    8cf6:	20 e0       	ldi	r18, 0x00	; 0
    8cf8:	30 e0       	ldi	r19, 0x00	; 0
    8cfa:	ce 17       	cp	r28, r30
    8cfc:	df 07       	cpc	r29, r31
    8cfe:	40 f4       	brcc	.+16     	; 0x8d10 <free+0x5a>
    8d00:	4a 81       	ldd	r20, Y+2	; 0x02
    8d02:	5b 81       	ldd	r21, Y+3	; 0x03
    8d04:	9e 01       	movw	r18, r28
    8d06:	41 15       	cp	r20, r1
    8d08:	51 05       	cpc	r21, r1
    8d0a:	f1 f0       	breq	.+60     	; 0x8d48 <free+0x92>
    8d0c:	ea 01       	movw	r28, r20
    8d0e:	f5 cf       	rjmp	.-22     	; 0x8cfa <free+0x44>
    8d10:	d3 83       	std	Z+3, r29	; 0x03
    8d12:	c2 83       	std	Z+2, r28	; 0x02
    8d14:	40 81       	ld	r20, Z
    8d16:	51 81       	ldd	r21, Z+1	; 0x01
    8d18:	84 0f       	add	r24, r20
    8d1a:	95 1f       	adc	r25, r21
    8d1c:	c8 17       	cp	r28, r24
    8d1e:	d9 07       	cpc	r29, r25
    8d20:	59 f4       	brne	.+22     	; 0x8d38 <free+0x82>
    8d22:	88 81       	ld	r24, Y
    8d24:	99 81       	ldd	r25, Y+1	; 0x01
    8d26:	84 0f       	add	r24, r20
    8d28:	95 1f       	adc	r25, r21
    8d2a:	02 96       	adiw	r24, 0x02	; 2
    8d2c:	91 83       	std	Z+1, r25	; 0x01
    8d2e:	80 83       	st	Z, r24
    8d30:	8a 81       	ldd	r24, Y+2	; 0x02
    8d32:	9b 81       	ldd	r25, Y+3	; 0x03
    8d34:	93 83       	std	Z+3, r25	; 0x03
    8d36:	82 83       	std	Z+2, r24	; 0x02
    8d38:	21 15       	cp	r18, r1
    8d3a:	31 05       	cpc	r19, r1
    8d3c:	29 f4       	brne	.+10     	; 0x8d48 <free+0x92>
    8d3e:	f0 93 54 06 	sts	0x0654, r31	; 0x800654 <__flp+0x1>
    8d42:	e0 93 53 06 	sts	0x0653, r30	; 0x800653 <__flp>
    8d46:	3d c0       	rjmp	.+122    	; 0x8dc2 <free+0x10c>
    8d48:	e9 01       	movw	r28, r18
    8d4a:	fb 83       	std	Y+3, r31	; 0x03
    8d4c:	ea 83       	std	Y+2, r30	; 0x02
    8d4e:	49 91       	ld	r20, Y+
    8d50:	59 91       	ld	r21, Y+
    8d52:	c4 0f       	add	r28, r20
    8d54:	d5 1f       	adc	r29, r21
    8d56:	ec 17       	cp	r30, r28
    8d58:	fd 07       	cpc	r31, r29
    8d5a:	61 f4       	brne	.+24     	; 0x8d74 <free+0xbe>
    8d5c:	80 81       	ld	r24, Z
    8d5e:	91 81       	ldd	r25, Z+1	; 0x01
    8d60:	84 0f       	add	r24, r20
    8d62:	95 1f       	adc	r25, r21
    8d64:	02 96       	adiw	r24, 0x02	; 2
    8d66:	e9 01       	movw	r28, r18
    8d68:	99 83       	std	Y+1, r25	; 0x01
    8d6a:	88 83       	st	Y, r24
    8d6c:	82 81       	ldd	r24, Z+2	; 0x02
    8d6e:	93 81       	ldd	r25, Z+3	; 0x03
    8d70:	9b 83       	std	Y+3, r25	; 0x03
    8d72:	8a 83       	std	Y+2, r24	; 0x02
    8d74:	e0 e0       	ldi	r30, 0x00	; 0
    8d76:	f0 e0       	ldi	r31, 0x00	; 0
    8d78:	12 96       	adiw	r26, 0x02	; 2
    8d7a:	8d 91       	ld	r24, X+
    8d7c:	9c 91       	ld	r25, X
    8d7e:	13 97       	sbiw	r26, 0x03	; 3
    8d80:	00 97       	sbiw	r24, 0x00	; 0
    8d82:	19 f0       	breq	.+6      	; 0x8d8a <free+0xd4>
    8d84:	fd 01       	movw	r30, r26
    8d86:	dc 01       	movw	r26, r24
    8d88:	f7 cf       	rjmp	.-18     	; 0x8d78 <free+0xc2>
    8d8a:	8d 91       	ld	r24, X+
    8d8c:	9c 91       	ld	r25, X
    8d8e:	11 97       	sbiw	r26, 0x01	; 1
    8d90:	9d 01       	movw	r18, r26
    8d92:	2e 5f       	subi	r18, 0xFE	; 254
    8d94:	3f 4f       	sbci	r19, 0xFF	; 255
    8d96:	82 0f       	add	r24, r18
    8d98:	93 1f       	adc	r25, r19
    8d9a:	20 91 51 06 	lds	r18, 0x0651	; 0x800651 <__brkval>
    8d9e:	30 91 52 06 	lds	r19, 0x0652	; 0x800652 <__brkval+0x1>
    8da2:	28 17       	cp	r18, r24
    8da4:	39 07       	cpc	r19, r25
    8da6:	69 f4       	brne	.+26     	; 0x8dc2 <free+0x10c>
    8da8:	30 97       	sbiw	r30, 0x00	; 0
    8daa:	29 f4       	brne	.+10     	; 0x8db6 <free+0x100>
    8dac:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <__flp+0x1>
    8db0:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <__flp>
    8db4:	02 c0       	rjmp	.+4      	; 0x8dba <free+0x104>
    8db6:	13 82       	std	Z+3, r1	; 0x03
    8db8:	12 82       	std	Z+2, r1	; 0x02
    8dba:	b0 93 52 06 	sts	0x0652, r27	; 0x800652 <__brkval+0x1>
    8dbe:	a0 93 51 06 	sts	0x0651, r26	; 0x800651 <__brkval>
    8dc2:	df 91       	pop	r29
    8dc4:	cf 91       	pop	r28
    8dc6:	08 95       	ret

00008dc8 <random_r>:
    8dc8:	8f 92       	push	r8
    8dca:	9f 92       	push	r9
    8dcc:	af 92       	push	r10
    8dce:	bf 92       	push	r11
    8dd0:	cf 92       	push	r12
    8dd2:	df 92       	push	r13
    8dd4:	ef 92       	push	r14
    8dd6:	ff 92       	push	r15
    8dd8:	cf 93       	push	r28
    8dda:	df 93       	push	r29
    8ddc:	ec 01       	movw	r28, r24
    8dde:	68 81       	ld	r22, Y
    8de0:	79 81       	ldd	r23, Y+1	; 0x01
    8de2:	8a 81       	ldd	r24, Y+2	; 0x02
    8de4:	9b 81       	ldd	r25, Y+3	; 0x03
    8de6:	61 15       	cp	r22, r1
    8de8:	71 05       	cpc	r23, r1
    8dea:	81 05       	cpc	r24, r1
    8dec:	91 05       	cpc	r25, r1
    8dee:	21 f4       	brne	.+8      	; 0x8df8 <random_r+0x30>
    8df0:	64 e2       	ldi	r22, 0x24	; 36
    8df2:	79 ed       	ldi	r23, 0xD9	; 217
    8df4:	8b e5       	ldi	r24, 0x5B	; 91
    8df6:	97 e0       	ldi	r25, 0x07	; 7
    8df8:	2d e1       	ldi	r18, 0x1D	; 29
    8dfa:	33 ef       	ldi	r19, 0xF3	; 243
    8dfc:	41 e0       	ldi	r20, 0x01	; 1
    8dfe:	50 e0       	ldi	r21, 0x00	; 0
    8e00:	0e 94 26 43 	call	0x864c	; 0x864c <__divmodsi4>
    8e04:	49 01       	movw	r8, r18
    8e06:	5a 01       	movw	r10, r20
    8e08:	9b 01       	movw	r18, r22
    8e0a:	ac 01       	movw	r20, r24
    8e0c:	a7 ea       	ldi	r26, 0xA7	; 167
    8e0e:	b1 e4       	ldi	r27, 0x41	; 65
    8e10:	0e 94 4d 43 	call	0x869a	; 0x869a <__muluhisi3>
    8e14:	6b 01       	movw	r12, r22
    8e16:	7c 01       	movw	r14, r24
    8e18:	ac ee       	ldi	r26, 0xEC	; 236
    8e1a:	b4 ef       	ldi	r27, 0xF4	; 244
    8e1c:	a5 01       	movw	r20, r10
    8e1e:	94 01       	movw	r18, r8
    8e20:	0e 94 90 50 	call	0xa120	; 0xa120 <__mulohisi3>
    8e24:	dc 01       	movw	r26, r24
    8e26:	cb 01       	movw	r24, r22
    8e28:	8c 0d       	add	r24, r12
    8e2a:	9d 1d       	adc	r25, r13
    8e2c:	ae 1d       	adc	r26, r14
    8e2e:	bf 1d       	adc	r27, r15
    8e30:	b7 ff       	sbrs	r27, 7
    8e32:	03 c0       	rjmp	.+6      	; 0x8e3a <random_r+0x72>
    8e34:	01 97       	sbiw	r24, 0x01	; 1
    8e36:	a1 09       	sbc	r26, r1
    8e38:	b0 48       	sbci	r27, 0x80	; 128
    8e3a:	88 83       	st	Y, r24
    8e3c:	99 83       	std	Y+1, r25	; 0x01
    8e3e:	aa 83       	std	Y+2, r26	; 0x02
    8e40:	bb 83       	std	Y+3, r27	; 0x03
    8e42:	bc 01       	movw	r22, r24
    8e44:	cd 01       	movw	r24, r26
    8e46:	9f 77       	andi	r25, 0x7F	; 127
    8e48:	df 91       	pop	r29
    8e4a:	cf 91       	pop	r28
    8e4c:	ff 90       	pop	r15
    8e4e:	ef 90       	pop	r14
    8e50:	df 90       	pop	r13
    8e52:	cf 90       	pop	r12
    8e54:	bf 90       	pop	r11
    8e56:	af 90       	pop	r10
    8e58:	9f 90       	pop	r9
    8e5a:	8f 90       	pop	r8
    8e5c:	08 95       	ret

00008e5e <random>:
    8e5e:	8f 92       	push	r8
    8e60:	9f 92       	push	r9
    8e62:	af 92       	push	r10
    8e64:	bf 92       	push	r11
    8e66:	cf 92       	push	r12
    8e68:	df 92       	push	r13
    8e6a:	ef 92       	push	r14
    8e6c:	ff 92       	push	r15
    8e6e:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <next>
    8e72:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <next+0x1>
    8e76:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <next+0x2>
    8e7a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <next+0x3>
    8e7e:	61 15       	cp	r22, r1
    8e80:	71 05       	cpc	r23, r1
    8e82:	81 05       	cpc	r24, r1
    8e84:	91 05       	cpc	r25, r1
    8e86:	21 f4       	brne	.+8      	; 0x8e90 <random+0x32>
    8e88:	64 e2       	ldi	r22, 0x24	; 36
    8e8a:	79 ed       	ldi	r23, 0xD9	; 217
    8e8c:	8b e5       	ldi	r24, 0x5B	; 91
    8e8e:	97 e0       	ldi	r25, 0x07	; 7
    8e90:	2d e1       	ldi	r18, 0x1D	; 29
    8e92:	33 ef       	ldi	r19, 0xF3	; 243
    8e94:	41 e0       	ldi	r20, 0x01	; 1
    8e96:	50 e0       	ldi	r21, 0x00	; 0
    8e98:	0e 94 26 43 	call	0x864c	; 0x864c <__divmodsi4>
    8e9c:	49 01       	movw	r8, r18
    8e9e:	5a 01       	movw	r10, r20
    8ea0:	9b 01       	movw	r18, r22
    8ea2:	ac 01       	movw	r20, r24
    8ea4:	a7 ea       	ldi	r26, 0xA7	; 167
    8ea6:	b1 e4       	ldi	r27, 0x41	; 65
    8ea8:	0e 94 4d 43 	call	0x869a	; 0x869a <__muluhisi3>
    8eac:	6b 01       	movw	r12, r22
    8eae:	7c 01       	movw	r14, r24
    8eb0:	ac ee       	ldi	r26, 0xEC	; 236
    8eb2:	b4 ef       	ldi	r27, 0xF4	; 244
    8eb4:	a5 01       	movw	r20, r10
    8eb6:	94 01       	movw	r18, r8
    8eb8:	0e 94 90 50 	call	0xa120	; 0xa120 <__mulohisi3>
    8ebc:	dc 01       	movw	r26, r24
    8ebe:	cb 01       	movw	r24, r22
    8ec0:	8c 0d       	add	r24, r12
    8ec2:	9d 1d       	adc	r25, r13
    8ec4:	ae 1d       	adc	r26, r14
    8ec6:	bf 1d       	adc	r27, r15
    8ec8:	b7 ff       	sbrs	r27, 7
    8eca:	03 c0       	rjmp	.+6      	; 0x8ed2 <random+0x74>
    8ecc:	01 97       	sbiw	r24, 0x01	; 1
    8ece:	a1 09       	sbc	r26, r1
    8ed0:	b0 48       	sbci	r27, 0x80	; 128
    8ed2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <next>
    8ed6:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <next+0x1>
    8eda:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <next+0x2>
    8ede:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <next+0x3>
    8ee2:	bc 01       	movw	r22, r24
    8ee4:	cd 01       	movw	r24, r26
    8ee6:	9f 77       	andi	r25, 0x7F	; 127
    8ee8:	ff 90       	pop	r15
    8eea:	ef 90       	pop	r14
    8eec:	df 90       	pop	r13
    8eee:	cf 90       	pop	r12
    8ef0:	bf 90       	pop	r11
    8ef2:	af 90       	pop	r10
    8ef4:	9f 90       	pop	r9
    8ef6:	8f 90       	pop	r8
    8ef8:	08 95       	ret

00008efa <srandom>:
    8efa:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <next>
    8efe:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <next+0x1>
    8f02:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <next+0x2>
    8f06:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <next+0x3>
    8f0a:	08 95       	ret

00008f0c <realloc>:
    8f0c:	6f 92       	push	r6
    8f0e:	7f 92       	push	r7
    8f10:	8f 92       	push	r8
    8f12:	9f 92       	push	r9
    8f14:	af 92       	push	r10
    8f16:	bf 92       	push	r11
    8f18:	cf 92       	push	r12
    8f1a:	df 92       	push	r13
    8f1c:	ef 92       	push	r14
    8f1e:	ff 92       	push	r15
    8f20:	0f 93       	push	r16
    8f22:	1f 93       	push	r17
    8f24:	cf 93       	push	r28
    8f26:	df 93       	push	r29
    8f28:	00 97       	sbiw	r24, 0x00	; 0
    8f2a:	89 f4       	brne	.+34     	; 0x8f4e <realloc+0x42>
    8f2c:	cb 01       	movw	r24, r22
    8f2e:	df 91       	pop	r29
    8f30:	cf 91       	pop	r28
    8f32:	1f 91       	pop	r17
    8f34:	0f 91       	pop	r16
    8f36:	ff 90       	pop	r15
    8f38:	ef 90       	pop	r14
    8f3a:	df 90       	pop	r13
    8f3c:	cf 90       	pop	r12
    8f3e:	bf 90       	pop	r11
    8f40:	af 90       	pop	r10
    8f42:	9f 90       	pop	r9
    8f44:	8f 90       	pop	r8
    8f46:	7f 90       	pop	r7
    8f48:	6f 90       	pop	r6
    8f4a:	0c 94 c3 45 	jmp	0x8b86	; 0x8b86 <malloc>
    8f4e:	fc 01       	movw	r30, r24
    8f50:	e6 0f       	add	r30, r22
    8f52:	f7 1f       	adc	r31, r23
    8f54:	9c 01       	movw	r18, r24
    8f56:	22 50       	subi	r18, 0x02	; 2
    8f58:	31 09       	sbc	r19, r1
    8f5a:	e2 17       	cp	r30, r18
    8f5c:	f3 07       	cpc	r31, r19
    8f5e:	08 f4       	brcc	.+2      	; 0x8f62 <realloc+0x56>
    8f60:	a9 c0       	rjmp	.+338    	; 0x90b4 <realloc+0x1a8>
    8f62:	ec 01       	movw	r28, r24
    8f64:	d9 01       	movw	r26, r18
    8f66:	0d 91       	ld	r16, X+
    8f68:	1c 91       	ld	r17, X
    8f6a:	11 97       	sbiw	r26, 0x01	; 1
    8f6c:	06 17       	cp	r16, r22
    8f6e:	17 07       	cpc	r17, r23
    8f70:	b0 f0       	brcs	.+44     	; 0x8f9e <realloc+0x92>
    8f72:	05 30       	cpi	r16, 0x05	; 5
    8f74:	11 05       	cpc	r17, r1
    8f76:	08 f4       	brcc	.+2      	; 0x8f7a <realloc+0x6e>
    8f78:	9b c0       	rjmp	.+310    	; 0x90b0 <realloc+0x1a4>
    8f7a:	c8 01       	movw	r24, r16
    8f7c:	04 97       	sbiw	r24, 0x04	; 4
    8f7e:	86 17       	cp	r24, r22
    8f80:	97 07       	cpc	r25, r23
    8f82:	08 f4       	brcc	.+2      	; 0x8f86 <realloc+0x7a>
    8f84:	95 c0       	rjmp	.+298    	; 0x90b0 <realloc+0x1a4>
    8f86:	02 50       	subi	r16, 0x02	; 2
    8f88:	11 09       	sbc	r17, r1
    8f8a:	06 1b       	sub	r16, r22
    8f8c:	17 0b       	sbc	r17, r23
    8f8e:	01 93       	st	Z+, r16
    8f90:	11 93       	st	Z+, r17
    8f92:	6d 93       	st	X+, r22
    8f94:	7c 93       	st	X, r23
    8f96:	cf 01       	movw	r24, r30
    8f98:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <free>
    8f9c:	89 c0       	rjmp	.+274    	; 0x90b0 <realloc+0x1a4>
    8f9e:	5b 01       	movw	r10, r22
    8fa0:	a0 1a       	sub	r10, r16
    8fa2:	b1 0a       	sbc	r11, r17
    8fa4:	4c 01       	movw	r8, r24
    8fa6:	80 0e       	add	r8, r16
    8fa8:	91 1e       	adc	r9, r17
    8faa:	a0 91 53 06 	lds	r26, 0x0653	; 0x800653 <__flp>
    8fae:	b0 91 54 06 	lds	r27, 0x0654	; 0x800654 <__flp+0x1>
    8fb2:	61 2c       	mov	r6, r1
    8fb4:	71 2c       	mov	r7, r1
    8fb6:	e1 2c       	mov	r14, r1
    8fb8:	f1 2c       	mov	r15, r1
    8fba:	10 97       	sbiw	r26, 0x00	; 0
    8fbc:	09 f4       	brne	.+2      	; 0x8fc0 <realloc+0xb4>
    8fbe:	46 c0       	rjmp	.+140    	; 0x904c <realloc+0x140>
    8fc0:	8d 91       	ld	r24, X+
    8fc2:	9c 91       	ld	r25, X
    8fc4:	11 97       	sbiw	r26, 0x01	; 1
    8fc6:	a8 15       	cp	r26, r8
    8fc8:	b9 05       	cpc	r27, r9
    8fca:	b1 f5       	brne	.+108    	; 0x9038 <realloc+0x12c>
    8fcc:	6c 01       	movw	r12, r24
    8fce:	42 e0       	ldi	r20, 0x02	; 2
    8fd0:	c4 0e       	add	r12, r20
    8fd2:	d1 1c       	adc	r13, r1
    8fd4:	ca 14       	cp	r12, r10
    8fd6:	db 04       	cpc	r13, r11
    8fd8:	78 f1       	brcs	.+94     	; 0x9038 <realloc+0x12c>
    8fda:	4c 01       	movw	r8, r24
    8fdc:	8a 18       	sub	r8, r10
    8fde:	9b 08       	sbc	r9, r11
    8fe0:	64 01       	movw	r12, r8
    8fe2:	42 e0       	ldi	r20, 0x02	; 2
    8fe4:	c4 0e       	add	r12, r20
    8fe6:	d1 1c       	adc	r13, r1
    8fe8:	12 96       	adiw	r26, 0x02	; 2
    8fea:	bc 90       	ld	r11, X
    8fec:	12 97       	sbiw	r26, 0x02	; 2
    8fee:	13 96       	adiw	r26, 0x03	; 3
    8ff0:	ac 91       	ld	r26, X
    8ff2:	b5 e0       	ldi	r27, 0x05	; 5
    8ff4:	cb 16       	cp	r12, r27
    8ff6:	d1 04       	cpc	r13, r1
    8ff8:	40 f0       	brcs	.+16     	; 0x900a <realloc+0xfe>
    8ffa:	b2 82       	std	Z+2, r11	; 0x02
    8ffc:	a3 83       	std	Z+3, r26	; 0x03
    8ffe:	91 82       	std	Z+1, r9	; 0x01
    9000:	80 82       	st	Z, r8
    9002:	d9 01       	movw	r26, r18
    9004:	6d 93       	st	X+, r22
    9006:	7c 93       	st	X, r23
    9008:	09 c0       	rjmp	.+18     	; 0x901c <realloc+0x110>
    900a:	0e 5f       	subi	r16, 0xFE	; 254
    900c:	1f 4f       	sbci	r17, 0xFF	; 255
    900e:	80 0f       	add	r24, r16
    9010:	91 1f       	adc	r25, r17
    9012:	f9 01       	movw	r30, r18
    9014:	91 83       	std	Z+1, r25	; 0x01
    9016:	80 83       	st	Z, r24
    9018:	eb 2d       	mov	r30, r11
    901a:	fa 2f       	mov	r31, r26
    901c:	e1 14       	cp	r14, r1
    901e:	f1 04       	cpc	r15, r1
    9020:	31 f0       	breq	.+12     	; 0x902e <realloc+0x122>
    9022:	d7 01       	movw	r26, r14
    9024:	13 96       	adiw	r26, 0x03	; 3
    9026:	fc 93       	st	X, r31
    9028:	ee 93       	st	-X, r30
    902a:	12 97       	sbiw	r26, 0x02	; 2
    902c:	41 c0       	rjmp	.+130    	; 0x90b0 <realloc+0x1a4>
    902e:	f0 93 54 06 	sts	0x0654, r31	; 0x800654 <__flp+0x1>
    9032:	e0 93 53 06 	sts	0x0653, r30	; 0x800653 <__flp>
    9036:	3c c0       	rjmp	.+120    	; 0x90b0 <realloc+0x1a4>
    9038:	68 16       	cp	r6, r24
    903a:	79 06       	cpc	r7, r25
    903c:	08 f4       	brcc	.+2      	; 0x9040 <realloc+0x134>
    903e:	3c 01       	movw	r6, r24
    9040:	7d 01       	movw	r14, r26
    9042:	12 96       	adiw	r26, 0x02	; 2
    9044:	0d 90       	ld	r0, X+
    9046:	bc 91       	ld	r27, X
    9048:	a0 2d       	mov	r26, r0
    904a:	b7 cf       	rjmp	.-146    	; 0x8fba <realloc+0xae>
    904c:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <__brkval>
    9050:	90 91 52 06 	lds	r25, 0x0652	; 0x800652 <__brkval+0x1>
    9054:	88 16       	cp	r8, r24
    9056:	99 06       	cpc	r9, r25
    9058:	e1 f4       	brne	.+56     	; 0x9092 <realloc+0x186>
    905a:	66 16       	cp	r6, r22
    905c:	77 06       	cpc	r7, r23
    905e:	c8 f4       	brcc	.+50     	; 0x9092 <realloc+0x186>
    9060:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__malloc_heap_end>
    9064:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
    9068:	00 97       	sbiw	r24, 0x00	; 0
    906a:	41 f4       	brne	.+16     	; 0x907c <realloc+0x170>
    906c:	8d b7       	in	r24, 0x3d	; 61
    906e:	9e b7       	in	r25, 0x3e	; 62
    9070:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
    9074:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
    9078:	84 1b       	sub	r24, r20
    907a:	95 0b       	sbc	r25, r21
    907c:	e8 17       	cp	r30, r24
    907e:	f9 07       	cpc	r31, r25
    9080:	c8 f4       	brcc	.+50     	; 0x90b4 <realloc+0x1a8>
    9082:	f0 93 52 06 	sts	0x0652, r31	; 0x800652 <__brkval+0x1>
    9086:	e0 93 51 06 	sts	0x0651, r30	; 0x800651 <__brkval>
    908a:	f9 01       	movw	r30, r18
    908c:	71 83       	std	Z+1, r23	; 0x01
    908e:	60 83       	st	Z, r22
    9090:	0f c0       	rjmp	.+30     	; 0x90b0 <realloc+0x1a4>
    9092:	cb 01       	movw	r24, r22
    9094:	0e 94 c3 45 	call	0x8b86	; 0x8b86 <malloc>
    9098:	7c 01       	movw	r14, r24
    909a:	00 97       	sbiw	r24, 0x00	; 0
    909c:	59 f0       	breq	.+22     	; 0x90b4 <realloc+0x1a8>
    909e:	a8 01       	movw	r20, r16
    90a0:	be 01       	movw	r22, r28
    90a2:	0e 94 d1 48 	call	0x91a2	; 0x91a2 <memcpy>
    90a6:	ce 01       	movw	r24, r28
    90a8:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <free>
    90ac:	c7 01       	movw	r24, r14
    90ae:	04 c0       	rjmp	.+8      	; 0x90b8 <realloc+0x1ac>
    90b0:	ce 01       	movw	r24, r28
    90b2:	02 c0       	rjmp	.+4      	; 0x90b8 <realloc+0x1ac>
    90b4:	80 e0       	ldi	r24, 0x00	; 0
    90b6:	90 e0       	ldi	r25, 0x00	; 0
    90b8:	df 91       	pop	r29
    90ba:	cf 91       	pop	r28
    90bc:	1f 91       	pop	r17
    90be:	0f 91       	pop	r16
    90c0:	ff 90       	pop	r15
    90c2:	ef 90       	pop	r14
    90c4:	df 90       	pop	r13
    90c6:	cf 90       	pop	r12
    90c8:	bf 90       	pop	r11
    90ca:	af 90       	pop	r10
    90cc:	9f 90       	pop	r9
    90ce:	8f 90       	pop	r8
    90d0:	7f 90       	pop	r7
    90d2:	6f 90       	pop	r6
    90d4:	08 95       	ret

000090d6 <abort>:
    90d6:	81 e0       	ldi	r24, 0x01	; 1
    90d8:	90 e0       	ldi	r25, 0x00	; 0
    90da:	f8 94       	cli
    90dc:	0c 94 95 50 	jmp	0xa12a	; 0xa12a <_exit>

000090e0 <atof>:
    90e0:	66 27       	eor	r22, r22
    90e2:	77 27       	eor	r23, r23
    90e4:	0c 94 7e 4d 	jmp	0x9afc	; 0x9afc <strtod>

000090e8 <atol>:
    90e8:	1f 93       	push	r17
    90ea:	fc 01       	movw	r30, r24
    90ec:	99 27       	eor	r25, r25
    90ee:	88 27       	eor	r24, r24
    90f0:	bc 01       	movw	r22, r24
    90f2:	e8 94       	clt
    90f4:	11 91       	ld	r17, Z+
    90f6:	10 32       	cpi	r17, 0x20	; 32
    90f8:	e9 f3       	breq	.-6      	; 0x90f4 <atol+0xc>
    90fa:	19 30       	cpi	r17, 0x09	; 9
    90fc:	10 f0       	brcs	.+4      	; 0x9102 <atol+0x1a>
    90fe:	1e 30       	cpi	r17, 0x0E	; 14
    9100:	c8 f3       	brcs	.-14     	; 0x90f4 <atol+0xc>
    9102:	1b 32       	cpi	r17, 0x2B	; 43
    9104:	51 f0       	breq	.+20     	; 0x911a <atol+0x32>
    9106:	1d 32       	cpi	r17, 0x2D	; 45
    9108:	49 f4       	brne	.+18     	; 0x911c <atol+0x34>
    910a:	68 94       	set
    910c:	06 c0       	rjmp	.+12     	; 0x911a <atol+0x32>
    910e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsi_const_10>
    9112:	61 0f       	add	r22, r17
    9114:	71 1d       	adc	r23, r1
    9116:	81 1d       	adc	r24, r1
    9118:	91 1d       	adc	r25, r1
    911a:	11 91       	ld	r17, Z+
    911c:	10 53       	subi	r17, 0x30	; 48
    911e:	1a 30       	cpi	r17, 0x0A	; 10
    9120:	b0 f3       	brcs	.-20     	; 0x910e <atol+0x26>
    9122:	3e f4       	brtc	.+14     	; 0x9132 <atol+0x4a>
    9124:	90 95       	com	r25
    9126:	80 95       	com	r24
    9128:	70 95       	com	r23
    912a:	61 95       	neg	r22
    912c:	7f 4f       	sbci	r23, 0xFF	; 255
    912e:	8f 4f       	sbci	r24, 0xFF	; 255
    9130:	9f 4f       	sbci	r25, 0xFF	; 255
    9132:	1f 91       	pop	r17
    9134:	08 95       	ret

00009136 <isspace>:
    9136:	91 11       	cpse	r25, r1
    9138:	0c 94 b2 4f 	jmp	0x9f64	; 0x9f64 <__ctype_isfalse>
    913c:	80 32       	cpi	r24, 0x20	; 32
    913e:	19 f0       	breq	.+6      	; 0x9146 <isspace+0x10>
    9140:	89 50       	subi	r24, 0x09	; 9
    9142:	85 50       	subi	r24, 0x05	; 5
    9144:	c8 f7       	brcc	.-14     	; 0x9138 <isspace+0x2>
    9146:	08 95       	ret

00009148 <tolower>:
    9148:	91 11       	cpse	r25, r1
    914a:	08 95       	ret
    914c:	81 54       	subi	r24, 0x41	; 65
    914e:	8a 51       	subi	r24, 0x1A	; 26
    9150:	08 f4       	brcc	.+2      	; 0x9154 <tolower+0xc>
    9152:	80 5e       	subi	r24, 0xE0	; 224
    9154:	85 5a       	subi	r24, 0xA5	; 165
    9156:	08 95       	ret

00009158 <toupper>:
    9158:	91 11       	cpse	r25, r1
    915a:	08 95       	ret
    915c:	81 56       	subi	r24, 0x61	; 97
    915e:	8a 51       	subi	r24, 0x1A	; 26
    9160:	08 f4       	brcc	.+2      	; 0x9164 <toupper+0xc>
    9162:	80 52       	subi	r24, 0x20	; 32
    9164:	85 58       	subi	r24, 0x85	; 133
    9166:	08 95       	ret

00009168 <strcpy_P>:
    9168:	fb 01       	movw	r30, r22
    916a:	dc 01       	movw	r26, r24
    916c:	05 90       	lpm	r0, Z+
    916e:	0d 92       	st	X+, r0
    9170:	00 20       	and	r0, r0
    9172:	e1 f7       	brne	.-8      	; 0x916c <strcpy_P+0x4>
    9174:	08 95       	ret

00009176 <__strlen_P>:
    9176:	fc 01       	movw	r30, r24
    9178:	05 90       	lpm	r0, Z+
    917a:	00 20       	and	r0, r0
    917c:	e9 f7       	brne	.-6      	; 0x9178 <__strlen_P+0x2>
    917e:	80 95       	com	r24
    9180:	90 95       	com	r25
    9182:	8e 0f       	add	r24, r30
    9184:	9f 1f       	adc	r25, r31
    9186:	08 95       	ret

00009188 <memcmp>:
    9188:	fb 01       	movw	r30, r22
    918a:	dc 01       	movw	r26, r24
    918c:	04 c0       	rjmp	.+8      	; 0x9196 <memcmp+0xe>
    918e:	8d 91       	ld	r24, X+
    9190:	01 90       	ld	r0, Z+
    9192:	80 19       	sub	r24, r0
    9194:	21 f4       	brne	.+8      	; 0x919e <memcmp+0x16>
    9196:	41 50       	subi	r20, 0x01	; 1
    9198:	50 40       	sbci	r21, 0x00	; 0
    919a:	c8 f7       	brcc	.-14     	; 0x918e <memcmp+0x6>
    919c:	88 1b       	sub	r24, r24
    919e:	99 0b       	sbc	r25, r25
    91a0:	08 95       	ret

000091a2 <memcpy>:
    91a2:	fb 01       	movw	r30, r22
    91a4:	dc 01       	movw	r26, r24
    91a6:	02 c0       	rjmp	.+4      	; 0x91ac <memcpy+0xa>
    91a8:	01 90       	ld	r0, Z+
    91aa:	0d 92       	st	X+, r0
    91ac:	41 50       	subi	r20, 0x01	; 1
    91ae:	50 40       	sbci	r21, 0x00	; 0
    91b0:	d8 f7       	brcc	.-10     	; 0x91a8 <memcpy+0x6>
    91b2:	08 95       	ret

000091b4 <memmove>:
    91b4:	68 17       	cp	r22, r24
    91b6:	79 07       	cpc	r23, r25
    91b8:	68 f4       	brcc	.+26     	; 0x91d4 <memmove+0x20>
    91ba:	fb 01       	movw	r30, r22
    91bc:	dc 01       	movw	r26, r24
    91be:	e4 0f       	add	r30, r20
    91c0:	f5 1f       	adc	r31, r21
    91c2:	a4 0f       	add	r26, r20
    91c4:	b5 1f       	adc	r27, r21
    91c6:	02 c0       	rjmp	.+4      	; 0x91cc <memmove+0x18>
    91c8:	02 90       	ld	r0, -Z
    91ca:	0e 92       	st	-X, r0
    91cc:	41 50       	subi	r20, 0x01	; 1
    91ce:	50 40       	sbci	r21, 0x00	; 0
    91d0:	d8 f7       	brcc	.-10     	; 0x91c8 <memmove+0x14>
    91d2:	08 95       	ret
    91d4:	0c 94 d1 48 	jmp	0x91a2	; 0x91a2 <memcpy>

000091d8 <strchr>:
    91d8:	fc 01       	movw	r30, r24
    91da:	81 91       	ld	r24, Z+
    91dc:	86 17       	cp	r24, r22
    91de:	21 f0       	breq	.+8      	; 0x91e8 <strchr+0x10>
    91e0:	88 23       	and	r24, r24
    91e2:	d9 f7       	brne	.-10     	; 0x91da <strchr+0x2>
    91e4:	99 27       	eor	r25, r25
    91e6:	08 95       	ret
    91e8:	31 97       	sbiw	r30, 0x01	; 1
    91ea:	cf 01       	movw	r24, r30
    91ec:	08 95       	ret

000091ee <strcmp>:
    91ee:	fb 01       	movw	r30, r22
    91f0:	dc 01       	movw	r26, r24
    91f2:	8d 91       	ld	r24, X+
    91f4:	01 90       	ld	r0, Z+
    91f6:	80 19       	sub	r24, r0
    91f8:	01 10       	cpse	r0, r1
    91fa:	d9 f3       	breq	.-10     	; 0x91f2 <strcmp+0x4>
    91fc:	99 0b       	sbc	r25, r25
    91fe:	08 95       	ret

00009200 <strcpy>:
    9200:	fb 01       	movw	r30, r22
    9202:	dc 01       	movw	r26, r24
    9204:	01 90       	ld	r0, Z+
    9206:	0d 92       	st	X+, r0
    9208:	00 20       	and	r0, r0
    920a:	e1 f7       	brne	.-8      	; 0x9204 <strcpy+0x4>
    920c:	08 95       	ret

0000920e <strlen>:
    920e:	fc 01       	movw	r30, r24
    9210:	01 90       	ld	r0, Z+
    9212:	00 20       	and	r0, r0
    9214:	e9 f7       	brne	.-6      	; 0x9210 <strlen+0x2>
    9216:	80 95       	com	r24
    9218:	90 95       	com	r25
    921a:	8e 0f       	add	r24, r30
    921c:	9f 1f       	adc	r25, r31
    921e:	08 95       	ret

00009220 <strncmp>:
    9220:	fb 01       	movw	r30, r22
    9222:	dc 01       	movw	r26, r24
    9224:	41 50       	subi	r20, 0x01	; 1
    9226:	50 40       	sbci	r21, 0x00	; 0
    9228:	30 f0       	brcs	.+12     	; 0x9236 <strncmp+0x16>
    922a:	8d 91       	ld	r24, X+
    922c:	01 90       	ld	r0, Z+
    922e:	80 19       	sub	r24, r0
    9230:	19 f4       	brne	.+6      	; 0x9238 <strncmp+0x18>
    9232:	00 20       	and	r0, r0
    9234:	b9 f7       	brne	.-18     	; 0x9224 <strncmp+0x4>
    9236:	88 1b       	sub	r24, r24
    9238:	99 0b       	sbc	r25, r25
    923a:	08 95       	ret

0000923c <strncpy>:
    923c:	fb 01       	movw	r30, r22
    923e:	dc 01       	movw	r26, r24
    9240:	41 50       	subi	r20, 0x01	; 1
    9242:	50 40       	sbci	r21, 0x00	; 0
    9244:	48 f0       	brcs	.+18     	; 0x9258 <strncpy+0x1c>
    9246:	01 90       	ld	r0, Z+
    9248:	0d 92       	st	X+, r0
    924a:	00 20       	and	r0, r0
    924c:	c9 f7       	brne	.-14     	; 0x9240 <strncpy+0x4>
    924e:	01 c0       	rjmp	.+2      	; 0x9252 <strncpy+0x16>
    9250:	1d 92       	st	X+, r1
    9252:	41 50       	subi	r20, 0x01	; 1
    9254:	50 40       	sbci	r21, 0x00	; 0
    9256:	e0 f7       	brcc	.-8      	; 0x9250 <strncpy+0x14>
    9258:	08 95       	ret

0000925a <strrchr>:
    925a:	fc 01       	movw	r30, r24
    925c:	81 e0       	ldi	r24, 0x01	; 1
    925e:	90 e0       	ldi	r25, 0x00	; 0
    9260:	01 90       	ld	r0, Z+
    9262:	06 16       	cp	r0, r22
    9264:	09 f4       	brne	.+2      	; 0x9268 <strrchr+0xe>
    9266:	cf 01       	movw	r24, r30
    9268:	00 20       	and	r0, r0
    926a:	d1 f7       	brne	.-12     	; 0x9260 <strrchr+0x6>
    926c:	01 97       	sbiw	r24, 0x01	; 1
    926e:	08 95       	ret

00009270 <strstr>:
    9270:	fb 01       	movw	r30, r22
    9272:	51 91       	ld	r21, Z+
    9274:	55 23       	and	r21, r21
    9276:	a9 f0       	breq	.+42     	; 0x92a2 <strstr+0x32>
    9278:	bf 01       	movw	r22, r30
    927a:	dc 01       	movw	r26, r24
    927c:	4d 91       	ld	r20, X+
    927e:	45 17       	cp	r20, r21
    9280:	41 11       	cpse	r20, r1
    9282:	e1 f7       	brne	.-8      	; 0x927c <strstr+0xc>
    9284:	59 f4       	brne	.+22     	; 0x929c <strstr+0x2c>
    9286:	cd 01       	movw	r24, r26
    9288:	01 90       	ld	r0, Z+
    928a:	00 20       	and	r0, r0
    928c:	49 f0       	breq	.+18     	; 0x92a0 <strstr+0x30>
    928e:	4d 91       	ld	r20, X+
    9290:	40 15       	cp	r20, r0
    9292:	41 11       	cpse	r20, r1
    9294:	c9 f3       	breq	.-14     	; 0x9288 <strstr+0x18>
    9296:	fb 01       	movw	r30, r22
    9298:	41 11       	cpse	r20, r1
    929a:	ef cf       	rjmp	.-34     	; 0x927a <strstr+0xa>
    929c:	81 e0       	ldi	r24, 0x01	; 1
    929e:	90 e0       	ldi	r25, 0x00	; 0
    92a0:	01 97       	sbiw	r24, 0x01	; 1
    92a2:	08 95       	ret

000092a4 <itoa>:
    92a4:	45 32       	cpi	r20, 0x25	; 37
    92a6:	51 05       	cpc	r21, r1
    92a8:	20 f4       	brcc	.+8      	; 0x92b2 <itoa+0xe>
    92aa:	42 30       	cpi	r20, 0x02	; 2
    92ac:	10 f0       	brcs	.+4      	; 0x92b2 <itoa+0xe>
    92ae:	0c 94 5d 49 	jmp	0x92ba	; 0x92ba <__itoa_ncheck>
    92b2:	fb 01       	movw	r30, r22
    92b4:	10 82       	st	Z, r1
    92b6:	cb 01       	movw	r24, r22
    92b8:	08 95       	ret

000092ba <__itoa_ncheck>:
    92ba:	bb 27       	eor	r27, r27
    92bc:	4a 30       	cpi	r20, 0x0A	; 10
    92be:	31 f4       	brne	.+12     	; 0x92cc <__itoa_ncheck+0x12>
    92c0:	99 23       	and	r25, r25
    92c2:	22 f4       	brpl	.+8      	; 0x92cc <__itoa_ncheck+0x12>
    92c4:	bd e2       	ldi	r27, 0x2D	; 45
    92c6:	90 95       	com	r25
    92c8:	81 95       	neg	r24
    92ca:	9f 4f       	sbci	r25, 0xFF	; 255
    92cc:	0c 94 d0 49 	jmp	0x93a0	; 0x93a0 <__utoa_common>

000092d0 <ltoa>:
    92d0:	25 32       	cpi	r18, 0x25	; 37
    92d2:	31 05       	cpc	r19, r1
    92d4:	20 f4       	brcc	.+8      	; 0x92de <ltoa+0xe>
    92d6:	22 30       	cpi	r18, 0x02	; 2
    92d8:	10 f0       	brcs	.+4      	; 0x92de <ltoa+0xe>
    92da:	0c 94 73 49 	jmp	0x92e6	; 0x92e6 <__ltoa_ncheck>
    92de:	fa 01       	movw	r30, r20
    92e0:	10 82       	st	Z, r1
    92e2:	ca 01       	movw	r24, r20
    92e4:	08 95       	ret

000092e6 <__ltoa_ncheck>:
    92e6:	bb 27       	eor	r27, r27
    92e8:	2a 30       	cpi	r18, 0x0A	; 10
    92ea:	51 f4       	brne	.+20     	; 0x9300 <__ltoa_ncheck+0x1a>
    92ec:	99 23       	and	r25, r25
    92ee:	42 f4       	brpl	.+16     	; 0x9300 <__ltoa_ncheck+0x1a>
    92f0:	bd e2       	ldi	r27, 0x2D	; 45
    92f2:	90 95       	com	r25
    92f4:	80 95       	com	r24
    92f6:	70 95       	com	r23
    92f8:	61 95       	neg	r22
    92fa:	7f 4f       	sbci	r23, 0xFF	; 255
    92fc:	8f 4f       	sbci	r24, 0xFF	; 255
    92fe:	9f 4f       	sbci	r25, 0xFF	; 255
    9300:	0c 94 a3 49 	jmp	0x9346	; 0x9346 <__ultoa_common>

00009304 <__mulsi_const_10>:
    9304:	59 2f       	mov	r21, r25
    9306:	48 2f       	mov	r20, r24
    9308:	37 2f       	mov	r19, r23
    930a:	26 2f       	mov	r18, r22
    930c:	66 0f       	add	r22, r22
    930e:	77 1f       	adc	r23, r23
    9310:	88 1f       	adc	r24, r24
    9312:	99 1f       	adc	r25, r25
    9314:	66 0f       	add	r22, r22
    9316:	77 1f       	adc	r23, r23
    9318:	88 1f       	adc	r24, r24
    931a:	99 1f       	adc	r25, r25
    931c:	62 0f       	add	r22, r18
    931e:	73 1f       	adc	r23, r19
    9320:	84 1f       	adc	r24, r20
    9322:	95 1f       	adc	r25, r21
    9324:	66 0f       	add	r22, r22
    9326:	77 1f       	adc	r23, r23
    9328:	88 1f       	adc	r24, r24
    932a:	99 1f       	adc	r25, r25
    932c:	08 95       	ret

0000932e <ultoa>:
    932e:	25 32       	cpi	r18, 0x25	; 37
    9330:	31 05       	cpc	r19, r1
    9332:	20 f4       	brcc	.+8      	; 0x933c <ultoa+0xe>
    9334:	22 30       	cpi	r18, 0x02	; 2
    9336:	10 f0       	brcs	.+4      	; 0x933c <ultoa+0xe>
    9338:	0c 94 a2 49 	jmp	0x9344	; 0x9344 <__ultoa_ncheck>
    933c:	fa 01       	movw	r30, r20
    933e:	10 82       	st	Z, r1
    9340:	ca 01       	movw	r24, r20
    9342:	08 95       	ret

00009344 <__ultoa_ncheck>:
    9344:	bb 27       	eor	r27, r27

00009346 <__ultoa_common>:
    9346:	fa 01       	movw	r30, r20
    9348:	a6 2f       	mov	r26, r22
    934a:	62 17       	cp	r22, r18
    934c:	71 05       	cpc	r23, r1
    934e:	81 05       	cpc	r24, r1
    9350:	91 05       	cpc	r25, r1
    9352:	33 0b       	sbc	r19, r19
    9354:	30 fb       	bst	r19, 0
    9356:	66 f0       	brts	.+24     	; 0x9370 <__ultoa_common+0x2a>
    9358:	aa 27       	eor	r26, r26
    935a:	66 0f       	add	r22, r22
    935c:	77 1f       	adc	r23, r23
    935e:	88 1f       	adc	r24, r24
    9360:	99 1f       	adc	r25, r25
    9362:	aa 1f       	adc	r26, r26
    9364:	a2 17       	cp	r26, r18
    9366:	10 f0       	brcs	.+4      	; 0x936c <__ultoa_common+0x26>
    9368:	a2 1b       	sub	r26, r18
    936a:	63 95       	inc	r22
    936c:	38 50       	subi	r19, 0x08	; 8
    936e:	a9 f7       	brne	.-22     	; 0x935a <__ultoa_common+0x14>
    9370:	a0 5d       	subi	r26, 0xD0	; 208
    9372:	aa 33       	cpi	r26, 0x3A	; 58
    9374:	08 f0       	brcs	.+2      	; 0x9378 <__ultoa_common+0x32>
    9376:	a9 5d       	subi	r26, 0xD9	; 217
    9378:	a1 93       	st	Z+, r26
    937a:	36 f7       	brtc	.-52     	; 0x9348 <__ultoa_common+0x2>
    937c:	b1 11       	cpse	r27, r1
    937e:	b1 93       	st	Z+, r27
    9380:	10 82       	st	Z, r1
    9382:	ca 01       	movw	r24, r20
    9384:	0c 94 e3 4f 	jmp	0x9fc6	; 0x9fc6 <strrev>

00009388 <utoa>:
    9388:	45 32       	cpi	r20, 0x25	; 37
    938a:	51 05       	cpc	r21, r1
    938c:	20 f4       	brcc	.+8      	; 0x9396 <utoa+0xe>
    938e:	42 30       	cpi	r20, 0x02	; 2
    9390:	10 f0       	brcs	.+4      	; 0x9396 <utoa+0xe>
    9392:	0c 94 cf 49 	jmp	0x939e	; 0x939e <__utoa_ncheck>
    9396:	fb 01       	movw	r30, r22
    9398:	10 82       	st	Z, r1
    939a:	cb 01       	movw	r24, r22
    939c:	08 95       	ret

0000939e <__utoa_ncheck>:
    939e:	bb 27       	eor	r27, r27

000093a0 <__utoa_common>:
    93a0:	fb 01       	movw	r30, r22
    93a2:	55 27       	eor	r21, r21
    93a4:	aa 27       	eor	r26, r26
    93a6:	88 0f       	add	r24, r24
    93a8:	99 1f       	adc	r25, r25
    93aa:	aa 1f       	adc	r26, r26
    93ac:	a4 17       	cp	r26, r20
    93ae:	10 f0       	brcs	.+4      	; 0x93b4 <__utoa_common+0x14>
    93b0:	a4 1b       	sub	r26, r20
    93b2:	83 95       	inc	r24
    93b4:	50 51       	subi	r21, 0x10	; 16
    93b6:	b9 f7       	brne	.-18     	; 0x93a6 <__utoa_common+0x6>
    93b8:	a0 5d       	subi	r26, 0xD0	; 208
    93ba:	aa 33       	cpi	r26, 0x3A	; 58
    93bc:	08 f0       	brcs	.+2      	; 0x93c0 <__utoa_common+0x20>
    93be:	a9 5d       	subi	r26, 0xD9	; 217
    93c0:	a1 93       	st	Z+, r26
    93c2:	00 97       	sbiw	r24, 0x00	; 0
    93c4:	79 f7       	brne	.-34     	; 0x93a4 <__utoa_common+0x4>
    93c6:	b1 11       	cpse	r27, r1
    93c8:	b1 93       	st	Z+, r27
    93ca:	11 92       	st	Z+, r1
    93cc:	cb 01       	movw	r24, r22
    93ce:	0c 94 e3 4f 	jmp	0x9fc6	; 0x9fc6 <strrev>

000093d2 <printf>:
    93d2:	cf 93       	push	r28
    93d4:	df 93       	push	r29
    93d6:	cd b7       	in	r28, 0x3d	; 61
    93d8:	de b7       	in	r29, 0x3e	; 62
    93da:	ae 01       	movw	r20, r28
    93dc:	4a 5f       	subi	r20, 0xFA	; 250
    93de:	5f 4f       	sbci	r21, 0xFF	; 255
    93e0:	fa 01       	movw	r30, r20
    93e2:	61 91       	ld	r22, Z+
    93e4:	71 91       	ld	r23, Z+
    93e6:	af 01       	movw	r20, r30
    93e8:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <__iob+0x2>
    93ec:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <__iob+0x3>
    93f0:	0e 94 fd 49 	call	0x93fa	; 0x93fa <vfprintf>
    93f4:	df 91       	pop	r29
    93f6:	cf 91       	pop	r28
    93f8:	08 95       	ret

000093fa <vfprintf>:
    93fa:	2f 92       	push	r2
    93fc:	3f 92       	push	r3
    93fe:	4f 92       	push	r4
    9400:	5f 92       	push	r5
    9402:	6f 92       	push	r6
    9404:	7f 92       	push	r7
    9406:	8f 92       	push	r8
    9408:	9f 92       	push	r9
    940a:	af 92       	push	r10
    940c:	bf 92       	push	r11
    940e:	cf 92       	push	r12
    9410:	df 92       	push	r13
    9412:	ef 92       	push	r14
    9414:	ff 92       	push	r15
    9416:	0f 93       	push	r16
    9418:	1f 93       	push	r17
    941a:	cf 93       	push	r28
    941c:	df 93       	push	r29
    941e:	cd b7       	in	r28, 0x3d	; 61
    9420:	de b7       	in	r29, 0x3e	; 62
    9422:	2b 97       	sbiw	r28, 0x0b	; 11
    9424:	0f b6       	in	r0, 0x3f	; 63
    9426:	f8 94       	cli
    9428:	de bf       	out	0x3e, r29	; 62
    942a:	0f be       	out	0x3f, r0	; 63
    942c:	cd bf       	out	0x3d, r28	; 61
    942e:	6c 01       	movw	r12, r24
    9430:	7b 01       	movw	r14, r22
    9432:	8a 01       	movw	r16, r20
    9434:	fc 01       	movw	r30, r24
    9436:	17 82       	std	Z+7, r1	; 0x07
    9438:	16 82       	std	Z+6, r1	; 0x06
    943a:	83 81       	ldd	r24, Z+3	; 0x03
    943c:	81 ff       	sbrs	r24, 1
    943e:	cc c1       	rjmp	.+920    	; 0x97d8 <vfprintf+0x3de>
    9440:	ce 01       	movw	r24, r28
    9442:	01 96       	adiw	r24, 0x01	; 1
    9444:	3c 01       	movw	r6, r24
    9446:	f6 01       	movw	r30, r12
    9448:	93 81       	ldd	r25, Z+3	; 0x03
    944a:	f7 01       	movw	r30, r14
    944c:	93 fd       	sbrc	r25, 3
    944e:	85 91       	lpm	r24, Z+
    9450:	93 ff       	sbrs	r25, 3
    9452:	81 91       	ld	r24, Z+
    9454:	7f 01       	movw	r14, r30
    9456:	88 23       	and	r24, r24
    9458:	09 f4       	brne	.+2      	; 0x945c <vfprintf+0x62>
    945a:	ba c1       	rjmp	.+884    	; 0x97d0 <vfprintf+0x3d6>
    945c:	85 32       	cpi	r24, 0x25	; 37
    945e:	39 f4       	brne	.+14     	; 0x946e <vfprintf+0x74>
    9460:	93 fd       	sbrc	r25, 3
    9462:	85 91       	lpm	r24, Z+
    9464:	93 ff       	sbrs	r25, 3
    9466:	81 91       	ld	r24, Z+
    9468:	7f 01       	movw	r14, r30
    946a:	85 32       	cpi	r24, 0x25	; 37
    946c:	29 f4       	brne	.+10     	; 0x9478 <vfprintf+0x7e>
    946e:	b6 01       	movw	r22, r12
    9470:	90 e0       	ldi	r25, 0x00	; 0
    9472:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    9476:	e7 cf       	rjmp	.-50     	; 0x9446 <vfprintf+0x4c>
    9478:	91 2c       	mov	r9, r1
    947a:	21 2c       	mov	r2, r1
    947c:	31 2c       	mov	r3, r1
    947e:	ff e1       	ldi	r31, 0x1F	; 31
    9480:	f3 15       	cp	r31, r3
    9482:	d8 f0       	brcs	.+54     	; 0x94ba <vfprintf+0xc0>
    9484:	8b 32       	cpi	r24, 0x2B	; 43
    9486:	79 f0       	breq	.+30     	; 0x94a6 <vfprintf+0xac>
    9488:	38 f4       	brcc	.+14     	; 0x9498 <vfprintf+0x9e>
    948a:	80 32       	cpi	r24, 0x20	; 32
    948c:	79 f0       	breq	.+30     	; 0x94ac <vfprintf+0xb2>
    948e:	83 32       	cpi	r24, 0x23	; 35
    9490:	a1 f4       	brne	.+40     	; 0x94ba <vfprintf+0xc0>
    9492:	23 2d       	mov	r18, r3
    9494:	20 61       	ori	r18, 0x10	; 16
    9496:	1d c0       	rjmp	.+58     	; 0x94d2 <vfprintf+0xd8>
    9498:	8d 32       	cpi	r24, 0x2D	; 45
    949a:	61 f0       	breq	.+24     	; 0x94b4 <vfprintf+0xba>
    949c:	80 33       	cpi	r24, 0x30	; 48
    949e:	69 f4       	brne	.+26     	; 0x94ba <vfprintf+0xc0>
    94a0:	23 2d       	mov	r18, r3
    94a2:	21 60       	ori	r18, 0x01	; 1
    94a4:	16 c0       	rjmp	.+44     	; 0x94d2 <vfprintf+0xd8>
    94a6:	83 2d       	mov	r24, r3
    94a8:	82 60       	ori	r24, 0x02	; 2
    94aa:	38 2e       	mov	r3, r24
    94ac:	e3 2d       	mov	r30, r3
    94ae:	e4 60       	ori	r30, 0x04	; 4
    94b0:	3e 2e       	mov	r3, r30
    94b2:	2a c0       	rjmp	.+84     	; 0x9508 <vfprintf+0x10e>
    94b4:	f3 2d       	mov	r31, r3
    94b6:	f8 60       	ori	r31, 0x08	; 8
    94b8:	1d c0       	rjmp	.+58     	; 0x94f4 <vfprintf+0xfa>
    94ba:	37 fc       	sbrc	r3, 7
    94bc:	2d c0       	rjmp	.+90     	; 0x9518 <vfprintf+0x11e>
    94be:	20 ed       	ldi	r18, 0xD0	; 208
    94c0:	28 0f       	add	r18, r24
    94c2:	2a 30       	cpi	r18, 0x0A	; 10
    94c4:	40 f0       	brcs	.+16     	; 0x94d6 <vfprintf+0xdc>
    94c6:	8e 32       	cpi	r24, 0x2E	; 46
    94c8:	b9 f4       	brne	.+46     	; 0x94f8 <vfprintf+0xfe>
    94ca:	36 fc       	sbrc	r3, 6
    94cc:	81 c1       	rjmp	.+770    	; 0x97d0 <vfprintf+0x3d6>
    94ce:	23 2d       	mov	r18, r3
    94d0:	20 64       	ori	r18, 0x40	; 64
    94d2:	32 2e       	mov	r3, r18
    94d4:	19 c0       	rjmp	.+50     	; 0x9508 <vfprintf+0x10e>
    94d6:	36 fe       	sbrs	r3, 6
    94d8:	06 c0       	rjmp	.+12     	; 0x94e6 <vfprintf+0xec>
    94da:	8a e0       	ldi	r24, 0x0A	; 10
    94dc:	98 9e       	mul	r9, r24
    94de:	20 0d       	add	r18, r0
    94e0:	11 24       	eor	r1, r1
    94e2:	92 2e       	mov	r9, r18
    94e4:	11 c0       	rjmp	.+34     	; 0x9508 <vfprintf+0x10e>
    94e6:	ea e0       	ldi	r30, 0x0A	; 10
    94e8:	2e 9e       	mul	r2, r30
    94ea:	20 0d       	add	r18, r0
    94ec:	11 24       	eor	r1, r1
    94ee:	22 2e       	mov	r2, r18
    94f0:	f3 2d       	mov	r31, r3
    94f2:	f0 62       	ori	r31, 0x20	; 32
    94f4:	3f 2e       	mov	r3, r31
    94f6:	08 c0       	rjmp	.+16     	; 0x9508 <vfprintf+0x10e>
    94f8:	8c 36       	cpi	r24, 0x6C	; 108
    94fa:	21 f4       	brne	.+8      	; 0x9504 <vfprintf+0x10a>
    94fc:	83 2d       	mov	r24, r3
    94fe:	80 68       	ori	r24, 0x80	; 128
    9500:	38 2e       	mov	r3, r24
    9502:	02 c0       	rjmp	.+4      	; 0x9508 <vfprintf+0x10e>
    9504:	88 36       	cpi	r24, 0x68	; 104
    9506:	41 f4       	brne	.+16     	; 0x9518 <vfprintf+0x11e>
    9508:	f7 01       	movw	r30, r14
    950a:	93 fd       	sbrc	r25, 3
    950c:	85 91       	lpm	r24, Z+
    950e:	93 ff       	sbrs	r25, 3
    9510:	81 91       	ld	r24, Z+
    9512:	7f 01       	movw	r14, r30
    9514:	81 11       	cpse	r24, r1
    9516:	b3 cf       	rjmp	.-154    	; 0x947e <vfprintf+0x84>
    9518:	98 2f       	mov	r25, r24
    951a:	9f 7d       	andi	r25, 0xDF	; 223
    951c:	95 54       	subi	r25, 0x45	; 69
    951e:	93 30       	cpi	r25, 0x03	; 3
    9520:	28 f4       	brcc	.+10     	; 0x952c <vfprintf+0x132>
    9522:	0c 5f       	subi	r16, 0xFC	; 252
    9524:	1f 4f       	sbci	r17, 0xFF	; 255
    9526:	9f e3       	ldi	r25, 0x3F	; 63
    9528:	99 83       	std	Y+1, r25	; 0x01
    952a:	0d c0       	rjmp	.+26     	; 0x9546 <vfprintf+0x14c>
    952c:	83 36       	cpi	r24, 0x63	; 99
    952e:	31 f0       	breq	.+12     	; 0x953c <vfprintf+0x142>
    9530:	83 37       	cpi	r24, 0x73	; 115
    9532:	71 f0       	breq	.+28     	; 0x9550 <vfprintf+0x156>
    9534:	83 35       	cpi	r24, 0x53	; 83
    9536:	09 f0       	breq	.+2      	; 0x953a <vfprintf+0x140>
    9538:	59 c0       	rjmp	.+178    	; 0x95ec <vfprintf+0x1f2>
    953a:	21 c0       	rjmp	.+66     	; 0x957e <vfprintf+0x184>
    953c:	f8 01       	movw	r30, r16
    953e:	80 81       	ld	r24, Z
    9540:	89 83       	std	Y+1, r24	; 0x01
    9542:	0e 5f       	subi	r16, 0xFE	; 254
    9544:	1f 4f       	sbci	r17, 0xFF	; 255
    9546:	88 24       	eor	r8, r8
    9548:	83 94       	inc	r8
    954a:	91 2c       	mov	r9, r1
    954c:	53 01       	movw	r10, r6
    954e:	13 c0       	rjmp	.+38     	; 0x9576 <vfprintf+0x17c>
    9550:	28 01       	movw	r4, r16
    9552:	f2 e0       	ldi	r31, 0x02	; 2
    9554:	4f 0e       	add	r4, r31
    9556:	51 1c       	adc	r5, r1
    9558:	f8 01       	movw	r30, r16
    955a:	a0 80       	ld	r10, Z
    955c:	b1 80       	ldd	r11, Z+1	; 0x01
    955e:	36 fe       	sbrs	r3, 6
    9560:	03 c0       	rjmp	.+6      	; 0x9568 <vfprintf+0x16e>
    9562:	69 2d       	mov	r22, r9
    9564:	70 e0       	ldi	r23, 0x00	; 0
    9566:	02 c0       	rjmp	.+4      	; 0x956c <vfprintf+0x172>
    9568:	6f ef       	ldi	r22, 0xFF	; 255
    956a:	7f ef       	ldi	r23, 0xFF	; 255
    956c:	c5 01       	movw	r24, r10
    956e:	0e 94 d8 4f 	call	0x9fb0	; 0x9fb0 <strnlen>
    9572:	4c 01       	movw	r8, r24
    9574:	82 01       	movw	r16, r4
    9576:	f3 2d       	mov	r31, r3
    9578:	ff 77       	andi	r31, 0x7F	; 127
    957a:	3f 2e       	mov	r3, r31
    957c:	16 c0       	rjmp	.+44     	; 0x95aa <vfprintf+0x1b0>
    957e:	28 01       	movw	r4, r16
    9580:	22 e0       	ldi	r18, 0x02	; 2
    9582:	42 0e       	add	r4, r18
    9584:	51 1c       	adc	r5, r1
    9586:	f8 01       	movw	r30, r16
    9588:	a0 80       	ld	r10, Z
    958a:	b1 80       	ldd	r11, Z+1	; 0x01
    958c:	36 fe       	sbrs	r3, 6
    958e:	03 c0       	rjmp	.+6      	; 0x9596 <vfprintf+0x19c>
    9590:	69 2d       	mov	r22, r9
    9592:	70 e0       	ldi	r23, 0x00	; 0
    9594:	02 c0       	rjmp	.+4      	; 0x959a <vfprintf+0x1a0>
    9596:	6f ef       	ldi	r22, 0xFF	; 255
    9598:	7f ef       	ldi	r23, 0xFF	; 255
    959a:	c5 01       	movw	r24, r10
    959c:	0e 94 cd 4f 	call	0x9f9a	; 0x9f9a <strnlen_P>
    95a0:	4c 01       	movw	r8, r24
    95a2:	f3 2d       	mov	r31, r3
    95a4:	f0 68       	ori	r31, 0x80	; 128
    95a6:	3f 2e       	mov	r3, r31
    95a8:	82 01       	movw	r16, r4
    95aa:	33 fc       	sbrc	r3, 3
    95ac:	1b c0       	rjmp	.+54     	; 0x95e4 <vfprintf+0x1ea>
    95ae:	82 2d       	mov	r24, r2
    95b0:	90 e0       	ldi	r25, 0x00	; 0
    95b2:	88 16       	cp	r8, r24
    95b4:	99 06       	cpc	r9, r25
    95b6:	b0 f4       	brcc	.+44     	; 0x95e4 <vfprintf+0x1ea>
    95b8:	b6 01       	movw	r22, r12
    95ba:	80 e2       	ldi	r24, 0x20	; 32
    95bc:	90 e0       	ldi	r25, 0x00	; 0
    95be:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    95c2:	2a 94       	dec	r2
    95c4:	f4 cf       	rjmp	.-24     	; 0x95ae <vfprintf+0x1b4>
    95c6:	f5 01       	movw	r30, r10
    95c8:	37 fc       	sbrc	r3, 7
    95ca:	85 91       	lpm	r24, Z+
    95cc:	37 fe       	sbrs	r3, 7
    95ce:	81 91       	ld	r24, Z+
    95d0:	5f 01       	movw	r10, r30
    95d2:	b6 01       	movw	r22, r12
    95d4:	90 e0       	ldi	r25, 0x00	; 0
    95d6:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    95da:	21 10       	cpse	r2, r1
    95dc:	2a 94       	dec	r2
    95de:	21 e0       	ldi	r18, 0x01	; 1
    95e0:	82 1a       	sub	r8, r18
    95e2:	91 08       	sbc	r9, r1
    95e4:	81 14       	cp	r8, r1
    95e6:	91 04       	cpc	r9, r1
    95e8:	71 f7       	brne	.-36     	; 0x95c6 <vfprintf+0x1cc>
    95ea:	e8 c0       	rjmp	.+464    	; 0x97bc <vfprintf+0x3c2>
    95ec:	84 36       	cpi	r24, 0x64	; 100
    95ee:	11 f0       	breq	.+4      	; 0x95f4 <vfprintf+0x1fa>
    95f0:	89 36       	cpi	r24, 0x69	; 105
    95f2:	41 f5       	brne	.+80     	; 0x9644 <vfprintf+0x24a>
    95f4:	f8 01       	movw	r30, r16
    95f6:	37 fe       	sbrs	r3, 7
    95f8:	07 c0       	rjmp	.+14     	; 0x9608 <vfprintf+0x20e>
    95fa:	60 81       	ld	r22, Z
    95fc:	71 81       	ldd	r23, Z+1	; 0x01
    95fe:	82 81       	ldd	r24, Z+2	; 0x02
    9600:	93 81       	ldd	r25, Z+3	; 0x03
    9602:	0c 5f       	subi	r16, 0xFC	; 252
    9604:	1f 4f       	sbci	r17, 0xFF	; 255
    9606:	08 c0       	rjmp	.+16     	; 0x9618 <vfprintf+0x21e>
    9608:	60 81       	ld	r22, Z
    960a:	71 81       	ldd	r23, Z+1	; 0x01
    960c:	07 2e       	mov	r0, r23
    960e:	00 0c       	add	r0, r0
    9610:	88 0b       	sbc	r24, r24
    9612:	99 0b       	sbc	r25, r25
    9614:	0e 5f       	subi	r16, 0xFE	; 254
    9616:	1f 4f       	sbci	r17, 0xFF	; 255
    9618:	f3 2d       	mov	r31, r3
    961a:	ff 76       	andi	r31, 0x6F	; 111
    961c:	3f 2e       	mov	r3, r31
    961e:	97 ff       	sbrs	r25, 7
    9620:	09 c0       	rjmp	.+18     	; 0x9634 <vfprintf+0x23a>
    9622:	90 95       	com	r25
    9624:	80 95       	com	r24
    9626:	70 95       	com	r23
    9628:	61 95       	neg	r22
    962a:	7f 4f       	sbci	r23, 0xFF	; 255
    962c:	8f 4f       	sbci	r24, 0xFF	; 255
    962e:	9f 4f       	sbci	r25, 0xFF	; 255
    9630:	f0 68       	ori	r31, 0x80	; 128
    9632:	3f 2e       	mov	r3, r31
    9634:	2a e0       	ldi	r18, 0x0A	; 10
    9636:	30 e0       	ldi	r19, 0x00	; 0
    9638:	a3 01       	movw	r20, r6
    963a:	0e 94 2f 50 	call	0xa05e	; 0xa05e <__ultoa_invert>
    963e:	88 2e       	mov	r8, r24
    9640:	86 18       	sub	r8, r6
    9642:	45 c0       	rjmp	.+138    	; 0x96ce <vfprintf+0x2d4>
    9644:	85 37       	cpi	r24, 0x75	; 117
    9646:	31 f4       	brne	.+12     	; 0x9654 <vfprintf+0x25a>
    9648:	23 2d       	mov	r18, r3
    964a:	2f 7e       	andi	r18, 0xEF	; 239
    964c:	b2 2e       	mov	r11, r18
    964e:	2a e0       	ldi	r18, 0x0A	; 10
    9650:	30 e0       	ldi	r19, 0x00	; 0
    9652:	25 c0       	rjmp	.+74     	; 0x969e <vfprintf+0x2a4>
    9654:	93 2d       	mov	r25, r3
    9656:	99 7f       	andi	r25, 0xF9	; 249
    9658:	b9 2e       	mov	r11, r25
    965a:	8f 36       	cpi	r24, 0x6F	; 111
    965c:	c1 f0       	breq	.+48     	; 0x968e <vfprintf+0x294>
    965e:	18 f4       	brcc	.+6      	; 0x9666 <vfprintf+0x26c>
    9660:	88 35       	cpi	r24, 0x58	; 88
    9662:	79 f0       	breq	.+30     	; 0x9682 <vfprintf+0x288>
    9664:	b5 c0       	rjmp	.+362    	; 0x97d0 <vfprintf+0x3d6>
    9666:	80 37       	cpi	r24, 0x70	; 112
    9668:	19 f0       	breq	.+6      	; 0x9670 <vfprintf+0x276>
    966a:	88 37       	cpi	r24, 0x78	; 120
    966c:	21 f0       	breq	.+8      	; 0x9676 <vfprintf+0x27c>
    966e:	b0 c0       	rjmp	.+352    	; 0x97d0 <vfprintf+0x3d6>
    9670:	e9 2f       	mov	r30, r25
    9672:	e0 61       	ori	r30, 0x10	; 16
    9674:	be 2e       	mov	r11, r30
    9676:	b4 fe       	sbrs	r11, 4
    9678:	0d c0       	rjmp	.+26     	; 0x9694 <vfprintf+0x29a>
    967a:	fb 2d       	mov	r31, r11
    967c:	f4 60       	ori	r31, 0x04	; 4
    967e:	bf 2e       	mov	r11, r31
    9680:	09 c0       	rjmp	.+18     	; 0x9694 <vfprintf+0x29a>
    9682:	34 fe       	sbrs	r3, 4
    9684:	0a c0       	rjmp	.+20     	; 0x969a <vfprintf+0x2a0>
    9686:	29 2f       	mov	r18, r25
    9688:	26 60       	ori	r18, 0x06	; 6
    968a:	b2 2e       	mov	r11, r18
    968c:	06 c0       	rjmp	.+12     	; 0x969a <vfprintf+0x2a0>
    968e:	28 e0       	ldi	r18, 0x08	; 8
    9690:	30 e0       	ldi	r19, 0x00	; 0
    9692:	05 c0       	rjmp	.+10     	; 0x969e <vfprintf+0x2a4>
    9694:	20 e1       	ldi	r18, 0x10	; 16
    9696:	30 e0       	ldi	r19, 0x00	; 0
    9698:	02 c0       	rjmp	.+4      	; 0x969e <vfprintf+0x2a4>
    969a:	20 e1       	ldi	r18, 0x10	; 16
    969c:	32 e0       	ldi	r19, 0x02	; 2
    969e:	f8 01       	movw	r30, r16
    96a0:	b7 fe       	sbrs	r11, 7
    96a2:	07 c0       	rjmp	.+14     	; 0x96b2 <vfprintf+0x2b8>
    96a4:	60 81       	ld	r22, Z
    96a6:	71 81       	ldd	r23, Z+1	; 0x01
    96a8:	82 81       	ldd	r24, Z+2	; 0x02
    96aa:	93 81       	ldd	r25, Z+3	; 0x03
    96ac:	0c 5f       	subi	r16, 0xFC	; 252
    96ae:	1f 4f       	sbci	r17, 0xFF	; 255
    96b0:	06 c0       	rjmp	.+12     	; 0x96be <vfprintf+0x2c4>
    96b2:	60 81       	ld	r22, Z
    96b4:	71 81       	ldd	r23, Z+1	; 0x01
    96b6:	80 e0       	ldi	r24, 0x00	; 0
    96b8:	90 e0       	ldi	r25, 0x00	; 0
    96ba:	0e 5f       	subi	r16, 0xFE	; 254
    96bc:	1f 4f       	sbci	r17, 0xFF	; 255
    96be:	a3 01       	movw	r20, r6
    96c0:	0e 94 2f 50 	call	0xa05e	; 0xa05e <__ultoa_invert>
    96c4:	88 2e       	mov	r8, r24
    96c6:	86 18       	sub	r8, r6
    96c8:	fb 2d       	mov	r31, r11
    96ca:	ff 77       	andi	r31, 0x7F	; 127
    96cc:	3f 2e       	mov	r3, r31
    96ce:	36 fe       	sbrs	r3, 6
    96d0:	0d c0       	rjmp	.+26     	; 0x96ec <vfprintf+0x2f2>
    96d2:	23 2d       	mov	r18, r3
    96d4:	2e 7f       	andi	r18, 0xFE	; 254
    96d6:	a2 2e       	mov	r10, r18
    96d8:	89 14       	cp	r8, r9
    96da:	58 f4       	brcc	.+22     	; 0x96f2 <vfprintf+0x2f8>
    96dc:	34 fe       	sbrs	r3, 4
    96de:	0b c0       	rjmp	.+22     	; 0x96f6 <vfprintf+0x2fc>
    96e0:	32 fc       	sbrc	r3, 2
    96e2:	09 c0       	rjmp	.+18     	; 0x96f6 <vfprintf+0x2fc>
    96e4:	83 2d       	mov	r24, r3
    96e6:	8e 7e       	andi	r24, 0xEE	; 238
    96e8:	a8 2e       	mov	r10, r24
    96ea:	05 c0       	rjmp	.+10     	; 0x96f6 <vfprintf+0x2fc>
    96ec:	b8 2c       	mov	r11, r8
    96ee:	a3 2c       	mov	r10, r3
    96f0:	03 c0       	rjmp	.+6      	; 0x96f8 <vfprintf+0x2fe>
    96f2:	b8 2c       	mov	r11, r8
    96f4:	01 c0       	rjmp	.+2      	; 0x96f8 <vfprintf+0x2fe>
    96f6:	b9 2c       	mov	r11, r9
    96f8:	a4 fe       	sbrs	r10, 4
    96fa:	0f c0       	rjmp	.+30     	; 0x971a <vfprintf+0x320>
    96fc:	fe 01       	movw	r30, r28
    96fe:	e8 0d       	add	r30, r8
    9700:	f1 1d       	adc	r31, r1
    9702:	80 81       	ld	r24, Z
    9704:	80 33       	cpi	r24, 0x30	; 48
    9706:	21 f4       	brne	.+8      	; 0x9710 <vfprintf+0x316>
    9708:	9a 2d       	mov	r25, r10
    970a:	99 7e       	andi	r25, 0xE9	; 233
    970c:	a9 2e       	mov	r10, r25
    970e:	09 c0       	rjmp	.+18     	; 0x9722 <vfprintf+0x328>
    9710:	a2 fe       	sbrs	r10, 2
    9712:	06 c0       	rjmp	.+12     	; 0x9720 <vfprintf+0x326>
    9714:	b3 94       	inc	r11
    9716:	b3 94       	inc	r11
    9718:	04 c0       	rjmp	.+8      	; 0x9722 <vfprintf+0x328>
    971a:	8a 2d       	mov	r24, r10
    971c:	86 78       	andi	r24, 0x86	; 134
    971e:	09 f0       	breq	.+2      	; 0x9722 <vfprintf+0x328>
    9720:	b3 94       	inc	r11
    9722:	a3 fc       	sbrc	r10, 3
    9724:	11 c0       	rjmp	.+34     	; 0x9748 <vfprintf+0x34e>
    9726:	a0 fe       	sbrs	r10, 0
    9728:	06 c0       	rjmp	.+12     	; 0x9736 <vfprintf+0x33c>
    972a:	b2 14       	cp	r11, r2
    972c:	88 f4       	brcc	.+34     	; 0x9750 <vfprintf+0x356>
    972e:	28 0c       	add	r2, r8
    9730:	92 2c       	mov	r9, r2
    9732:	9b 18       	sub	r9, r11
    9734:	0e c0       	rjmp	.+28     	; 0x9752 <vfprintf+0x358>
    9736:	b2 14       	cp	r11, r2
    9738:	60 f4       	brcc	.+24     	; 0x9752 <vfprintf+0x358>
    973a:	b6 01       	movw	r22, r12
    973c:	80 e2       	ldi	r24, 0x20	; 32
    973e:	90 e0       	ldi	r25, 0x00	; 0
    9740:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    9744:	b3 94       	inc	r11
    9746:	f7 cf       	rjmp	.-18     	; 0x9736 <vfprintf+0x33c>
    9748:	b2 14       	cp	r11, r2
    974a:	18 f4       	brcc	.+6      	; 0x9752 <vfprintf+0x358>
    974c:	2b 18       	sub	r2, r11
    974e:	02 c0       	rjmp	.+4      	; 0x9754 <vfprintf+0x35a>
    9750:	98 2c       	mov	r9, r8
    9752:	21 2c       	mov	r2, r1
    9754:	a4 fe       	sbrs	r10, 4
    9756:	10 c0       	rjmp	.+32     	; 0x9778 <vfprintf+0x37e>
    9758:	b6 01       	movw	r22, r12
    975a:	80 e3       	ldi	r24, 0x30	; 48
    975c:	90 e0       	ldi	r25, 0x00	; 0
    975e:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    9762:	a2 fe       	sbrs	r10, 2
    9764:	17 c0       	rjmp	.+46     	; 0x9794 <vfprintf+0x39a>
    9766:	a1 fc       	sbrc	r10, 1
    9768:	03 c0       	rjmp	.+6      	; 0x9770 <vfprintf+0x376>
    976a:	88 e7       	ldi	r24, 0x78	; 120
    976c:	90 e0       	ldi	r25, 0x00	; 0
    976e:	02 c0       	rjmp	.+4      	; 0x9774 <vfprintf+0x37a>
    9770:	88 e5       	ldi	r24, 0x58	; 88
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	b6 01       	movw	r22, r12
    9776:	0c c0       	rjmp	.+24     	; 0x9790 <vfprintf+0x396>
    9778:	8a 2d       	mov	r24, r10
    977a:	86 78       	andi	r24, 0x86	; 134
    977c:	59 f0       	breq	.+22     	; 0x9794 <vfprintf+0x39a>
    977e:	a1 fe       	sbrs	r10, 1
    9780:	02 c0       	rjmp	.+4      	; 0x9786 <vfprintf+0x38c>
    9782:	8b e2       	ldi	r24, 0x2B	; 43
    9784:	01 c0       	rjmp	.+2      	; 0x9788 <vfprintf+0x38e>
    9786:	80 e2       	ldi	r24, 0x20	; 32
    9788:	a7 fc       	sbrc	r10, 7
    978a:	8d e2       	ldi	r24, 0x2D	; 45
    978c:	b6 01       	movw	r22, r12
    978e:	90 e0       	ldi	r25, 0x00	; 0
    9790:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    9794:	89 14       	cp	r8, r9
    9796:	38 f4       	brcc	.+14     	; 0x97a6 <vfprintf+0x3ac>
    9798:	b6 01       	movw	r22, r12
    979a:	80 e3       	ldi	r24, 0x30	; 48
    979c:	90 e0       	ldi	r25, 0x00	; 0
    979e:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    97a2:	9a 94       	dec	r9
    97a4:	f7 cf       	rjmp	.-18     	; 0x9794 <vfprintf+0x39a>
    97a6:	8a 94       	dec	r8
    97a8:	f3 01       	movw	r30, r6
    97aa:	e8 0d       	add	r30, r8
    97ac:	f1 1d       	adc	r31, r1
    97ae:	80 81       	ld	r24, Z
    97b0:	b6 01       	movw	r22, r12
    97b2:	90 e0       	ldi	r25, 0x00	; 0
    97b4:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    97b8:	81 10       	cpse	r8, r1
    97ba:	f5 cf       	rjmp	.-22     	; 0x97a6 <vfprintf+0x3ac>
    97bc:	22 20       	and	r2, r2
    97be:	09 f4       	brne	.+2      	; 0x97c2 <vfprintf+0x3c8>
    97c0:	42 ce       	rjmp	.-892    	; 0x9446 <vfprintf+0x4c>
    97c2:	b6 01       	movw	r22, r12
    97c4:	80 e2       	ldi	r24, 0x20	; 32
    97c6:	90 e0       	ldi	r25, 0x00	; 0
    97c8:	0e 94 f3 4f 	call	0x9fe6	; 0x9fe6 <fputc>
    97cc:	2a 94       	dec	r2
    97ce:	f6 cf       	rjmp	.-20     	; 0x97bc <vfprintf+0x3c2>
    97d0:	f6 01       	movw	r30, r12
    97d2:	86 81       	ldd	r24, Z+6	; 0x06
    97d4:	97 81       	ldd	r25, Z+7	; 0x07
    97d6:	02 c0       	rjmp	.+4      	; 0x97dc <vfprintf+0x3e2>
    97d8:	8f ef       	ldi	r24, 0xFF	; 255
    97da:	9f ef       	ldi	r25, 0xFF	; 255
    97dc:	2b 96       	adiw	r28, 0x0b	; 11
    97de:	0f b6       	in	r0, 0x3f	; 63
    97e0:	f8 94       	cli
    97e2:	de bf       	out	0x3e, r29	; 62
    97e4:	0f be       	out	0x3f, r0	; 63
    97e6:	cd bf       	out	0x3d, r28	; 61
    97e8:	df 91       	pop	r29
    97ea:	cf 91       	pop	r28
    97ec:	1f 91       	pop	r17
    97ee:	0f 91       	pop	r16
    97f0:	ff 90       	pop	r15
    97f2:	ef 90       	pop	r14
    97f4:	df 90       	pop	r13
    97f6:	cf 90       	pop	r12
    97f8:	bf 90       	pop	r11
    97fa:	af 90       	pop	r10
    97fc:	9f 90       	pop	r9
    97fe:	8f 90       	pop	r8
    9800:	7f 90       	pop	r7
    9802:	6f 90       	pop	r6
    9804:	5f 90       	pop	r5
    9806:	4f 90       	pop	r4
    9808:	3f 90       	pop	r3
    980a:	2f 90       	pop	r2
    980c:	08 95       	ret

0000980e <dtoa_prf>:
    980e:	8f 92       	push	r8
    9810:	9f 92       	push	r9
    9812:	af 92       	push	r10
    9814:	bf 92       	push	r11
    9816:	cf 92       	push	r12
    9818:	df 92       	push	r13
    981a:	ef 92       	push	r14
    981c:	ff 92       	push	r15
    981e:	0f 93       	push	r16
    9820:	1f 93       	push	r17
    9822:	cf 93       	push	r28
    9824:	df 93       	push	r29
    9826:	cd b7       	in	r28, 0x3d	; 61
    9828:	de b7       	in	r29, 0x3e	; 62
    982a:	29 97       	sbiw	r28, 0x09	; 9
    982c:	0f b6       	in	r0, 0x3f	; 63
    982e:	f8 94       	cli
    9830:	de bf       	out	0x3e, r29	; 62
    9832:	0f be       	out	0x3f, r0	; 63
    9834:	cd bf       	out	0x3d, r28	; 61
    9836:	6a 01       	movw	r12, r20
    9838:	12 2f       	mov	r17, r18
    983a:	b0 2e       	mov	r11, r16
    983c:	2b e3       	ldi	r18, 0x3B	; 59
    983e:	20 17       	cp	r18, r16
    9840:	20 f0       	brcs	.+8      	; 0x984a <dtoa_prf+0x3c>
    9842:	ff 24       	eor	r15, r15
    9844:	f3 94       	inc	r15
    9846:	f0 0e       	add	r15, r16
    9848:	02 c0       	rjmp	.+4      	; 0x984e <dtoa_prf+0x40>
    984a:	2c e3       	ldi	r18, 0x3C	; 60
    984c:	f2 2e       	mov	r15, r18
    984e:	0f 2d       	mov	r16, r15
    9850:	27 e0       	ldi	r18, 0x07	; 7
    9852:	ae 01       	movw	r20, r28
    9854:	4f 5f       	subi	r20, 0xFF	; 255
    9856:	5f 4f       	sbci	r21, 0xFF	; 255
    9858:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__ftoa_engine>
    985c:	bc 01       	movw	r22, r24
    985e:	49 81       	ldd	r20, Y+1	; 0x01
    9860:	84 2f       	mov	r24, r20
    9862:	89 70       	andi	r24, 0x09	; 9
    9864:	81 30       	cpi	r24, 0x01	; 1
    9866:	31 f0       	breq	.+12     	; 0x9874 <dtoa_prf+0x66>
    9868:	e1 fc       	sbrc	r14, 1
    986a:	06 c0       	rjmp	.+12     	; 0x9878 <dtoa_prf+0x6a>
    986c:	e0 fe       	sbrs	r14, 0
    986e:	06 c0       	rjmp	.+12     	; 0x987c <dtoa_prf+0x6e>
    9870:	90 e2       	ldi	r25, 0x20	; 32
    9872:	05 c0       	rjmp	.+10     	; 0x987e <dtoa_prf+0x70>
    9874:	9d e2       	ldi	r25, 0x2D	; 45
    9876:	03 c0       	rjmp	.+6      	; 0x987e <dtoa_prf+0x70>
    9878:	9b e2       	ldi	r25, 0x2B	; 43
    987a:	01 c0       	rjmp	.+2      	; 0x987e <dtoa_prf+0x70>
    987c:	90 e0       	ldi	r25, 0x00	; 0
    987e:	5e 2d       	mov	r21, r14
    9880:	50 71       	andi	r21, 0x10	; 16
    9882:	43 ff       	sbrs	r20, 3
    9884:	3c c0       	rjmp	.+120    	; 0x98fe <dtoa_prf+0xf0>
    9886:	91 11       	cpse	r25, r1
    9888:	02 c0       	rjmp	.+4      	; 0x988e <dtoa_prf+0x80>
    988a:	83 e0       	ldi	r24, 0x03	; 3
    988c:	01 c0       	rjmp	.+2      	; 0x9890 <dtoa_prf+0x82>
    988e:	84 e0       	ldi	r24, 0x04	; 4
    9890:	81 17       	cp	r24, r17
    9892:	18 f4       	brcc	.+6      	; 0x989a <dtoa_prf+0x8c>
    9894:	21 2f       	mov	r18, r17
    9896:	28 1b       	sub	r18, r24
    9898:	01 c0       	rjmp	.+2      	; 0x989c <dtoa_prf+0x8e>
    989a:	20 e0       	ldi	r18, 0x00	; 0
    989c:	51 11       	cpse	r21, r1
    989e:	0b c0       	rjmp	.+22     	; 0x98b6 <dtoa_prf+0xa8>
    98a0:	f6 01       	movw	r30, r12
    98a2:	82 2f       	mov	r24, r18
    98a4:	30 e2       	ldi	r19, 0x20	; 32
    98a6:	88 23       	and	r24, r24
    98a8:	19 f0       	breq	.+6      	; 0x98b0 <dtoa_prf+0xa2>
    98aa:	31 93       	st	Z+, r19
    98ac:	81 50       	subi	r24, 0x01	; 1
    98ae:	fb cf       	rjmp	.-10     	; 0x98a6 <dtoa_prf+0x98>
    98b0:	c2 0e       	add	r12, r18
    98b2:	d1 1c       	adc	r13, r1
    98b4:	20 e0       	ldi	r18, 0x00	; 0
    98b6:	99 23       	and	r25, r25
    98b8:	29 f0       	breq	.+10     	; 0x98c4 <dtoa_prf+0xb6>
    98ba:	d6 01       	movw	r26, r12
    98bc:	9c 93       	st	X, r25
    98be:	f6 01       	movw	r30, r12
    98c0:	31 96       	adiw	r30, 0x01	; 1
    98c2:	6f 01       	movw	r12, r30
    98c4:	c6 01       	movw	r24, r12
    98c6:	03 96       	adiw	r24, 0x03	; 3
    98c8:	e2 fe       	sbrs	r14, 2
    98ca:	0a c0       	rjmp	.+20     	; 0x98e0 <dtoa_prf+0xd2>
    98cc:	3e e4       	ldi	r19, 0x4E	; 78
    98ce:	d6 01       	movw	r26, r12
    98d0:	3c 93       	st	X, r19
    98d2:	41 e4       	ldi	r20, 0x41	; 65
    98d4:	11 96       	adiw	r26, 0x01	; 1
    98d6:	4c 93       	st	X, r20
    98d8:	11 97       	sbiw	r26, 0x01	; 1
    98da:	12 96       	adiw	r26, 0x02	; 2
    98dc:	3c 93       	st	X, r19
    98de:	06 c0       	rjmp	.+12     	; 0x98ec <dtoa_prf+0xde>
    98e0:	3e e6       	ldi	r19, 0x6E	; 110
    98e2:	f6 01       	movw	r30, r12
    98e4:	30 83       	st	Z, r19
    98e6:	41 e6       	ldi	r20, 0x61	; 97
    98e8:	41 83       	std	Z+1, r20	; 0x01
    98ea:	32 83       	std	Z+2, r19	; 0x02
    98ec:	fc 01       	movw	r30, r24
    98ee:	32 2f       	mov	r19, r18
    98f0:	40 e2       	ldi	r20, 0x20	; 32
    98f2:	33 23       	and	r19, r19
    98f4:	09 f4       	brne	.+2      	; 0x98f8 <dtoa_prf+0xea>
    98f6:	42 c0       	rjmp	.+132    	; 0x997c <dtoa_prf+0x16e>
    98f8:	41 93       	st	Z+, r20
    98fa:	31 50       	subi	r19, 0x01	; 1
    98fc:	fa cf       	rjmp	.-12     	; 0x98f2 <dtoa_prf+0xe4>
    98fe:	42 ff       	sbrs	r20, 2
    9900:	44 c0       	rjmp	.+136    	; 0x998a <dtoa_prf+0x17c>
    9902:	91 11       	cpse	r25, r1
    9904:	02 c0       	rjmp	.+4      	; 0x990a <dtoa_prf+0xfc>
    9906:	83 e0       	ldi	r24, 0x03	; 3
    9908:	01 c0       	rjmp	.+2      	; 0x990c <dtoa_prf+0xfe>
    990a:	84 e0       	ldi	r24, 0x04	; 4
    990c:	81 17       	cp	r24, r17
    990e:	18 f4       	brcc	.+6      	; 0x9916 <dtoa_prf+0x108>
    9910:	21 2f       	mov	r18, r17
    9912:	28 1b       	sub	r18, r24
    9914:	01 c0       	rjmp	.+2      	; 0x9918 <dtoa_prf+0x10a>
    9916:	20 e0       	ldi	r18, 0x00	; 0
    9918:	51 11       	cpse	r21, r1
    991a:	0b c0       	rjmp	.+22     	; 0x9932 <dtoa_prf+0x124>
    991c:	f6 01       	movw	r30, r12
    991e:	82 2f       	mov	r24, r18
    9920:	30 e2       	ldi	r19, 0x20	; 32
    9922:	88 23       	and	r24, r24
    9924:	19 f0       	breq	.+6      	; 0x992c <dtoa_prf+0x11e>
    9926:	31 93       	st	Z+, r19
    9928:	81 50       	subi	r24, 0x01	; 1
    992a:	fb cf       	rjmp	.-10     	; 0x9922 <dtoa_prf+0x114>
    992c:	c2 0e       	add	r12, r18
    992e:	d1 1c       	adc	r13, r1
    9930:	20 e0       	ldi	r18, 0x00	; 0
    9932:	99 23       	and	r25, r25
    9934:	29 f0       	breq	.+10     	; 0x9940 <dtoa_prf+0x132>
    9936:	d6 01       	movw	r26, r12
    9938:	9c 93       	st	X, r25
    993a:	f6 01       	movw	r30, r12
    993c:	31 96       	adiw	r30, 0x01	; 1
    993e:	6f 01       	movw	r12, r30
    9940:	c6 01       	movw	r24, r12
    9942:	03 96       	adiw	r24, 0x03	; 3
    9944:	e2 fe       	sbrs	r14, 2
    9946:	0b c0       	rjmp	.+22     	; 0x995e <dtoa_prf+0x150>
    9948:	39 e4       	ldi	r19, 0x49	; 73
    994a:	d6 01       	movw	r26, r12
    994c:	3c 93       	st	X, r19
    994e:	3e e4       	ldi	r19, 0x4E	; 78
    9950:	11 96       	adiw	r26, 0x01	; 1
    9952:	3c 93       	st	X, r19
    9954:	11 97       	sbiw	r26, 0x01	; 1
    9956:	36 e4       	ldi	r19, 0x46	; 70
    9958:	12 96       	adiw	r26, 0x02	; 2
    995a:	3c 93       	st	X, r19
    995c:	07 c0       	rjmp	.+14     	; 0x996c <dtoa_prf+0x15e>
    995e:	39 e6       	ldi	r19, 0x69	; 105
    9960:	f6 01       	movw	r30, r12
    9962:	30 83       	st	Z, r19
    9964:	3e e6       	ldi	r19, 0x6E	; 110
    9966:	31 83       	std	Z+1, r19	; 0x01
    9968:	36 e6       	ldi	r19, 0x66	; 102
    996a:	32 83       	std	Z+2, r19	; 0x02
    996c:	fc 01       	movw	r30, r24
    996e:	32 2f       	mov	r19, r18
    9970:	40 e2       	ldi	r20, 0x20	; 32
    9972:	33 23       	and	r19, r19
    9974:	19 f0       	breq	.+6      	; 0x997c <dtoa_prf+0x16e>
    9976:	41 93       	st	Z+, r20
    9978:	31 50       	subi	r19, 0x01	; 1
    997a:	fb cf       	rjmp	.-10     	; 0x9972 <dtoa_prf+0x164>
    997c:	fc 01       	movw	r30, r24
    997e:	e2 0f       	add	r30, r18
    9980:	f1 1d       	adc	r31, r1
    9982:	10 82       	st	Z, r1
    9984:	8e ef       	ldi	r24, 0xFE	; 254
    9986:	9f ef       	ldi	r25, 0xFF	; 255
    9988:	a6 c0       	rjmp	.+332    	; 0x9ad6 <dtoa_prf+0x2c8>
    998a:	21 e0       	ldi	r18, 0x01	; 1
    998c:	30 e0       	ldi	r19, 0x00	; 0
    998e:	91 11       	cpse	r25, r1
    9990:	02 c0       	rjmp	.+4      	; 0x9996 <dtoa_prf+0x188>
    9992:	20 e0       	ldi	r18, 0x00	; 0
    9994:	30 e0       	ldi	r19, 0x00	; 0
    9996:	16 16       	cp	r1, r22
    9998:	17 06       	cpc	r1, r23
    999a:	1c f4       	brge	.+6      	; 0x99a2 <dtoa_prf+0x194>
    999c:	fb 01       	movw	r30, r22
    999e:	31 96       	adiw	r30, 0x01	; 1
    99a0:	02 c0       	rjmp	.+4      	; 0x99a6 <dtoa_prf+0x198>
    99a2:	e1 e0       	ldi	r30, 0x01	; 1
    99a4:	f0 e0       	ldi	r31, 0x00	; 0
    99a6:	2e 0f       	add	r18, r30
    99a8:	3f 1f       	adc	r19, r31
    99aa:	bb 20       	and	r11, r11
    99ac:	21 f0       	breq	.+8      	; 0x99b6 <dtoa_prf+0x1a8>
    99ae:	eb 2d       	mov	r30, r11
    99b0:	f0 e0       	ldi	r31, 0x00	; 0
    99b2:	31 96       	adiw	r30, 0x01	; 1
    99b4:	02 c0       	rjmp	.+4      	; 0x99ba <dtoa_prf+0x1ac>
    99b6:	e0 e0       	ldi	r30, 0x00	; 0
    99b8:	f0 e0       	ldi	r31, 0x00	; 0
    99ba:	2e 0f       	add	r18, r30
    99bc:	3f 1f       	adc	r19, r31
    99be:	e1 2f       	mov	r30, r17
    99c0:	f0 e0       	ldi	r31, 0x00	; 0
    99c2:	2e 17       	cp	r18, r30
    99c4:	3f 07       	cpc	r19, r31
    99c6:	1c f4       	brge	.+6      	; 0x99ce <dtoa_prf+0x1c0>
    99c8:	12 1b       	sub	r17, r18
    99ca:	21 2f       	mov	r18, r17
    99cc:	01 c0       	rjmp	.+2      	; 0x99d0 <dtoa_prf+0x1c2>
    99ce:	20 e0       	ldi	r18, 0x00	; 0
    99d0:	8e 2d       	mov	r24, r14
    99d2:	88 71       	andi	r24, 0x18	; 24
    99d4:	59 f4       	brne	.+22     	; 0x99ec <dtoa_prf+0x1de>
    99d6:	f6 01       	movw	r30, r12
    99d8:	82 2f       	mov	r24, r18
    99da:	30 e2       	ldi	r19, 0x20	; 32
    99dc:	88 23       	and	r24, r24
    99de:	19 f0       	breq	.+6      	; 0x99e6 <dtoa_prf+0x1d8>
    99e0:	31 93       	st	Z+, r19
    99e2:	81 50       	subi	r24, 0x01	; 1
    99e4:	fb cf       	rjmp	.-10     	; 0x99dc <dtoa_prf+0x1ce>
    99e6:	c2 0e       	add	r12, r18
    99e8:	d1 1c       	adc	r13, r1
    99ea:	20 e0       	ldi	r18, 0x00	; 0
    99ec:	99 23       	and	r25, r25
    99ee:	29 f0       	breq	.+10     	; 0x99fa <dtoa_prf+0x1ec>
    99f0:	d6 01       	movw	r26, r12
    99f2:	9c 93       	st	X, r25
    99f4:	f6 01       	movw	r30, r12
    99f6:	31 96       	adiw	r30, 0x01	; 1
    99f8:	6f 01       	movw	r12, r30
    99fa:	51 11       	cpse	r21, r1
    99fc:	0b c0       	rjmp	.+22     	; 0x9a14 <dtoa_prf+0x206>
    99fe:	f6 01       	movw	r30, r12
    9a00:	82 2f       	mov	r24, r18
    9a02:	90 e3       	ldi	r25, 0x30	; 48
    9a04:	88 23       	and	r24, r24
    9a06:	19 f0       	breq	.+6      	; 0x9a0e <dtoa_prf+0x200>
    9a08:	91 93       	st	Z+, r25
    9a0a:	81 50       	subi	r24, 0x01	; 1
    9a0c:	fb cf       	rjmp	.-10     	; 0x9a04 <dtoa_prf+0x1f6>
    9a0e:	c2 0e       	add	r12, r18
    9a10:	d1 1c       	adc	r13, r1
    9a12:	20 e0       	ldi	r18, 0x00	; 0
    9a14:	0f 2d       	mov	r16, r15
    9a16:	06 0f       	add	r16, r22
    9a18:	9a 81       	ldd	r25, Y+2	; 0x02
    9a1a:	34 2f       	mov	r19, r20
    9a1c:	30 71       	andi	r19, 0x10	; 16
    9a1e:	44 ff       	sbrs	r20, 4
    9a20:	03 c0       	rjmp	.+6      	; 0x9a28 <dtoa_prf+0x21a>
    9a22:	91 33       	cpi	r25, 0x31	; 49
    9a24:	09 f4       	brne	.+2      	; 0x9a28 <dtoa_prf+0x21a>
    9a26:	01 50       	subi	r16, 0x01	; 1
    9a28:	10 16       	cp	r1, r16
    9a2a:	24 f4       	brge	.+8      	; 0x9a34 <dtoa_prf+0x226>
    9a2c:	09 30       	cpi	r16, 0x09	; 9
    9a2e:	18 f0       	brcs	.+6      	; 0x9a36 <dtoa_prf+0x228>
    9a30:	08 e0       	ldi	r16, 0x08	; 8
    9a32:	01 c0       	rjmp	.+2      	; 0x9a36 <dtoa_prf+0x228>
    9a34:	01 e0       	ldi	r16, 0x01	; 1
    9a36:	ab 01       	movw	r20, r22
    9a38:	77 ff       	sbrs	r23, 7
    9a3a:	02 c0       	rjmp	.+4      	; 0x9a40 <dtoa_prf+0x232>
    9a3c:	40 e0       	ldi	r20, 0x00	; 0
    9a3e:	50 e0       	ldi	r21, 0x00	; 0
    9a40:	fb 01       	movw	r30, r22
    9a42:	e4 1b       	sub	r30, r20
    9a44:	f5 0b       	sbc	r31, r21
    9a46:	a1 e0       	ldi	r26, 0x01	; 1
    9a48:	b0 e0       	ldi	r27, 0x00	; 0
    9a4a:	ac 0f       	add	r26, r28
    9a4c:	bd 1f       	adc	r27, r29
    9a4e:	ea 0f       	add	r30, r26
    9a50:	fb 1f       	adc	r31, r27
    9a52:	8e e2       	ldi	r24, 0x2E	; 46
    9a54:	a8 2e       	mov	r10, r24
    9a56:	4b 01       	movw	r8, r22
    9a58:	80 1a       	sub	r8, r16
    9a5a:	91 08       	sbc	r9, r1
    9a5c:	0b 2d       	mov	r16, r11
    9a5e:	10 e0       	ldi	r17, 0x00	; 0
    9a60:	11 95       	neg	r17
    9a62:	01 95       	neg	r16
    9a64:	11 09       	sbc	r17, r1
    9a66:	4f 3f       	cpi	r20, 0xFF	; 255
    9a68:	bf ef       	ldi	r27, 0xFF	; 255
    9a6a:	5b 07       	cpc	r21, r27
    9a6c:	21 f4       	brne	.+8      	; 0x9a76 <dtoa_prf+0x268>
    9a6e:	d6 01       	movw	r26, r12
    9a70:	ac 92       	st	X, r10
    9a72:	11 96       	adiw	r26, 0x01	; 1
    9a74:	6d 01       	movw	r12, r26
    9a76:	64 17       	cp	r22, r20
    9a78:	75 07       	cpc	r23, r21
    9a7a:	2c f0       	brlt	.+10     	; 0x9a86 <dtoa_prf+0x278>
    9a7c:	84 16       	cp	r8, r20
    9a7e:	95 06       	cpc	r9, r21
    9a80:	14 f4       	brge	.+4      	; 0x9a86 <dtoa_prf+0x278>
    9a82:	81 81       	ldd	r24, Z+1	; 0x01
    9a84:	01 c0       	rjmp	.+2      	; 0x9a88 <dtoa_prf+0x27a>
    9a86:	80 e3       	ldi	r24, 0x30	; 48
    9a88:	41 50       	subi	r20, 0x01	; 1
    9a8a:	51 09       	sbc	r21, r1
    9a8c:	31 96       	adiw	r30, 0x01	; 1
    9a8e:	d6 01       	movw	r26, r12
    9a90:	11 96       	adiw	r26, 0x01	; 1
    9a92:	7d 01       	movw	r14, r26
    9a94:	40 17       	cp	r20, r16
    9a96:	51 07       	cpc	r21, r17
    9a98:	24 f0       	brlt	.+8      	; 0x9aa2 <dtoa_prf+0x294>
    9a9a:	d6 01       	movw	r26, r12
    9a9c:	8c 93       	st	X, r24
    9a9e:	67 01       	movw	r12, r14
    9aa0:	e2 cf       	rjmp	.-60     	; 0x9a66 <dtoa_prf+0x258>
    9aa2:	64 17       	cp	r22, r20
    9aa4:	75 07       	cpc	r23, r21
    9aa6:	39 f4       	brne	.+14     	; 0x9ab6 <dtoa_prf+0x2a8>
    9aa8:	96 33       	cpi	r25, 0x36	; 54
    9aaa:	20 f4       	brcc	.+8      	; 0x9ab4 <dtoa_prf+0x2a6>
    9aac:	95 33       	cpi	r25, 0x35	; 53
    9aae:	19 f4       	brne	.+6      	; 0x9ab6 <dtoa_prf+0x2a8>
    9ab0:	31 11       	cpse	r19, r1
    9ab2:	01 c0       	rjmp	.+2      	; 0x9ab6 <dtoa_prf+0x2a8>
    9ab4:	81 e3       	ldi	r24, 0x31	; 49
    9ab6:	f6 01       	movw	r30, r12
    9ab8:	80 83       	st	Z, r24
    9aba:	f7 01       	movw	r30, r14
    9abc:	82 2f       	mov	r24, r18
    9abe:	90 e2       	ldi	r25, 0x20	; 32
    9ac0:	88 23       	and	r24, r24
    9ac2:	19 f0       	breq	.+6      	; 0x9aca <dtoa_prf+0x2bc>
    9ac4:	91 93       	st	Z+, r25
    9ac6:	81 50       	subi	r24, 0x01	; 1
    9ac8:	fb cf       	rjmp	.-10     	; 0x9ac0 <dtoa_prf+0x2b2>
    9aca:	f7 01       	movw	r30, r14
    9acc:	e2 0f       	add	r30, r18
    9ace:	f1 1d       	adc	r31, r1
    9ad0:	10 82       	st	Z, r1
    9ad2:	80 e0       	ldi	r24, 0x00	; 0
    9ad4:	90 e0       	ldi	r25, 0x00	; 0
    9ad6:	29 96       	adiw	r28, 0x09	; 9
    9ad8:	0f b6       	in	r0, 0x3f	; 63
    9ada:	f8 94       	cli
    9adc:	de bf       	out	0x3e, r29	; 62
    9ade:	0f be       	out	0x3f, r0	; 63
    9ae0:	cd bf       	out	0x3d, r28	; 61
    9ae2:	df 91       	pop	r29
    9ae4:	cf 91       	pop	r28
    9ae6:	1f 91       	pop	r17
    9ae8:	0f 91       	pop	r16
    9aea:	ff 90       	pop	r15
    9aec:	ef 90       	pop	r14
    9aee:	df 90       	pop	r13
    9af0:	cf 90       	pop	r12
    9af2:	bf 90       	pop	r11
    9af4:	af 90       	pop	r10
    9af6:	9f 90       	pop	r9
    9af8:	8f 90       	pop	r8
    9afa:	08 95       	ret

00009afc <strtod>:
    9afc:	8f 92       	push	r8
    9afe:	9f 92       	push	r9
    9b00:	af 92       	push	r10
    9b02:	bf 92       	push	r11
    9b04:	cf 92       	push	r12
    9b06:	df 92       	push	r13
    9b08:	ef 92       	push	r14
    9b0a:	ff 92       	push	r15
    9b0c:	0f 93       	push	r16
    9b0e:	1f 93       	push	r17
    9b10:	cf 93       	push	r28
    9b12:	df 93       	push	r29
    9b14:	ec 01       	movw	r28, r24
    9b16:	6b 01       	movw	r12, r22
    9b18:	61 15       	cp	r22, r1
    9b1a:	71 05       	cpc	r23, r1
    9b1c:	19 f0       	breq	.+6      	; 0x9b24 <strtod+0x28>
    9b1e:	fb 01       	movw	r30, r22
    9b20:	91 83       	std	Z+1, r25	; 0x01
    9b22:	80 83       	st	Z, r24
    9b24:	7e 01       	movw	r14, r28
    9b26:	ff ef       	ldi	r31, 0xFF	; 255
    9b28:	ef 1a       	sub	r14, r31
    9b2a:	ff 0a       	sbc	r15, r31
    9b2c:	08 81       	ld	r16, Y
    9b2e:	80 2f       	mov	r24, r16
    9b30:	90 e0       	ldi	r25, 0x00	; 0
    9b32:	0e 94 9b 48 	call	0x9136	; 0x9136 <isspace>
    9b36:	89 2b       	or	r24, r25
    9b38:	11 f0       	breq	.+4      	; 0x9b3e <strtod+0x42>
    9b3a:	e7 01       	movw	r28, r14
    9b3c:	f3 cf       	rjmp	.-26     	; 0x9b24 <strtod+0x28>
    9b3e:	0d 32       	cpi	r16, 0x2D	; 45
    9b40:	39 f4       	brne	.+14     	; 0x9b50 <strtod+0x54>
    9b42:	7e 01       	movw	r14, r28
    9b44:	82 e0       	ldi	r24, 0x02	; 2
    9b46:	e8 0e       	add	r14, r24
    9b48:	f1 1c       	adc	r15, r1
    9b4a:	09 81       	ldd	r16, Y+1	; 0x01
    9b4c:	11 e0       	ldi	r17, 0x01	; 1
    9b4e:	08 c0       	rjmp	.+16     	; 0x9b60 <strtod+0x64>
    9b50:	0b 32       	cpi	r16, 0x2B	; 43
    9b52:	29 f4       	brne	.+10     	; 0x9b5e <strtod+0x62>
    9b54:	7e 01       	movw	r14, r28
    9b56:	92 e0       	ldi	r25, 0x02	; 2
    9b58:	e9 0e       	add	r14, r25
    9b5a:	f1 1c       	adc	r15, r1
    9b5c:	09 81       	ldd	r16, Y+1	; 0x01
    9b5e:	10 e0       	ldi	r17, 0x00	; 0
    9b60:	e7 01       	movw	r28, r14
    9b62:	21 97       	sbiw	r28, 0x01	; 1
    9b64:	43 e0       	ldi	r20, 0x03	; 3
    9b66:	50 e0       	ldi	r21, 0x00	; 0
    9b68:	64 e7       	ldi	r22, 0x74	; 116
    9b6a:	72 e0       	ldi	r23, 0x02	; 2
    9b6c:	ce 01       	movw	r24, r28
    9b6e:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <strncasecmp_P>
    9b72:	89 2b       	or	r24, r25
    9b74:	c1 f4       	brne	.+48     	; 0x9ba6 <strtod+0xaa>
    9b76:	23 96       	adiw	r28, 0x03	; 3
    9b78:	45 e0       	ldi	r20, 0x05	; 5
    9b7a:	50 e0       	ldi	r21, 0x00	; 0
    9b7c:	6f e6       	ldi	r22, 0x6F	; 111
    9b7e:	72 e0       	ldi	r23, 0x02	; 2
    9b80:	ce 01       	movw	r24, r28
    9b82:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <strncasecmp_P>
    9b86:	89 2b       	or	r24, r25
    9b88:	09 f4       	brne	.+2      	; 0x9b8c <strtod+0x90>
    9b8a:	25 96       	adiw	r28, 0x05	; 5
    9b8c:	c1 14       	cp	r12, r1
    9b8e:	d1 04       	cpc	r13, r1
    9b90:	19 f0       	breq	.+6      	; 0x9b98 <strtod+0x9c>
    9b92:	f6 01       	movw	r30, r12
    9b94:	d1 83       	std	Z+1, r29	; 0x01
    9b96:	c0 83       	st	Z, r28
    9b98:	11 11       	cpse	r17, r1
    9b9a:	f6 c0       	rjmp	.+492    	; 0x9d88 <strtod+0x28c>
    9b9c:	60 e0       	ldi	r22, 0x00	; 0
    9b9e:	70 e0       	ldi	r23, 0x00	; 0
    9ba0:	80 e8       	ldi	r24, 0x80	; 128
    9ba2:	9f e7       	ldi	r25, 0x7F	; 127
    9ba4:	fa c0       	rjmp	.+500    	; 0x9d9a <strtod+0x29e>
    9ba6:	43 e0       	ldi	r20, 0x03	; 3
    9ba8:	50 e0       	ldi	r21, 0x00	; 0
    9baa:	6c e6       	ldi	r22, 0x6C	; 108
    9bac:	72 e0       	ldi	r23, 0x02	; 2
    9bae:	ce 01       	movw	r24, r28
    9bb0:	0e 94 b5 4f 	call	0x9f6a	; 0x9f6a <strncasecmp_P>
    9bb4:	89 2b       	or	r24, r25
    9bb6:	59 f4       	brne	.+22     	; 0x9bce <strtod+0xd2>
    9bb8:	c1 14       	cp	r12, r1
    9bba:	d1 04       	cpc	r13, r1
    9bbc:	09 f4       	brne	.+2      	; 0x9bc0 <strtod+0xc4>
    9bbe:	e9 c0       	rjmp	.+466    	; 0x9d92 <strtod+0x296>
    9bc0:	f2 e0       	ldi	r31, 0x02	; 2
    9bc2:	ef 0e       	add	r14, r31
    9bc4:	f1 1c       	adc	r15, r1
    9bc6:	f6 01       	movw	r30, r12
    9bc8:	f1 82       	std	Z+1, r15	; 0x01
    9bca:	e0 82       	st	Z, r14
    9bcc:	e2 c0       	rjmp	.+452    	; 0x9d92 <strtod+0x296>
    9bce:	20 e0       	ldi	r18, 0x00	; 0
    9bd0:	30 e0       	ldi	r19, 0x00	; 0
    9bd2:	a9 01       	movw	r20, r18
    9bd4:	c0 e0       	ldi	r28, 0x00	; 0
    9bd6:	d0 e0       	ldi	r29, 0x00	; 0
    9bd8:	f7 01       	movw	r30, r14
    9bda:	60 ed       	ldi	r22, 0xD0	; 208
    9bdc:	a6 2e       	mov	r10, r22
    9bde:	a0 0e       	add	r10, r16
    9be0:	89 e0       	ldi	r24, 0x09	; 9
    9be2:	8a 15       	cp	r24, r10
    9be4:	30 f1       	brcs	.+76     	; 0x9c32 <strtod+0x136>
    9be6:	91 2f       	mov	r25, r17
    9be8:	92 60       	ori	r25, 0x02	; 2
    9bea:	b9 2e       	mov	r11, r25
    9bec:	81 2f       	mov	r24, r17
    9bee:	88 70       	andi	r24, 0x08	; 8
    9bf0:	12 ff       	sbrs	r17, 2
    9bf2:	04 c0       	rjmp	.+8      	; 0x9bfc <strtod+0x100>
    9bf4:	81 11       	cpse	r24, r1
    9bf6:	24 c0       	rjmp	.+72     	; 0x9c40 <strtod+0x144>
    9bf8:	21 96       	adiw	r28, 0x01	; 1
    9bfa:	22 c0       	rjmp	.+68     	; 0x9c40 <strtod+0x144>
    9bfc:	81 11       	cpse	r24, r1
    9bfe:	21 97       	sbiw	r28, 0x01	; 1
    9c00:	a5 e0       	ldi	r26, 0x05	; 5
    9c02:	b0 e0       	ldi	r27, 0x00	; 0
    9c04:	0e 94 4d 43 	call	0x869a	; 0x869a <__muluhisi3>
    9c08:	dc 01       	movw	r26, r24
    9c0a:	cb 01       	movw	r24, r22
    9c0c:	88 0f       	add	r24, r24
    9c0e:	99 1f       	adc	r25, r25
    9c10:	aa 1f       	adc	r26, r26
    9c12:	bb 1f       	adc	r27, r27
    9c14:	9c 01       	movw	r18, r24
    9c16:	ad 01       	movw	r20, r26
    9c18:	2a 0d       	add	r18, r10
    9c1a:	31 1d       	adc	r19, r1
    9c1c:	41 1d       	adc	r20, r1
    9c1e:	51 1d       	adc	r21, r1
    9c20:	28 39       	cpi	r18, 0x98	; 152
    9c22:	89 e9       	ldi	r24, 0x99	; 153
    9c24:	38 07       	cpc	r19, r24
    9c26:	48 07       	cpc	r20, r24
    9c28:	89 e1       	ldi	r24, 0x19	; 25
    9c2a:	58 07       	cpc	r21, r24
    9c2c:	48 f0       	brcs	.+18     	; 0x9c40 <strtod+0x144>
    9c2e:	16 60       	ori	r17, 0x06	; 6
    9c30:	06 c0       	rjmp	.+12     	; 0x9c3e <strtod+0x142>
    9c32:	9e ef       	ldi	r25, 0xFE	; 254
    9c34:	a9 12       	cpse	r10, r25
    9c36:	0a c0       	rjmp	.+20     	; 0x9c4c <strtod+0x150>
    9c38:	13 fd       	sbrc	r17, 3
    9c3a:	40 c0       	rjmp	.+128    	; 0x9cbc <strtod+0x1c0>
    9c3c:	18 60       	ori	r17, 0x08	; 8
    9c3e:	b1 2e       	mov	r11, r17
    9c40:	8f ef       	ldi	r24, 0xFF	; 255
    9c42:	e8 1a       	sub	r14, r24
    9c44:	f8 0a       	sbc	r15, r24
    9c46:	00 81       	ld	r16, Z
    9c48:	1b 2d       	mov	r17, r11
    9c4a:	c6 cf       	rjmp	.-116    	; 0x9bd8 <strtod+0xdc>
    9c4c:	80 2f       	mov	r24, r16
    9c4e:	8f 7d       	andi	r24, 0xDF	; 223
    9c50:	85 34       	cpi	r24, 0x45	; 69
    9c52:	a1 f5       	brne	.+104    	; 0x9cbc <strtod+0x1c0>
    9c54:	80 81       	ld	r24, Z
    9c56:	8d 32       	cpi	r24, 0x2D	; 45
    9c58:	11 f4       	brne	.+4      	; 0x9c5e <strtod+0x162>
    9c5a:	10 61       	ori	r17, 0x10	; 16
    9c5c:	06 c0       	rjmp	.+12     	; 0x9c6a <strtod+0x16e>
    9c5e:	8b 32       	cpi	r24, 0x2B	; 43
    9c60:	21 f0       	breq	.+8      	; 0x9c6a <strtod+0x16e>
    9c62:	31 96       	adiw	r30, 0x01	; 1
    9c64:	61 e0       	ldi	r22, 0x01	; 1
    9c66:	70 e0       	ldi	r23, 0x00	; 0
    9c68:	04 c0       	rjmp	.+8      	; 0x9c72 <strtod+0x176>
    9c6a:	81 81       	ldd	r24, Z+1	; 0x01
    9c6c:	32 96       	adiw	r30, 0x02	; 2
    9c6e:	62 e0       	ldi	r22, 0x02	; 2
    9c70:	70 e0       	ldi	r23, 0x00	; 0
    9c72:	80 53       	subi	r24, 0x30	; 48
    9c74:	8a 30       	cpi	r24, 0x0A	; 10
    9c76:	18 f0       	brcs	.+6      	; 0x9c7e <strtod+0x182>
    9c78:	e6 1b       	sub	r30, r22
    9c7a:	f7 0b       	sbc	r31, r23
    9c7c:	1f c0       	rjmp	.+62     	; 0x9cbc <strtod+0x1c0>
    9c7e:	60 e0       	ldi	r22, 0x00	; 0
    9c80:	70 e0       	ldi	r23, 0x00	; 0
    9c82:	60 38       	cpi	r22, 0x80	; 128
    9c84:	9c e0       	ldi	r25, 0x0C	; 12
    9c86:	79 07       	cpc	r23, r25
    9c88:	5c f4       	brge	.+22     	; 0x9ca0 <strtod+0x1a4>
    9c8a:	db 01       	movw	r26, r22
    9c8c:	aa 0f       	add	r26, r26
    9c8e:	bb 1f       	adc	r27, r27
    9c90:	aa 0f       	add	r26, r26
    9c92:	bb 1f       	adc	r27, r27
    9c94:	6a 0f       	add	r22, r26
    9c96:	7b 1f       	adc	r23, r27
    9c98:	66 0f       	add	r22, r22
    9c9a:	77 1f       	adc	r23, r23
    9c9c:	68 0f       	add	r22, r24
    9c9e:	71 1d       	adc	r23, r1
    9ca0:	31 96       	adiw	r30, 0x01	; 1
    9ca2:	df 01       	movw	r26, r30
    9ca4:	11 97       	sbiw	r26, 0x01	; 1
    9ca6:	8c 91       	ld	r24, X
    9ca8:	80 53       	subi	r24, 0x30	; 48
    9caa:	8a 30       	cpi	r24, 0x0A	; 10
    9cac:	50 f3       	brcs	.-44     	; 0x9c82 <strtod+0x186>
    9cae:	14 ff       	sbrs	r17, 4
    9cb0:	03 c0       	rjmp	.+6      	; 0x9cb8 <strtod+0x1bc>
    9cb2:	71 95       	neg	r23
    9cb4:	61 95       	neg	r22
    9cb6:	71 09       	sbc	r23, r1
    9cb8:	c6 0f       	add	r28, r22
    9cba:	d7 1f       	adc	r29, r23
    9cbc:	11 ff       	sbrs	r17, 1
    9cbe:	08 c0       	rjmp	.+16     	; 0x9cd0 <strtod+0x1d4>
    9cc0:	c1 14       	cp	r12, r1
    9cc2:	d1 04       	cpc	r13, r1
    9cc4:	29 f0       	breq	.+10     	; 0x9cd0 <strtod+0x1d4>
    9cc6:	cf 01       	movw	r24, r30
    9cc8:	01 97       	sbiw	r24, 0x01	; 1
    9cca:	f6 01       	movw	r30, r12
    9ccc:	91 83       	std	Z+1, r25	; 0x01
    9cce:	80 83       	st	Z, r24
    9cd0:	ca 01       	movw	r24, r20
    9cd2:	b9 01       	movw	r22, r18
    9cd4:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <__floatunsisf>
    9cd8:	21 2f       	mov	r18, r17
    9cda:	23 70       	andi	r18, 0x03	; 3
    9cdc:	23 30       	cpi	r18, 0x03	; 3
    9cde:	19 f0       	breq	.+6      	; 0x9ce6 <strtod+0x1ea>
    9ce0:	4b 01       	movw	r8, r22
    9ce2:	5c 01       	movw	r10, r24
    9ce4:	06 c0       	rjmp	.+12     	; 0x9cf2 <strtod+0x1f6>
    9ce6:	4b 01       	movw	r8, r22
    9ce8:	5c 01       	movw	r10, r24
    9cea:	b7 fa       	bst	r11, 7
    9cec:	b0 94       	com	r11
    9cee:	b7 f8       	bld	r11, 7
    9cf0:	b0 94       	com	r11
    9cf2:	20 e0       	ldi	r18, 0x00	; 0
    9cf4:	30 e0       	ldi	r19, 0x00	; 0
    9cf6:	a9 01       	movw	r20, r18
    9cf8:	c5 01       	movw	r24, r10
    9cfa:	b4 01       	movw	r22, r8
    9cfc:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <__cmpsf2>
    9d00:	88 23       	and	r24, r24
    9d02:	09 f4       	brne	.+2      	; 0x9d06 <strtod+0x20a>
    9d04:	3e c0       	rjmp	.+124    	; 0x9d82 <strtod+0x286>
    9d06:	d7 ff       	sbrs	r29, 7
    9d08:	06 c0       	rjmp	.+12     	; 0x9d16 <strtod+0x21a>
    9d0a:	d1 95       	neg	r29
    9d0c:	c1 95       	neg	r28
    9d0e:	d1 09       	sbc	r29, r1
    9d10:	0b e8       	ldi	r16, 0x8B	; 139
    9d12:	12 e0       	ldi	r17, 0x02	; 2
    9d14:	02 c0       	rjmp	.+4      	; 0x9d1a <strtod+0x21e>
    9d16:	03 ea       	ldi	r16, 0xA3	; 163
    9d18:	12 e0       	ldi	r17, 0x02	; 2
    9d1a:	68 01       	movw	r12, r16
    9d1c:	f8 e1       	ldi	r31, 0x18	; 24
    9d1e:	cf 1a       	sub	r12, r31
    9d20:	d1 08       	sbc	r13, r1
    9d22:	90 e2       	ldi	r25, 0x20	; 32
    9d24:	e9 2e       	mov	r14, r25
    9d26:	f1 2c       	mov	r15, r1
    9d28:	ce 15       	cp	r28, r14
    9d2a:	df 05       	cpc	r29, r15
    9d2c:	74 f0       	brlt	.+28     	; 0x9d4a <strtod+0x24e>
    9d2e:	f8 01       	movw	r30, r16
    9d30:	25 91       	lpm	r18, Z+
    9d32:	35 91       	lpm	r19, Z+
    9d34:	45 91       	lpm	r20, Z+
    9d36:	54 91       	lpm	r21, Z
    9d38:	c5 01       	movw	r24, r10
    9d3a:	b4 01       	movw	r22, r8
    9d3c:	0e 94 31 45 	call	0x8a62	; 0x8a62 <__mulsf3>
    9d40:	4b 01       	movw	r8, r22
    9d42:	5c 01       	movw	r10, r24
    9d44:	ce 19       	sub	r28, r14
    9d46:	df 09       	sbc	r29, r15
    9d48:	ef cf       	rjmp	.-34     	; 0x9d28 <strtod+0x22c>
    9d4a:	04 50       	subi	r16, 0x04	; 4
    9d4c:	11 09       	sbc	r17, r1
    9d4e:	f5 94       	asr	r15
    9d50:	e7 94       	ror	r14
    9d52:	0c 15       	cp	r16, r12
    9d54:	1d 05       	cpc	r17, r13
    9d56:	41 f7       	brne	.-48     	; 0x9d28 <strtod+0x22c>
    9d58:	8a 2d       	mov	r24, r10
    9d5a:	88 0f       	add	r24, r24
    9d5c:	8b 2d       	mov	r24, r11
    9d5e:	88 1f       	adc	r24, r24
    9d60:	8f 3f       	cpi	r24, 0xFF	; 255
    9d62:	49 f0       	breq	.+18     	; 0x9d76 <strtod+0x27a>
    9d64:	20 e0       	ldi	r18, 0x00	; 0
    9d66:	30 e0       	ldi	r19, 0x00	; 0
    9d68:	a9 01       	movw	r20, r18
    9d6a:	c5 01       	movw	r24, r10
    9d6c:	b4 01       	movw	r22, r8
    9d6e:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <__cmpsf2>
    9d72:	81 11       	cpse	r24, r1
    9d74:	06 c0       	rjmp	.+12     	; 0x9d82 <strtod+0x286>
    9d76:	82 e2       	ldi	r24, 0x22	; 34
    9d78:	90 e0       	ldi	r25, 0x00	; 0
    9d7a:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <errno+0x1>
    9d7e:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <errno>
    9d82:	c5 01       	movw	r24, r10
    9d84:	b4 01       	movw	r22, r8
    9d86:	09 c0       	rjmp	.+18     	; 0x9d9a <strtod+0x29e>
    9d88:	60 e0       	ldi	r22, 0x00	; 0
    9d8a:	70 e0       	ldi	r23, 0x00	; 0
    9d8c:	80 e8       	ldi	r24, 0x80	; 128
    9d8e:	9f ef       	ldi	r25, 0xFF	; 255
    9d90:	04 c0       	rjmp	.+8      	; 0x9d9a <strtod+0x29e>
    9d92:	60 e0       	ldi	r22, 0x00	; 0
    9d94:	70 e0       	ldi	r23, 0x00	; 0
    9d96:	80 ec       	ldi	r24, 0xC0	; 192
    9d98:	9f e7       	ldi	r25, 0x7F	; 127
    9d9a:	df 91       	pop	r29
    9d9c:	cf 91       	pop	r28
    9d9e:	1f 91       	pop	r17
    9da0:	0f 91       	pop	r16
    9da2:	ff 90       	pop	r15
    9da4:	ef 90       	pop	r14
    9da6:	df 90       	pop	r13
    9da8:	cf 90       	pop	r12
    9daa:	bf 90       	pop	r11
    9dac:	af 90       	pop	r10
    9dae:	9f 90       	pop	r9
    9db0:	8f 90       	pop	r8
    9db2:	08 95       	ret

00009db4 <__ftoa_engine>:
    9db4:	28 30       	cpi	r18, 0x08	; 8
    9db6:	08 f0       	brcs	.+2      	; 0x9dba <__ftoa_engine+0x6>
    9db8:	27 e0       	ldi	r18, 0x07	; 7
    9dba:	33 27       	eor	r19, r19
    9dbc:	da 01       	movw	r26, r20
    9dbe:	99 0f       	add	r25, r25
    9dc0:	31 1d       	adc	r19, r1
    9dc2:	87 fd       	sbrc	r24, 7
    9dc4:	91 60       	ori	r25, 0x01	; 1
    9dc6:	00 96       	adiw	r24, 0x00	; 0
    9dc8:	61 05       	cpc	r22, r1
    9dca:	71 05       	cpc	r23, r1
    9dcc:	39 f4       	brne	.+14     	; 0x9ddc <__ftoa_engine+0x28>
    9dce:	32 60       	ori	r19, 0x02	; 2
    9dd0:	2e 5f       	subi	r18, 0xFE	; 254
    9dd2:	3d 93       	st	X+, r19
    9dd4:	30 e3       	ldi	r19, 0x30	; 48
    9dd6:	2a 95       	dec	r18
    9dd8:	e1 f7       	brne	.-8      	; 0x9dd2 <__ftoa_engine+0x1e>
    9dda:	08 95       	ret
    9ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    9dde:	30 f0       	brcs	.+12     	; 0x9dec <__ftoa_engine+0x38>
    9de0:	80 38       	cpi	r24, 0x80	; 128
    9de2:	71 05       	cpc	r23, r1
    9de4:	61 05       	cpc	r22, r1
    9de6:	09 f0       	breq	.+2      	; 0x9dea <__ftoa_engine+0x36>
    9de8:	3c 5f       	subi	r19, 0xFC	; 252
    9dea:	3c 5f       	subi	r19, 0xFC	; 252
    9dec:	3d 93       	st	X+, r19
    9dee:	91 30       	cpi	r25, 0x01	; 1
    9df0:	08 f0       	brcs	.+2      	; 0x9df4 <__ftoa_engine+0x40>
    9df2:	80 68       	ori	r24, 0x80	; 128
    9df4:	91 1d       	adc	r25, r1
    9df6:	df 93       	push	r29
    9df8:	cf 93       	push	r28
    9dfa:	1f 93       	push	r17
    9dfc:	0f 93       	push	r16
    9dfe:	ff 92       	push	r15
    9e00:	ef 92       	push	r14
    9e02:	19 2f       	mov	r17, r25
    9e04:	98 7f       	andi	r25, 0xF8	; 248
    9e06:	96 95       	lsr	r25
    9e08:	e9 2f       	mov	r30, r25
    9e0a:	96 95       	lsr	r25
    9e0c:	96 95       	lsr	r25
    9e0e:	e9 0f       	add	r30, r25
    9e10:	ff 27       	eor	r31, r31
    9e12:	ef 5f       	subi	r30, 0xFF	; 255
    9e14:	fc 4f       	sbci	r31, 0xFC	; 252
    9e16:	99 27       	eor	r25, r25
    9e18:	33 27       	eor	r19, r19
    9e1a:	ee 24       	eor	r14, r14
    9e1c:	ff 24       	eor	r15, r15
    9e1e:	a7 01       	movw	r20, r14
    9e20:	e7 01       	movw	r28, r14
    9e22:	05 90       	lpm	r0, Z+
    9e24:	08 94       	sec
    9e26:	07 94       	ror	r0
    9e28:	28 f4       	brcc	.+10     	; 0x9e34 <__ftoa_engine+0x80>
    9e2a:	36 0f       	add	r19, r22
    9e2c:	e7 1e       	adc	r14, r23
    9e2e:	f8 1e       	adc	r15, r24
    9e30:	49 1f       	adc	r20, r25
    9e32:	51 1d       	adc	r21, r1
    9e34:	66 0f       	add	r22, r22
    9e36:	77 1f       	adc	r23, r23
    9e38:	88 1f       	adc	r24, r24
    9e3a:	99 1f       	adc	r25, r25
    9e3c:	06 94       	lsr	r0
    9e3e:	a1 f7       	brne	.-24     	; 0x9e28 <__ftoa_engine+0x74>
    9e40:	05 90       	lpm	r0, Z+
    9e42:	07 94       	ror	r0
    9e44:	28 f4       	brcc	.+10     	; 0x9e50 <__ftoa_engine+0x9c>
    9e46:	e7 0e       	add	r14, r23
    9e48:	f8 1e       	adc	r15, r24
    9e4a:	49 1f       	adc	r20, r25
    9e4c:	56 1f       	adc	r21, r22
    9e4e:	c1 1d       	adc	r28, r1
    9e50:	77 0f       	add	r23, r23
    9e52:	88 1f       	adc	r24, r24
    9e54:	99 1f       	adc	r25, r25
    9e56:	66 1f       	adc	r22, r22
    9e58:	06 94       	lsr	r0
    9e5a:	a1 f7       	brne	.-24     	; 0x9e44 <__ftoa_engine+0x90>
    9e5c:	05 90       	lpm	r0, Z+
    9e5e:	07 94       	ror	r0
    9e60:	28 f4       	brcc	.+10     	; 0x9e6c <__ftoa_engine+0xb8>
    9e62:	f8 0e       	add	r15, r24
    9e64:	49 1f       	adc	r20, r25
    9e66:	56 1f       	adc	r21, r22
    9e68:	c7 1f       	adc	r28, r23
    9e6a:	d1 1d       	adc	r29, r1
    9e6c:	88 0f       	add	r24, r24
    9e6e:	99 1f       	adc	r25, r25
    9e70:	66 1f       	adc	r22, r22
    9e72:	77 1f       	adc	r23, r23
    9e74:	06 94       	lsr	r0
    9e76:	a1 f7       	brne	.-24     	; 0x9e60 <__ftoa_engine+0xac>
    9e78:	05 90       	lpm	r0, Z+
    9e7a:	07 94       	ror	r0
    9e7c:	20 f4       	brcc	.+8      	; 0x9e86 <__ftoa_engine+0xd2>
    9e7e:	49 0f       	add	r20, r25
    9e80:	56 1f       	adc	r21, r22
    9e82:	c7 1f       	adc	r28, r23
    9e84:	d8 1f       	adc	r29, r24
    9e86:	99 0f       	add	r25, r25
    9e88:	66 1f       	adc	r22, r22
    9e8a:	77 1f       	adc	r23, r23
    9e8c:	88 1f       	adc	r24, r24
    9e8e:	06 94       	lsr	r0
    9e90:	a9 f7       	brne	.-22     	; 0x9e7c <__ftoa_engine+0xc8>
    9e92:	84 91       	lpm	r24, Z
    9e94:	10 95       	com	r17
    9e96:	17 70       	andi	r17, 0x07	; 7
    9e98:	41 f0       	breq	.+16     	; 0x9eaa <__ftoa_engine+0xf6>
    9e9a:	d6 95       	lsr	r29
    9e9c:	c7 95       	ror	r28
    9e9e:	57 95       	ror	r21
    9ea0:	47 95       	ror	r20
    9ea2:	f7 94       	ror	r15
    9ea4:	e7 94       	ror	r14
    9ea6:	1a 95       	dec	r17
    9ea8:	c1 f7       	brne	.-16     	; 0x9e9a <__ftoa_engine+0xe6>
    9eaa:	e7 ea       	ldi	r30, 0xA7	; 167
    9eac:	f2 e0       	ldi	r31, 0x02	; 2
    9eae:	68 94       	set
    9eb0:	15 90       	lpm	r1, Z+
    9eb2:	15 91       	lpm	r17, Z+
    9eb4:	35 91       	lpm	r19, Z+
    9eb6:	65 91       	lpm	r22, Z+
    9eb8:	95 91       	lpm	r25, Z+
    9eba:	05 90       	lpm	r0, Z+
    9ebc:	7f e2       	ldi	r23, 0x2F	; 47
    9ebe:	73 95       	inc	r23
    9ec0:	e1 18       	sub	r14, r1
    9ec2:	f1 0a       	sbc	r15, r17
    9ec4:	43 0b       	sbc	r20, r19
    9ec6:	56 0b       	sbc	r21, r22
    9ec8:	c9 0b       	sbc	r28, r25
    9eca:	d0 09       	sbc	r29, r0
    9ecc:	c0 f7       	brcc	.-16     	; 0x9ebe <__ftoa_engine+0x10a>
    9ece:	e1 0c       	add	r14, r1
    9ed0:	f1 1e       	adc	r15, r17
    9ed2:	43 1f       	adc	r20, r19
    9ed4:	56 1f       	adc	r21, r22
    9ed6:	c9 1f       	adc	r28, r25
    9ed8:	d0 1d       	adc	r29, r0
    9eda:	7e f4       	brtc	.+30     	; 0x9efa <__ftoa_engine+0x146>
    9edc:	70 33       	cpi	r23, 0x30	; 48
    9ede:	11 f4       	brne	.+4      	; 0x9ee4 <__ftoa_engine+0x130>
    9ee0:	8a 95       	dec	r24
    9ee2:	e6 cf       	rjmp	.-52     	; 0x9eb0 <__ftoa_engine+0xfc>
    9ee4:	e8 94       	clt
    9ee6:	01 50       	subi	r16, 0x01	; 1
    9ee8:	30 f0       	brcs	.+12     	; 0x9ef6 <__ftoa_engine+0x142>
    9eea:	08 0f       	add	r16, r24
    9eec:	0a f4       	brpl	.+2      	; 0x9ef0 <__ftoa_engine+0x13c>
    9eee:	00 27       	eor	r16, r16
    9ef0:	02 17       	cp	r16, r18
    9ef2:	08 f4       	brcc	.+2      	; 0x9ef6 <__ftoa_engine+0x142>
    9ef4:	20 2f       	mov	r18, r16
    9ef6:	23 95       	inc	r18
    9ef8:	02 2f       	mov	r16, r18
    9efa:	7a 33       	cpi	r23, 0x3A	; 58
    9efc:	28 f0       	brcs	.+10     	; 0x9f08 <__ftoa_engine+0x154>
    9efe:	79 e3       	ldi	r23, 0x39	; 57
    9f00:	7d 93       	st	X+, r23
    9f02:	2a 95       	dec	r18
    9f04:	e9 f7       	brne	.-6      	; 0x9f00 <__ftoa_engine+0x14c>
    9f06:	10 c0       	rjmp	.+32     	; 0x9f28 <__ftoa_engine+0x174>
    9f08:	7d 93       	st	X+, r23
    9f0a:	2a 95       	dec	r18
    9f0c:	89 f6       	brne	.-94     	; 0x9eb0 <__ftoa_engine+0xfc>
    9f0e:	06 94       	lsr	r0
    9f10:	97 95       	ror	r25
    9f12:	67 95       	ror	r22
    9f14:	37 95       	ror	r19
    9f16:	17 95       	ror	r17
    9f18:	17 94       	ror	r1
    9f1a:	e1 18       	sub	r14, r1
    9f1c:	f1 0a       	sbc	r15, r17
    9f1e:	43 0b       	sbc	r20, r19
    9f20:	56 0b       	sbc	r21, r22
    9f22:	c9 0b       	sbc	r28, r25
    9f24:	d0 09       	sbc	r29, r0
    9f26:	98 f0       	brcs	.+38     	; 0x9f4e <__ftoa_engine+0x19a>
    9f28:	23 95       	inc	r18
    9f2a:	7e 91       	ld	r23, -X
    9f2c:	73 95       	inc	r23
    9f2e:	7a 33       	cpi	r23, 0x3A	; 58
    9f30:	08 f0       	brcs	.+2      	; 0x9f34 <__ftoa_engine+0x180>
    9f32:	70 e3       	ldi	r23, 0x30	; 48
    9f34:	7c 93       	st	X, r23
    9f36:	20 13       	cpse	r18, r16
    9f38:	b8 f7       	brcc	.-18     	; 0x9f28 <__ftoa_engine+0x174>
    9f3a:	7e 91       	ld	r23, -X
    9f3c:	70 61       	ori	r23, 0x10	; 16
    9f3e:	7d 93       	st	X+, r23
    9f40:	30 f0       	brcs	.+12     	; 0x9f4e <__ftoa_engine+0x19a>
    9f42:	83 95       	inc	r24
    9f44:	71 e3       	ldi	r23, 0x31	; 49
    9f46:	7d 93       	st	X+, r23
    9f48:	70 e3       	ldi	r23, 0x30	; 48
    9f4a:	2a 95       	dec	r18
    9f4c:	e1 f7       	brne	.-8      	; 0x9f46 <__ftoa_engine+0x192>
    9f4e:	11 24       	eor	r1, r1
    9f50:	ef 90       	pop	r14
    9f52:	ff 90       	pop	r15
    9f54:	0f 91       	pop	r16
    9f56:	1f 91       	pop	r17
    9f58:	cf 91       	pop	r28
    9f5a:	df 91       	pop	r29
    9f5c:	99 27       	eor	r25, r25
    9f5e:	87 fd       	sbrc	r24, 7
    9f60:	90 95       	com	r25
    9f62:	08 95       	ret

00009f64 <__ctype_isfalse>:
    9f64:	99 27       	eor	r25, r25
    9f66:	88 27       	eor	r24, r24

00009f68 <__ctype_istrue>:
    9f68:	08 95       	ret

00009f6a <strncasecmp_P>:
    9f6a:	fb 01       	movw	r30, r22
    9f6c:	dc 01       	movw	r26, r24
    9f6e:	41 50       	subi	r20, 0x01	; 1
    9f70:	50 40       	sbci	r21, 0x00	; 0
    9f72:	88 f0       	brcs	.+34     	; 0x9f96 <strncasecmp_P+0x2c>
    9f74:	8d 91       	ld	r24, X+
    9f76:	81 34       	cpi	r24, 0x41	; 65
    9f78:	1c f0       	brlt	.+6      	; 0x9f80 <strncasecmp_P+0x16>
    9f7a:	8b 35       	cpi	r24, 0x5B	; 91
    9f7c:	0c f4       	brge	.+2      	; 0x9f80 <strncasecmp_P+0x16>
    9f7e:	80 5e       	subi	r24, 0xE0	; 224
    9f80:	65 91       	lpm	r22, Z+
    9f82:	61 34       	cpi	r22, 0x41	; 65
    9f84:	1c f0       	brlt	.+6      	; 0x9f8c <strncasecmp_P+0x22>
    9f86:	6b 35       	cpi	r22, 0x5B	; 91
    9f88:	0c f4       	brge	.+2      	; 0x9f8c <strncasecmp_P+0x22>
    9f8a:	60 5e       	subi	r22, 0xE0	; 224
    9f8c:	86 1b       	sub	r24, r22
    9f8e:	61 11       	cpse	r22, r1
    9f90:	71 f3       	breq	.-36     	; 0x9f6e <strncasecmp_P+0x4>
    9f92:	99 0b       	sbc	r25, r25
    9f94:	08 95       	ret
    9f96:	88 1b       	sub	r24, r24
    9f98:	fc cf       	rjmp	.-8      	; 0x9f92 <strncasecmp_P+0x28>

00009f9a <strnlen_P>:
    9f9a:	fc 01       	movw	r30, r24
    9f9c:	05 90       	lpm	r0, Z+
    9f9e:	61 50       	subi	r22, 0x01	; 1
    9fa0:	70 40       	sbci	r23, 0x00	; 0
    9fa2:	01 10       	cpse	r0, r1
    9fa4:	d8 f7       	brcc	.-10     	; 0x9f9c <strnlen_P+0x2>
    9fa6:	80 95       	com	r24
    9fa8:	90 95       	com	r25
    9faa:	8e 0f       	add	r24, r30
    9fac:	9f 1f       	adc	r25, r31
    9fae:	08 95       	ret

00009fb0 <strnlen>:
    9fb0:	fc 01       	movw	r30, r24
    9fb2:	61 50       	subi	r22, 0x01	; 1
    9fb4:	70 40       	sbci	r23, 0x00	; 0
    9fb6:	01 90       	ld	r0, Z+
    9fb8:	01 10       	cpse	r0, r1
    9fba:	d8 f7       	brcc	.-10     	; 0x9fb2 <strnlen+0x2>
    9fbc:	80 95       	com	r24
    9fbe:	90 95       	com	r25
    9fc0:	8e 0f       	add	r24, r30
    9fc2:	9f 1f       	adc	r25, r31
    9fc4:	08 95       	ret

00009fc6 <strrev>:
    9fc6:	dc 01       	movw	r26, r24
    9fc8:	fc 01       	movw	r30, r24
    9fca:	67 2f       	mov	r22, r23
    9fcc:	71 91       	ld	r23, Z+
    9fce:	77 23       	and	r23, r23
    9fd0:	e1 f7       	brne	.-8      	; 0x9fca <strrev+0x4>
    9fd2:	32 97       	sbiw	r30, 0x02	; 2
    9fd4:	04 c0       	rjmp	.+8      	; 0x9fde <strrev+0x18>
    9fd6:	7c 91       	ld	r23, X
    9fd8:	6d 93       	st	X+, r22
    9fda:	70 83       	st	Z, r23
    9fdc:	62 91       	ld	r22, -Z
    9fde:	ae 17       	cp	r26, r30
    9fe0:	bf 07       	cpc	r27, r31
    9fe2:	c8 f3       	brcs	.-14     	; 0x9fd6 <strrev+0x10>
    9fe4:	08 95       	ret

00009fe6 <fputc>:
    9fe6:	0f 93       	push	r16
    9fe8:	1f 93       	push	r17
    9fea:	cf 93       	push	r28
    9fec:	df 93       	push	r29
    9fee:	fb 01       	movw	r30, r22
    9ff0:	23 81       	ldd	r18, Z+3	; 0x03
    9ff2:	21 fd       	sbrc	r18, 1
    9ff4:	03 c0       	rjmp	.+6      	; 0x9ffc <fputc+0x16>
    9ff6:	8f ef       	ldi	r24, 0xFF	; 255
    9ff8:	9f ef       	ldi	r25, 0xFF	; 255
    9ffa:	2c c0       	rjmp	.+88     	; 0xa054 <fputc+0x6e>
    9ffc:	22 ff       	sbrs	r18, 2
    9ffe:	16 c0       	rjmp	.+44     	; 0xa02c <fputc+0x46>
    a000:	46 81       	ldd	r20, Z+6	; 0x06
    a002:	57 81       	ldd	r21, Z+7	; 0x07
    a004:	24 81       	ldd	r18, Z+4	; 0x04
    a006:	35 81       	ldd	r19, Z+5	; 0x05
    a008:	42 17       	cp	r20, r18
    a00a:	53 07       	cpc	r21, r19
    a00c:	44 f4       	brge	.+16     	; 0xa01e <fputc+0x38>
    a00e:	a0 81       	ld	r26, Z
    a010:	b1 81       	ldd	r27, Z+1	; 0x01
    a012:	9d 01       	movw	r18, r26
    a014:	2f 5f       	subi	r18, 0xFF	; 255
    a016:	3f 4f       	sbci	r19, 0xFF	; 255
    a018:	31 83       	std	Z+1, r19	; 0x01
    a01a:	20 83       	st	Z, r18
    a01c:	8c 93       	st	X, r24
    a01e:	26 81       	ldd	r18, Z+6	; 0x06
    a020:	37 81       	ldd	r19, Z+7	; 0x07
    a022:	2f 5f       	subi	r18, 0xFF	; 255
    a024:	3f 4f       	sbci	r19, 0xFF	; 255
    a026:	37 83       	std	Z+7, r19	; 0x07
    a028:	26 83       	std	Z+6, r18	; 0x06
    a02a:	14 c0       	rjmp	.+40     	; 0xa054 <fputc+0x6e>
    a02c:	8b 01       	movw	r16, r22
    a02e:	ec 01       	movw	r28, r24
    a030:	fb 01       	movw	r30, r22
    a032:	00 84       	ldd	r0, Z+8	; 0x08
    a034:	f1 85       	ldd	r31, Z+9	; 0x09
    a036:	e0 2d       	mov	r30, r0
    a038:	19 95       	eicall
    a03a:	89 2b       	or	r24, r25
    a03c:	e1 f6       	brne	.-72     	; 0x9ff6 <fputc+0x10>
    a03e:	d8 01       	movw	r26, r16
    a040:	16 96       	adiw	r26, 0x06	; 6
    a042:	8d 91       	ld	r24, X+
    a044:	9c 91       	ld	r25, X
    a046:	17 97       	sbiw	r26, 0x07	; 7
    a048:	01 96       	adiw	r24, 0x01	; 1
    a04a:	17 96       	adiw	r26, 0x07	; 7
    a04c:	9c 93       	st	X, r25
    a04e:	8e 93       	st	-X, r24
    a050:	16 97       	sbiw	r26, 0x06	; 6
    a052:	ce 01       	movw	r24, r28
    a054:	df 91       	pop	r29
    a056:	cf 91       	pop	r28
    a058:	1f 91       	pop	r17
    a05a:	0f 91       	pop	r16
    a05c:	08 95       	ret

0000a05e <__ultoa_invert>:
    a05e:	fa 01       	movw	r30, r20
    a060:	aa 27       	eor	r26, r26
    a062:	28 30       	cpi	r18, 0x08	; 8
    a064:	51 f1       	breq	.+84     	; 0xa0ba <__ultoa_invert+0x5c>
    a066:	20 31       	cpi	r18, 0x10	; 16
    a068:	81 f1       	breq	.+96     	; 0xa0ca <__ultoa_invert+0x6c>
    a06a:	e8 94       	clt
    a06c:	6f 93       	push	r22
    a06e:	6e 7f       	andi	r22, 0xFE	; 254
    a070:	6e 5f       	subi	r22, 0xFE	; 254
    a072:	7f 4f       	sbci	r23, 0xFF	; 255
    a074:	8f 4f       	sbci	r24, 0xFF	; 255
    a076:	9f 4f       	sbci	r25, 0xFF	; 255
    a078:	af 4f       	sbci	r26, 0xFF	; 255
    a07a:	b1 e0       	ldi	r27, 0x01	; 1
    a07c:	3e d0       	rcall	.+124    	; 0xa0fa <__ultoa_invert+0x9c>
    a07e:	b4 e0       	ldi	r27, 0x04	; 4
    a080:	3c d0       	rcall	.+120    	; 0xa0fa <__ultoa_invert+0x9c>
    a082:	67 0f       	add	r22, r23
    a084:	78 1f       	adc	r23, r24
    a086:	89 1f       	adc	r24, r25
    a088:	9a 1f       	adc	r25, r26
    a08a:	a1 1d       	adc	r26, r1
    a08c:	68 0f       	add	r22, r24
    a08e:	79 1f       	adc	r23, r25
    a090:	8a 1f       	adc	r24, r26
    a092:	91 1d       	adc	r25, r1
    a094:	a1 1d       	adc	r26, r1
    a096:	6a 0f       	add	r22, r26
    a098:	71 1d       	adc	r23, r1
    a09a:	81 1d       	adc	r24, r1
    a09c:	91 1d       	adc	r25, r1
    a09e:	a1 1d       	adc	r26, r1
    a0a0:	20 d0       	rcall	.+64     	; 0xa0e2 <__ultoa_invert+0x84>
    a0a2:	09 f4       	brne	.+2      	; 0xa0a6 <__ultoa_invert+0x48>
    a0a4:	68 94       	set
    a0a6:	3f 91       	pop	r19
    a0a8:	2a e0       	ldi	r18, 0x0A	; 10
    a0aa:	26 9f       	mul	r18, r22
    a0ac:	11 24       	eor	r1, r1
    a0ae:	30 19       	sub	r19, r0
    a0b0:	30 5d       	subi	r19, 0xD0	; 208
    a0b2:	31 93       	st	Z+, r19
    a0b4:	de f6       	brtc	.-74     	; 0xa06c <__ultoa_invert+0xe>
    a0b6:	cf 01       	movw	r24, r30
    a0b8:	08 95       	ret
    a0ba:	46 2f       	mov	r20, r22
    a0bc:	47 70       	andi	r20, 0x07	; 7
    a0be:	40 5d       	subi	r20, 0xD0	; 208
    a0c0:	41 93       	st	Z+, r20
    a0c2:	b3 e0       	ldi	r27, 0x03	; 3
    a0c4:	0f d0       	rcall	.+30     	; 0xa0e4 <__ultoa_invert+0x86>
    a0c6:	c9 f7       	brne	.-14     	; 0xa0ba <__ultoa_invert+0x5c>
    a0c8:	f6 cf       	rjmp	.-20     	; 0xa0b6 <__ultoa_invert+0x58>
    a0ca:	46 2f       	mov	r20, r22
    a0cc:	4f 70       	andi	r20, 0x0F	; 15
    a0ce:	40 5d       	subi	r20, 0xD0	; 208
    a0d0:	4a 33       	cpi	r20, 0x3A	; 58
    a0d2:	18 f0       	brcs	.+6      	; 0xa0da <__ultoa_invert+0x7c>
    a0d4:	49 5d       	subi	r20, 0xD9	; 217
    a0d6:	31 fd       	sbrc	r19, 1
    a0d8:	40 52       	subi	r20, 0x20	; 32
    a0da:	41 93       	st	Z+, r20
    a0dc:	02 d0       	rcall	.+4      	; 0xa0e2 <__ultoa_invert+0x84>
    a0de:	a9 f7       	brne	.-22     	; 0xa0ca <__ultoa_invert+0x6c>
    a0e0:	ea cf       	rjmp	.-44     	; 0xa0b6 <__ultoa_invert+0x58>
    a0e2:	b4 e0       	ldi	r27, 0x04	; 4
    a0e4:	a6 95       	lsr	r26
    a0e6:	97 95       	ror	r25
    a0e8:	87 95       	ror	r24
    a0ea:	77 95       	ror	r23
    a0ec:	67 95       	ror	r22
    a0ee:	ba 95       	dec	r27
    a0f0:	c9 f7       	brne	.-14     	; 0xa0e4 <__ultoa_invert+0x86>
    a0f2:	00 97       	sbiw	r24, 0x00	; 0
    a0f4:	61 05       	cpc	r22, r1
    a0f6:	71 05       	cpc	r23, r1
    a0f8:	08 95       	ret
    a0fa:	9b 01       	movw	r18, r22
    a0fc:	ac 01       	movw	r20, r24
    a0fe:	0a 2e       	mov	r0, r26
    a100:	06 94       	lsr	r0
    a102:	57 95       	ror	r21
    a104:	47 95       	ror	r20
    a106:	37 95       	ror	r19
    a108:	27 95       	ror	r18
    a10a:	ba 95       	dec	r27
    a10c:	c9 f7       	brne	.-14     	; 0xa100 <__ultoa_invert+0xa2>
    a10e:	62 0f       	add	r22, r18
    a110:	73 1f       	adc	r23, r19
    a112:	84 1f       	adc	r24, r20
    a114:	95 1f       	adc	r25, r21
    a116:	a0 1d       	adc	r26, r0
    a118:	08 95       	ret

0000a11a <__mulshisi3>:
    a11a:	b7 ff       	sbrs	r27, 7
    a11c:	0c 94 4d 43 	jmp	0x869a	; 0x869a <__muluhisi3>

0000a120 <__mulohisi3>:
    a120:	0e 94 4d 43 	call	0x869a	; 0x869a <__muluhisi3>
    a124:	82 1b       	sub	r24, r18
    a126:	93 0b       	sbc	r25, r19
    a128:	08 95       	ret

0000a12a <_exit>:
    a12a:	f8 94       	cli

0000a12c <__stop_program>:
    a12c:	ff cf       	rjmp	.-2      	; 0xa12c <__stop_program>
